create or replace package body SAP_API is

  max_param_               PLS_INTEGER := 10;
  
  rfc_cache_clear_time_    DATE := SYSDATE-1;
  
  xml_cache_time_          NUMBER := 30/24/60/60;
  table_cache_time_        NUMBER := 24*60*60;
  
  show_xml_                BOOLEAN := FALSE;
  
  def_queue_length_        NUMBER := 300;
  def_cache_length_        NUMBER := 300;
  max_where_in_count_      NUMBER := 300;
  
  chr_31_                  VARCHAR2(1) := chr(31);
  amper_                   VARCHAR2(1) := chr(38);
  
  --sap_date_format_         VARCHAR2(10) := 'YYYYMMDD';
  sap_date_format_         VARCHAR2(10) := 'YYYY-MM-DD';
  sap_time_format_         VARCHAR2(10) := 'HH24:MI:SS';

  TYPE SUB_QUERY_CACHE_VAL  IS TABLE OF VARCHAR2(120) INDEX BY PLS_INTEGER;
  TYPE SUB_QUERY_CACHE      IS TABLE OF SUB_QUERY_CACHE_VAL INDEX BY VARCHAR2(200);
  TYPE SUB_QUERY_CACHE_NF   IS TABLE OF BOOLEAN INDEX BY VARCHAR2(200);

  TYPE SUB_QUERY_REC IS RECORD (
      table_name_              VARCHAR2(50),
      mode_                    VARCHAR2(10),
      exists_                  BOOLEAN,

      -- sub_query1_ => Sap_Api.Sub_Query( ...
      --                                   columns_      =>                'COL1 => COL2          : COL_NR'
      --                                                            table_names_ => query_names_  : query_to_parent_idx_
                                         -- col1->name_col1:2, col2=>name_col3:4  
      table_names_             NAME_TAB, -- col1     , col2 
      query_names_             NAME_TAB, -- name_col1, name_col2 
      query_to_return_idx_     IDX_TAB,  -- table_names_  => query_rec_.return_names_
      columns_count_           PLS_INTEGER,
      child_columns_str_       VARCHAR2(32767),

      -- sub_query1_ => Sap_Api.Sub_Query( ...
      --                                   join_columns_  =>                'TAB1_COL1 = TAB2_COL1, TAB1_COL2 = TAB2_COL2'
      --                                                            join_parent_names_ = join_child_names_
      where_                    VARCHAR2(300),
      pre_load_where_           VARCHAR2(300),
                                              -- TAB1_COL1 = TAB2_COL1, TAB1_COL2 = TAB2_COL2
      join_parent_names_        NAME_TAB,     -- TAB1_COL1, TAB1_COL2
      join_parent_return_idx_   IDX_TAB,      -- join_parent_names_ => query_rec_.return_names_
      join_parent_substr_start_ IDX_TAB,     
      join_parent_substr_len_   IDX_TAB,     
      join_child_names_         NAME_TAB,     -- TAB2_COL1, TAB2_COL2
      join_count_               PLS_INTEGER,

      use_cache_                BOOLEAN,
      add_new_value_to_cache_   BOOLEAN,
      max_cache_count_          PLS_INTEGER,
      table_cache_id_           NUMBER,
      table_cache_idx_          IDX_TAB,
      table_cache_name_         name_tab,
      table_cache_valid_to_     DATE,
      cache_                    SUB_QUERY_CACHE,
      not_found_                SUB_QUERY_CACHE_NF
  );
  TYPE SUB_QUERY_TAB IS TABLE OF SUB_QUERY_REC INDEX BY PLS_INTEGER;

  TYPE QUERY_REC IS RECORD (               -- col1->name_col1:2, col2=>name_col3:4 
      table_names_            NAME_TAB,    -- col1     , col2
      table_to_query_idx_     IDX_TAB,     -- 1        , 2                   table_names_ => query_names_
      table_to_return_idx_    IDX_TAB,     -- 2        , 4                   table_names_ => return_names_
      query_names_            NAME_TAB,    -- name_col1, name_col2
      query_names_idx_        IDX_TAB,     -- 2        , 4                   query_names_ => return_names_
      return_names_           NAME_TAB,    -- '', name_col1, '', name_col2, '_DEL_'
      return_names_count_     PLS_INTEGER, -- 4
      del_idx_                PLS_INTEGER);-- 5 

  TYPE QUERY_QUEUE_TAB IS TABLE OF String_Tab INDEX BY PLS_INTEGER;

  -- http://172.16.3.90:8001/sap/bc/soap/wsdl11?sap-client=800'||amper_||'services=BAPI_PROJECT_GETINFO
  
  client_         VARCHAR2(20)  := '800';
  url_wsdl_       VARCHAR2(100) := 'http://172.16.3.90:8080/sap/bc/soap/wsdl11';
  url_rfc_        VARCHAR2(100) := 'http://172.16.3.90:8080/sap/bc/soap/rfc';
  authorization_  VARCHAR2(100) := 'YS5idWxhOldlbGNvbWUwMQ==';  
  -- a.bula:Welcome01

/*
  client_         VARCHAR2(20)  := '800';
  url_wsdl_       VARCHAR2(100) := 'http://34.245.215.155:8000/sap/bc/soap/wsdl11';
  url_rfc_        VARCHAR2(100) := 'http://34.245.215.155:8000/sap/bc/soap/rfc';
  authorization_  VARCHAR2(100) := 'TkNfUExGTE9XNjU6QWJAemd1cDY=';  
  -- FND_PLFLOW65:Ab@zgup6
*/


  PROCEDURE Show_Error ( return_ IN attr_obj );
  PROCEDURE Get_Wsdl( rfc_name_ IN VARCHAR2, wsdl_ IN OUT NOCOPY CLOB );
  FUNCTION  Exec_XML( rfc_ IN OUT NOCOPY attr_tab ) RETURN CLOB;
  FUNCTION Calc_New_Columns_( columns1_ IN VARCHAR2, columns2_ IN VARCHAR2 ) RETURN VARCHAR2;


  PROCEDURE Init IS
      property_   VARCHAR(2000);
  BEGIN
      property_ := FND_Api.Get_Property( 'SAP_CLIENT' );
      IF property_ IS NOT NULL THEN
          Set_Client( property_ );
      END IF; 
      
      property_ := FND_Api.Get_Property( 'SAP_URL_WSDL' );
      IF property_ IS NOT NULL THEN
          Set_Url_WSDL( property_ );
      END IF; 
      
      property_ := FND_Api.Get_Property( 'SAP_URL_RFC' );
      IF property_ IS NOT NULL THEN
          Set_Url_Rfc( property_ );
      END IF; 
      
      property_ := FND_Api.Get_Property( 'SAP_AUTHORIZATION' );
      IF property_ IS NOT NULL THEN
          authorization_ := property_;
      END IF; 
      
      IF FND_Api.Get_Property( 'MANDT' ) IS NULL THEN
          FND_API.Set_User_Property( 'MANDT', client_ );
      END IF;
      
      
  END;
  
  PROCEDURE Clear IS
  BEGIN
      NULL;
  END;
  
  PROCEDURE Show_Xml ( show_ IN BOOLEAN DEFAULT TRUE ) IS
  BEGIN 
      show_xml_ := show_;
      FND_Api.Log_On();
  END; 

  PROCEDURE Set_User( user_ IN VARCHAR2, password_ IN VARCHAR2 ) IS
  BEGIN
      SELECT utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(user_||':'||password_)))
        INTO authorization_
       FROM dual; 
  END;

  PROCEDURE Set_Url_WSDL( url_ IN VARCHAR2 ) IS
  BEGIN
      url_wsdl_ := url_;
  END;

  PROCEDURE Set_Url_Rfc( url_ IN VARCHAR2 ) IS
  BEGIN
      url_wsdl_ := url_;
  END;

  PROCEDURE Set_URL( url_ IN VARCHAR2 ) IS
      tmp_url_ VARCHAR2(100);
  BEGIN
      tmp_url_ := url_;
      IF upper(tmp_url_) NOT LIKE 'HTTP%' THEN
          tmp_url_ := 'http://' || tmp_url_;
      END IF;
      IF upper(tmp_url_) NOT LIKE '%/' THEN
          tmp_url_ := trim(tmp_url_) || '/';
      END IF;
      url_wsdl_ := tmp_url_ || 'sap/bc/soap/wsdl11';
      url_rfc_  := tmp_url_ || 'sap/bc/soap/rfc';
  END;

  PROCEDURE Set_Client( new_clinet_ IN VARCHAR2 ) IS
  BEGIN
      client_ := new_clinet_;
  END;

  FUNCTION Str_To_Number( value_ IN VARCHAR2 ) RETURN NUMBER IS
  BEGIN
      IF value_ IS NULL THEN 
          RETURN NULL;
      ELSE
          RETURN to_number(value_, '999999999D999999', 'NLS_NUMERIC_CHARACTERS=''. ''');
      END IF;
      EXCEPTION WHEN OTHERS THEN
          FND_Api.Log( value_ );
          RAISE; 
  END;
  
  FUNCTION Str_To_Date  ( value_ IN VARCHAR2 ) RETURN DATE IS
  BEGIN
      IF value_ LIKE '____-__-__'THEN
          IF value_ = '0000-00-00' THEN
              RETURN to_date(NULL);
          ELSE
              RETURN to_date(value_,'YYYY-MM-DD');
          END IF;
      ELSE
          IF value_ = '00000000' OR (value_ IS NULL) THEN
              RETURN to_date(NULL);
          ELSE
              RETURN to_date(value_,'YYYYMMDD');
          END IF;
      END IF;
      EXCEPTION WHEN OTHERS THEN
          FND_Api.Log( value_ );
          RAISE; 
  END;
  
  FUNCTION Str_To_Time  ( value_ IN VARCHAR2, date_ IN DATE DEFAULT SYSDATE ) RETURN DATE IS
  BEGIN
      IF value_ = '00:00:00' OR value_ IS NULL THEN
          RETURN trunc(date_);
      ELSIF substr(value_,1,2) = '24' THEN
          RETURN to_date( to_char(date_,'YYYY-MM-DD ') || '00'||substr(value_,3),'YYYY-MM-DD HH24:mi:ss');
      ELSE
          RETURN to_date(to_char(date_,'YYYY-MM-DD ') || value_,'YYYY-MM-DD HH24:mi:ss');
      END IF;
      EXCEPTION WHEN OTHERS THEN
          FND_Api.Log( value_ );
          RAISE; 
  END;
  
  FUNCTION Str_To_Date_Time( date_ IN VARCHAR2, time_ IN VARCHAR2 ) RETURN DATE IS
  BEGIN
      RETURN Str_To_Time( time_, Str_To_Date( date_ ) );
  END;
  
  FUNCTION Number_To_Str( value_ IN NUMBER   ) RETURN VARCHAR2 IS
  BEGIN
       RETURN replace(to_char(value_),',','.');
  END;
  
  FUNCTION Date_To_Str  ( value_ IN DATE     ) RETURN VARCHAR2 IS
  BEGIN
      IF VALUE_ IS NULL THEN
          RETURN '0000-00-00';
      ELSE
          RETURN to_char(value_,'yyyy-mm-dd');
      END IF;
  END;

  FUNCTION Sap_Str_Date ( value_ IN DATE     ) RETURN VARCHAR2 IS
  BEGIN
      RETURN to_char( value_, sap_date_format_ );
  END;
  
  FUNCTION Sap_Str_Date ( value_ IN VARCHAR2 ) RETURN VARCHAR2 IS
  BEGIN
      RETURN to_char( Str_To_Date(value_), sap_date_format_ );
  END;


  FUNCTION Time_To_Str  ( value_ IN DATE     ) RETURN VARCHAR2 IS
      str_   VARCHAR2(10);
  BEGIN
      IF VALUE_ IS NULL THEN
          RETURN '00:00:00';
      ELSE
          str_ := to_char(value_,'HH24:mi:ss');
          IF substr(str_,1,2) = '00' THEN
              str_ := '24'||substr(str_,3);
          END IF;
          RETURN str_;
      END IF;
  END;
  
  FUNCTION List_Str_Number( value_ IN VARCHAR2 ) RETURN VARCHAR2 IS
      list_    FND_Api.List;
      ret_str_ VARCHAR2(32000);
  BEGIN
      ret_str_ := '';
      list_ := FND_API.Split_Trim( value_, ';' );
      FOR i IN 1..list_.count LOOP
          IF i = 1 THEN
              ret_str_ := Str_To_Number( list_(i) );
          ELSE
              ret_str_ := ret_str_ ||'; '||Str_To_Number( list_(i) );
          END IF;
      END LOOP;
      RETURN ret_str_;
  END;
  
  FUNCTION List_Str_Date  ( value_ IN VARCHAR2, format_ IN VARCHAR2 DEFAULT 'YYYY-MM-DD' ) RETURN VARCHAR2 IS
      list_    FND_Api.List;
      ret_str_ VARCHAR2(32000);
  BEGIN
      ret_str_ := '';
      list_ := FND_API.Split_Trim( value_, ';' );
      FOR i IN 1..list_.count LOOP
          IF i = 1 THEN
              ret_str_ := to_char( Str_To_Date( list_(i) ), format_);
          ELSE
              ret_str_ := ret_str_ ||'; '||to_char( Str_To_Date( list_(i) ), format_);
          END IF;
      END LOOP;
      RETURN ret_str_;
  END;
  
  FUNCTION List_Str_Time  ( value_ IN VARCHAR2, format_ IN VARCHAR2 DEFAULT 'YYYY-MM-DD HH24:MI:SS' ) RETURN VARCHAR2 IS
      list_    FND_Api.List;
      ret_str_ VARCHAR2(32000);
  BEGIN
      ret_str_ := '';
      list_ := FND_API.Split_Trim( value_, ';' );
      FOR i IN 1..list_.count LOOP
          IF i = 1 THEN
              ret_str_ := to_char( Str_To_Time( list_(i) ), format_);
          ELSE
              ret_str_ := ret_str_ ||'; '||to_char( Str_To_Time( list_(i) ), format_);
          END IF;
      END LOOP;
      RETURN ret_str_;
  END;  

  FUNCTION Build_Where_Cond( name_ IN VARCHAR2, query_ IN VARCHAR2, add_and_ IN BOOLEAN ) RETURN VARCHAR2 IS
      -- %we;>34   =>  name_ like '%we' and name_ > 34
      from_       NUMBER;
      to_         NUMBER;
      pos_        NUMBER;
      value_      VARCHAR2(500);
      from_value_ VARCHAR2(500);
      to_value_   VARCHAR2(500);
      parm_list_  VARCHAR2(32000);
      ret_        VARCHAR2(32000);
      count_      NUMBER;
  BEGIN
       IF query_ IS NULL THEN
           RETURN NULL;
       END IF;
       ret_ := '';
       parm_list_ := query_ || ';';
       from_ := 1;
       to_ := instr(parm_list_, ';', from_);
       count_ := 0;
       WHILE (to_ > 0) LOOP
          value_ := ltrim(rtrim(substr(parm_list_, from_, to_ - from_)));
          pos_ := instr(value_, '..');
          value_ := replace(value_,',','.');
          IF (pos_ > 0) THEN
    -- Handle between values
             from_value_ := substr(value_, 1, pos_ - 1);
             to_value_ := substr(value_, pos_ + 2);
             ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                     '('||name_||' >= '''||from_value_||''' AND '||name_||' <= '''||to_value_||''')';
    -- Handle wildcards
          ELSIF (instr(value_, '*') > 0 OR instr(value_, '+') > 0 OR instr(value_, '%') > 0 OR instr(value_, '_') > 0 ) THEN
             IF (substr(value_, 1, 2) = '!=') THEN
                 value_ := substr(value_,3);
                 ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                         '('||name_||' NOT LIKE '''||value_||''')';
             ELSE
                 ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                         '('||name_||' LIKE '''||value_||''')';
             END IF;
          ELSIF (substr(value_, 1, 2) IN ('<=','>=','!=') ) THEN
             ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                     '('||name_||' '||substr(value_, 1, 2)||' '''||substr(value_,3)||''')';
          ELSIF (substr(value_, 1, 1) IN ('<','>') ) THEN
             ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                     '('||name_||' '||substr(value_, 1, 1)||' '''||substr(value_,2)||''')';
          ELSIF substr(value_, 1, 1) = '='  THEN
             ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                     name_||' = '''||substr(value_,2)||'''';
          ELSE
             ret_ := ret_||CASE WHEN ret_ IS NOT NULL THEN ' OR ' ELSE '' END ||
                     name_||' = '''||value_||'''';
          END IF;
          from_ := to_ + 1;
          to_ := instr(parm_list_, ';', from_);
          count_ := count_ + 1;
       END LOOP;
       IF ret_ IS NOT NULL THEN
           IF count_ > 1 THEN
               ret_ := '('||ret_||')';
           END IF;
           IF add_and_ THEN
               ret_ := ' AND '||ret_;
           END IF;
       END IF;
       RETURN ret_;
  END;

  FUNCTION Change_Where_Condition( value_ IN VARCHAR2 ) RETURN VARCHAR2 IS
  BEGIN
      RETURN replace(replace(trim(replace(replace(replace(replace(replace(replace(value_ 
               ,' != ', ' NE '),' <> ', ' NE '), ' < ', ' LT '), ' > ', ' GT '), ' <= ', ' LE '), ' >= ', ' GE ')),
               '  AND ', ' AND '), ' AND  ', ' AND ');
  END;
  
  FUNCTION Change_Property( value_ IN VARCHAR2 ) RETURN VARCHAR2 IS
      --  #name#                 =>  FND_API.Get_Property(name)
      --  ##name#property##      =>  name = Build_Where_Cond( FND_API.Get_Property(property) )
      --  ##name$value##         =>  name = Build_Where_Cond( value )
      list_        FND_Api.List;
      property_    VARCHAR2(2000);
      ret_string_  VARCHAR2(2000);
      tmp_         VARCHAR2(2000);
      add_and_     BOOLEAN;
  BEGIN
      IF instr(value_,'#') = 0 THEN
          RETURN value_;
      END IF;
      IF length(value_) > 2000 THEN
          Error_Api.Error( 'WHERE_TOO_LONG', 'Where condition is too long, max=2000.');
      END IF;
      ret_string_ := value_;

      WHILE instr(ret_string_,'##') > 0 LOOP
          list_ := FND_Api.Split( ret_string_, '##' );
          EXIT WHEN list_.count < 3;          
          tmp_ := list_(2);
          add_and_ := TRIM(list_(1)) IS NOT NULL;
          list_ := FND_Api.Split( tmp_, '#' );
          IF list_.count = 1 THEN
              list_ := FND_Api.Split( tmp_, '$' );
              IF list_.count = 2 THEN
                  ret_string_ := REPLACE( ret_string_, '##'||tmp_||'##', 
                                   Build_Where_Cond( list_(1), list_(2), add_and_ ));
              ELSE
                  property_ := FND_Api.Get_Property(tmp_);
                  IF property_ IS NULL THEN
                      ret_string_ := REPLACE( ret_string_, '##'||tmp_||'##', '' );
                  ELSE
                      ret_string_ := REPLACE( ret_string_, '##'||tmp_||'##', 
                                      CASE WHEN add_and_ THEN ' AND ' ELSE '' END||
                                      tmp_||' = '''||property_||''' ' );
                  END IF;
              END IF;
          ELSIF list_.count = 2 THEN
              ret_string_ := REPLACE( ret_string_, '##'||tmp_||'##', 
                                 Build_Where_Cond( list_(1), FND_Api.Get_Property(list_(2)), add_and_ ));
          ELSE
              EXIT;
          END IF;
      END LOOP;
      
      list_ := FND_Api.Split( ret_string_, '#' );
      FOR i IN 2..list_.count-1 LOOP
          property_ := FND_Api.Get_Property(list_(i));
          IF property_ IS NOT NULL THEN
             ret_string_ := replace( ret_string_, '#'||list_(i)||'#', property_);
          END IF;
      END LOOP;
      RETURN trim(ret_string_);
  END;

   --  'COL1=COL2'      =>  tables ...
  PROCEDURE Build_Join_List( columns_                  IN VARCHAR2,
                             first_names_              IN OUT NOCOPY NAME_TAB,
                             join_parent_substr_start_ IN OUT NOCOPY IDX_TAB,
                             join_parent_substr_len_   IN OUT NOCOPY IDX_TAB,
                             second_names_             IN OUT NOCOPY NAME_TAB ) IS

      columns_list_     FND_API.List;
      equal_            NUMBER;
      n_                NUMBER;
      tmp_              VARCHAR2(30);
  BEGIN
      columns_list_ := FND_API.Split_Trim( REPLACE(columns_, ' AND ', ','), ',');
      first_names_.Extend( columns_list_.count );
      join_parent_substr_start_.Extend( columns_list_.count );
      join_parent_substr_len_.Extend( columns_list_.count );
      second_names_.Extend( columns_list_.count );
      FOR i IN 1..columns_list_.count LOOP
          equal_ := instr( columns_list_(i), '=' );
          IF equal_ > 0 THEN
              first_names_(i)  := Trim(substr( columns_list_(i), 1, equal_-1 ));
              second_names_(i) := Trim(substr( columns_list_(i), equal_+1 ));
          ELSE
              first_names_(i)  := columns_list_(i);
              second_names_(i) := columns_list_(i);
          END IF;
          n_ := instr(first_names_(i), '(' );
          IF n_ > 0 THEN
              tmp_ := trim(substr( first_names_(i), n_+1 ));
              tmp_ := substr( tmp_ , 1, length(tmp_) -1 );
              first_names_(i) := trim(substr( first_names_(i), 1, n_-1 ));
              n_ := instr( tmp_, ';');
              IF n_ IS NULL THEN
                  join_parent_substr_start_(i) := trim(tmp_);
              ELSE
                  join_parent_substr_start_(i) := trim(substr(tmp_, 1, n_-1));
                  join_parent_substr_len_(i) := trim(substr(tmp_,n_+1));
              END IF;
          END IF;
      END LOOP;
  END;

  --  'COL1=>COL2:NR'   =>  tables ...
  PROCEDURE Build_Name_List( columns_      IN VARCHAR2,
                             first_names_  IN OUT NOCOPY NAME_TAB,
                             second_names_ IN OUT NOCOPY NAME_TAB,
                             second_idx_   IN OUT NOCOPY IDX_TAB,
                             start_nr_     IN PLS_INTEGER DEFAULT NULL ) IS
      columns_list_     FND_API.List;
      equal_            NUMBER;
      number_           NUMBER; 
      nr_               PLS_INTEGER;
  BEGIN
      columns_list_ := FND_API.Split_Trim( columns_, ',');
      IF columns_list_.count > 0 THEN
          first_names_.Extend( columns_list_.count );
          second_names_.Extend( columns_list_.count );
          second_idx_.Extend( columns_list_.count );
          FOR i IN 1..columns_list_.count LOOP
              equal_ := instr( columns_list_(i), '=>' );
              number_:= instr( columns_list_(i), ':' );
              IF equal_ > 0 THEN
                  first_names_(i) := Trim(substr( columns_list_(i), 1, equal_-1 ));
                  IF number_ > 0 THEN
                      second_names_(i)  := Trim(substr( columns_list_(i), equal_+2, number_ - equal_ -2 ));
                      second_idx_(i)    := Trim(substr( columns_list_(i), number_+1 ));
                  ELSE
                      second_names_(i)  := Trim(substr( columns_list_(i), equal_+2 ));
                      second_idx_(i)    := NULL;
                  END IF;
              ELSE
                  IF number_ > 0 THEN
                      first_names_(i)   := Trim(substr( columns_list_(i), 1, number_-1 ));
                      second_names_(i)  := first_names_(i);
                      second_idx_(i)    := Trim(substr( columns_list_(i), number_+1 ));
                  ELSE
                      first_names_(i)   := columns_list_(i);
                      second_names_(i)  := columns_list_(i);
                      second_idx_(i)    := NULL;
                  END IF;
              END IF;
          END LOOP;
      END IF;

      nr_ := start_nr_ - 1;
      FOR i IN 1..second_idx_.count LOOP
          IF second_idx_(i) IS NOT NULL THEN 
              nr_ := second_idx_(i);
          ELSIF nr_ IS NOT NULL THEN
              nr_ := nr_ + 1;
              second_idx_(i) := nr_;
          END IF;
      END LOOP;
  END;

  FUNCTION Join_Columns( columns_tab_ IN OUT NOCOPY NAME_TAB ) RETURN VARCHAR2 IS
       columns_  VARCHAR2(32767);
  BEGIN
      FOR i IN 1..columns_tab_.count LOOP
          columns_ := columns_||CASE WHEN i=1 THEN '' ELSE ', ' END||columns_tab_(i);
      END LOOP;
      RETURN columns_;
  END;


  FUNCTION Init_Sub_Query_( query_rec_ IN OUT NOCOPY QUERY_REC, 
                            sub_query_ IN AttrS_Obj ) RETURN SUB_QUERY_REC IS
      found_           BOOLEAN;
      cache_id_        NUMBER;
      full_cache_id_   NUMBER;
      columns_         VARCHAR2(32767);
      max_idx_         PLS_INTEGER;
      sub_query_rec_   SUB_QUERY_REC;
    
      FUNCTION Check_Cache_Columns( names_ IN OUT NOCOPY NAME_TAB, cache_head_ IN sap_cache_head_tab%ROWTYPE ) RETURN BOOLEAN IS
          found_  BOOLEAN;
      BEGIN
          FOR i IN 1..names_.count LOOP
              found_ := FALSE;
              FOR j IN 1..cache_head_.table_columns_tab.count LOOP
                  IF names_(i) = cache_head_.table_columns_tab(j) THEN
                      found_ := TRUE;
                      EXIT;
                  END IF;
              END LOOP;
              IF NOT found_ THEN
                  RETURN FALSE;
              END IF;
          END LOOP;
          RETURN TRUE;
      END;
      
      PROCEDURE Read_From_Cache( cache_id_ IN NUMBER ) IS
          join_idx_   IDX_TAB;
          values_idx_ IDX_TAB;
          key_        VARCHAR2(200);
          cache_key_  BOOLEAN;
          value_      SUB_QUERY_CACHE_VAL;
          found_      BOOLEAN;                  
      BEGIN
          FOR r_ IN (SELECT *
                       FROM sap_cache_head_tab 
                      WHERE cache_id = cache_id_ ) LOOP                      
                  IF FND_Api.Log_Is_On() THEN
                      FND_Api.Time_Start( 'Read_From_Cache '||sub_query_rec_.table_name_ );
                  END IF;
                  cache_key_ := nvl( r_.table_columns_key = Join_Columns(sub_query_rec_.join_child_names_), FALSE);
                  IF NOT cache_key_ THEN                  
                      IF FND_Api.Log_Is_On() THEN
                          FND_API.Log( '!!!FullCache different_key '||r_.table_columns_key||' <> '||Join_Columns(sub_query_rec_.join_child_names_) );
                      END IF;
                      join_idx_ := IDX_TAB();
                      join_idx_.Extend( sub_query_rec_.join_count_ );
                      FOR i IN 1..sub_query_rec_.join_count_ LOOP
                          found_ := FALSE;
                          FOR j IN 1..r_.table_columns_count LOOP
                              IF r_.table_columns_tab(j) = sub_query_rec_.join_child_names_(i) THEN
                                  join_idx_(i) := j;
                                  found_ := TRUE;
                                  EXIT;
                              END IF;
                          END LOOP;
                          IF NOT found_ THEN
                              Error_Api.Error( 'SAP_COL_NOT_FOUND', 'Not found column :P1 in cache :P2.', sub_query_rec_.join_child_names_(i), r_.cache_id );
                          END IF;                      
                      END LOOP;
                  END IF;
                  values_idx_ := IDX_TAB();
                  values_idx_.Extend( sub_query_rec_.columns_count_ );
                  FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                      found_ := FALSE;
                      FOR j IN 1..r_.table_columns_count LOOP
                          IF r_.table_columns_tab(j) = sub_query_rec_.table_names_(i) THEN
                              values_idx_(i) := j;
                              found_ := TRUE;
                              EXIT;
                          END IF;
                      END LOOP;
                      IF NOT found_ THEN
                          Error_Api.Error( 'SAP_COL_NOT_FOUND', 'Not found column :P1 in cache :P2.', sub_query_rec_.table_names_(i), r_.cache_id );
                      END IF;
                  END LOOP;
                  
                  FOR v_ IN (SELECT key, t.row_values
                               FROM sap_cache_items_tab t
                              WHERE cache_id = r_.cache_id ) LOOP
                       IF cache_key_ THEN
                           key_ := v_.key;
                       ELSE
                           key_ := '';
                           FOR i IN 1..sub_query_rec_.join_count_ LOOP
                               key_ := key_ || v_.row_values( join_idx_(i) ) || chr_31_;
                           END LOOP;
                       END IF;
                       FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                            value_(i) := v_.row_values( values_idx_(i) );
                       END LOOP;
                       sub_query_rec_.cache_( key_ ) := value_;
                  END LOOP;
                  IF FND_Api.Log_Is_On() THEN
                      FND_Api.Time_Stop( 'Read_From_Cache '||sub_query_rec_.table_name_ );
                  END IF;
                  sub_query_rec_.add_new_value_to_cache_ := FALSE;
          END LOOP;
      END;
      
      PROCEDURE Pre_Load IS
          first_      BOOLEAN;    
          join_idx_   IDX_TAB;
          values_idx_ IDX_TAB;
          key_        VARCHAR2(200);
          value_      SUB_QUERY_CACHE_VAL;
          columns_    VARCHAR2(31767);
      BEGIN
              IF FND_Api.Log_Is_On() THEN
                  FND_Api.Time_Start( 'Pre_Load '||sub_query_rec_.table_name_ );
              END IF;
              first_ := TRUE;
              columns_ := Join_Columns(sub_query_rec_.join_child_names_)||
                          CASE WHEN sub_query_rec_.join_count_ > 0 THEN ', ' ELSE '' END|| 
                          Join_Columns(sub_query_rec_.table_names_);
              FOR r_ IN (SELECT t.This() obj
                            FROM TABLE( Sap_Api.Query( table_name_   => sub_query_rec_.table_name_,
                                                       columns_      => columns_,
                                                       where_        => sub_query_rec_.pre_load_where_,
                                                       name_cache_   => 'N'
                                                      ) 
                                 ) t ) LOOP
                   IF first_ THEN       
                      join_idx_ := IDX_TAB();
                      join_idx_.Extend( sub_query_rec_.join_count_ );
                      FOR i IN 1..sub_query_rec_.join_count_ LOOP
                          join_idx_(i) := r_.obj.Idx( sub_query_rec_.join_child_names_(i) );
                      END LOOP;
                      values_idx_ := IDX_TAB();
                      values_idx_.Extend( sub_query_rec_.columns_count_ );
                      FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                          values_idx_(i) := r_.obj.Idx( sub_query_rec_.table_names_(i) );
                      END LOOP;
                      first_ := FALSE;
                   END IF;
                   key_ := '';
                   FOR i IN 1..sub_query_rec_.join_count_ LOOP
                       key_ := key_ || r_.obj.values_( join_idx_(i) ) || chr_31_;
                   END LOOP;
                   value_.delete;
                   FOR j IN 1 .. sub_query_rec_.columns_count_ LOOP
                        value_(j) := r_.obj.values_( values_idx_(j) );
                   END LOOP;
                   sub_query_rec_.cache_( key_ ) := value_;
              END LOOP;
              IF FND_Api.Log_Is_On() THEN
                  FND_Api.Time_Stop( 'Pre_Load '||sub_query_rec_.table_name_ );
              END IF;
              sub_query_rec_.add_new_value_to_cache_ := FALSE;
      END;
  
      PROCEDURE Add_Table_Columns( columns_ IN OUT NOCOPY NAME_TAB ) IS
          found_  BOOLEAN;
      BEGIN
          FOR i IN 1..columns_.count LOOP
              found_ := FALSE;
              FOR j IN 1..query_rec_.table_names_.count LOOP
                  IF query_rec_.table_names_(j) = columns_(i) THEN
                      found_ := TRUE;
                      EXIT;
                  END IF;
              END LOOP;
              IF NOT found_ THEN
                  FOR j IN 1..query_rec_.query_names_.count LOOP
                      IF query_rec_.query_names_(j) = columns_(i) THEN
                          found_ := TRUE;
                          EXIT;
                      END IF;
                  END LOOP;
              END IF;
              IF NOT found_ THEN
                  query_rec_.query_names_.Extend( 1 );
                  query_rec_.query_names_( query_rec_.query_names_.count ) := '_'||columns_(i);
                  query_rec_.query_names_idx_.Extend( 1 );
                  query_rec_.query_names_idx_( query_rec_.query_names_idx_.count ) := NULL;

                  query_rec_.table_names_.Extend( 1 );
                  query_rec_.table_names_( query_rec_.table_names_.count ) := columns_(i);
                  query_rec_.table_to_query_idx_.Extend( 1 );
                  query_rec_.table_to_query_idx_( query_rec_.table_to_query_idx_.count ) := query_rec_.query_names_.count;
              END IF;
          END LOOP;
      END;
      
      PROCEDURE Add_Query_Columns( columns_ IN OUT NOCOPY NAME_TAB, idx_ IN OUT NOCOPY IDX_TAB ) IS
          found_  BOOLEAN;
      BEGIN
          FOR i IN 1..columns_.count LOOP
              found_ := FALSE;
              FOR j IN 1..query_rec_.query_names_.count LOOP
                  IF query_rec_.query_names_(j) = columns_(i) THEN
                      IF query_rec_.query_names_idx_(j) IS NULL THEN
                          query_rec_.query_names_idx_(j) := idx_(i);
                      ELSIF idx_(i) IS NULL THEN
                          NULL;
                      ELSIF query_rec_.query_names_idx_(j) <> idx_(i) THEN
                          Error_Api.Error( 'PROBLEM_IN_COL_NUMBER', 'Problem in column number, column :P1, number :P2 <> :P3. ',
                                                 columns_(i), query_rec_.query_names_idx_(j), idx_(i) );
                      END IF;
                      found_ := TRUE;
                      EXIT;
                  END IF;
              END LOOP;
              IF NOT found_ THEN
                  query_rec_.query_names_.Extend( 1 );
                  query_rec_.query_names_    ( query_rec_.query_names_.count ) := columns_(i);
                  query_rec_.query_names_idx_.Extend( 1 );
                  query_rec_.query_names_idx_( query_rec_.query_names_idx_.count ) := idx_(i);
              END IF;
          END LOOP;
      END;
      
  BEGIN
      sub_query_rec_.table_name_      := trim(upper(sub_query_.Get( 'TABLE_NAME' )));
      sub_query_rec_.mode_            := trim(upper(sub_query_.Get( 'MODE' ) ));
      IF sub_query_.Get( 'EXISTS') IS NOT NULL THEN
          sub_query_rec_.exists_          := upper(sub_query_.Get( 'EXISTS') ) IN ('Y','T');
      END IF;
      IF sub_query_rec_.mode_ = 'EXISTS' THEN
          sub_query_rec_.exists_ := TRUE;
          sub_query_rec_.mode_   := NULL;
      ELSIF sub_query_rec_.mode_ = 'NOT EXISTS' THEN
          sub_query_rec_.exists_ := FALSE;
          sub_query_rec_.mode_   := NULL;
      END IF;
      IF sub_query_rec_.mode_ IS NULL THEN
          sub_query_rec_.mode_ := '_';
      ELSIF sub_query_rec_.mode_ NOT IN ('MAX','MIN','SUM','COUNT','LIST','SKIP','IN','NOT IN') THEN
          Error_Api.Error( 'WRONG_SUB_QUERY_MODE', 'Wrong sub query mode :P1.', sub_query_rec_.mode_);
      END IF;

      sub_query_rec_.where_           := Change_Where_Condition( Change_Property( sub_query_.Get( 'WHERE' ) ) );
      sub_query_rec_.pre_load_where_  := Change_Where_Condition( Change_Property( sub_query_.Get( 'PRE_LOAD_WHERE' ) ) );
      sub_query_rec_.use_cache_       := Nvl( sub_query_.Get( 'USE_CACHE' ), 'Y') = 'Y';
      sub_query_rec_.add_new_value_to_cache_  := TRUE;
      sub_query_rec_.max_cache_count_ := def_cache_length_;

      sub_query_rec_.table_names_             := NAME_TAB();
      sub_query_rec_.query_names_             := NAME_TAB();
      sub_query_rec_.query_to_return_idx_     := IDX_TAB();

      sub_query_rec_.join_parent_names_       := NAME_TAB();
      sub_query_rec_.join_parent_substr_start_:= IDX_TAB();
      sub_query_rec_.join_parent_substr_len_  := IDX_TAB();
      sub_query_rec_.join_parent_return_idx_  := IDX_TAB();
      sub_query_rec_.join_child_names_        := NAME_TAB();
      
      --  'COL1=COL2'      =>  tables ...
      Build_Join_List( sub_query_.Get( 'JOIN_COLUMNS' ),
                       sub_query_rec_.join_parent_names_,
                       sub_query_rec_.join_parent_substr_start_,
                       sub_query_rec_.join_parent_substr_len_,
                       sub_query_rec_.join_child_names_ );
      sub_query_rec_.join_count_ := sub_query_rec_.join_child_names_.count;
      Add_Table_Columns( sub_query_rec_.join_parent_names_ );

      IF (nvl(sub_query_rec_.mode_,'_') = '_') OR 
         NOT (sub_query_rec_.mode_ IN ('IN','NOT IN') AND trim(sub_query_.Get( 'COLUMNS' )) IS NULL) THEN
          max_idx_ := 0;
          FOR i IN 1..query_rec_.query_names_idx_.count LOOP
              IF max_idx_ < query_rec_.query_names_idx_(i) THEN
                  max_idx_ := query_rec_.query_names_idx_(i);
              END IF;
          END LOOP;
          Build_Name_List( sub_query_.Get( 'COLUMNS' ),
                           sub_query_rec_.table_names_,
                           sub_query_rec_.query_names_,
                           sub_query_rec_.query_to_return_idx_,
                           max_idx_ + 1
                            );
          sub_query_rec_.columns_count_ := sub_query_rec_.table_names_.count;
          Add_Query_Columns( sub_query_rec_.query_names_, sub_query_rec_.query_to_return_idx_ );
      END IF;

      sub_query_rec_.child_columns_str_       := Join_Columns(sub_query_rec_.join_child_names_)||
                                                 CASE WHEN sub_query_rec_.join_count_ > 0 AND sub_query_rec_.table_names_.count > 0 THEN ', ' ELSE '' END|| 
                                                 Join_Columns(sub_query_rec_.table_names_);
      
      IF sub_query_rec_.table_name_ LIKE 'CACHE:%' AND nvl(sub_query_rec_.mode_,'_') = '_' THEN
          sub_query_rec_.table_name_ := trim(substr( sub_query_rec_.table_name_, 7 ));
          sub_query_rec_.use_cache_ := TRUE;
          cache_id_ := Add_Cache( 'CACHE',
                                  table_name_    => sub_query_rec_.table_name_,
                                  columns_key_   => Join_Columns(sub_query_rec_.join_child_names_), 
                                  columns_       => sub_query_rec_.child_columns_str_,
                                  where_         => sub_query_rec_.where_,
                                  next_update_sec_ => table_cache_time_,
                                  wait_            => 'Y' );
          sub_query_rec_.table_cache_id_ := cache_id_;
          sub_query_rec_.table_cache_idx_ := IDX_TAB();
          sub_query_rec_.table_cache_idx_.Extend(sub_query_rec_.columns_count_);
          DECLARE
              found_              BOOLEAN;
              table_columns_str_  VARCHAR2(4000);
          BEGIN
              SELECT table_columns, table_columns_tab, SYSDATE + next_update_sec/24/60/60
                INTO table_columns_str_, sub_query_rec_.table_cache_name_, sub_query_rec_.table_cache_valid_to_
                FROM sap_cache_head_tab
               WHERE cache_id = cache_id_;
               
              sub_query_rec_.child_columns_str_ := Calc_New_Columns_( sub_query_rec_.child_columns_str_, table_columns_str_ );
               
              FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                  found_ := FALSE;
                  FOR j IN 1..sub_query_rec_.table_cache_name_.count LOOP
                      IF sub_query_rec_.table_cache_name_(j) = sub_query_rec_.table_names_(i) THEN
                          sub_query_rec_.table_cache_idx_(i) := j;
                          found_ := TRUE;
                          EXIT;
                      END IF;
                  END LOOP;
                  IF NOT found_ THEN
                      Error_Api.Error( 'CACHE_COLUMN', 'Can''t find key column :P1.', sub_query_rec_.table_names_(i) );
                  END IF;
              END LOOP;
          END;
          IF FND_Api.Log_Is_On() THEN
              FND_API.Log( '    Cache: '||
                           'SELECT '||Join_Columns(sub_query_rec_.table_names_) ||
                           '  FROM  '||sub_query_rec_.table_name_||'  WHERE '||sub_query_rec_.where_  );
          END IF;
      ELSIF sub_query_rec_.table_name_ LIKE 'LCACHE:%' THEN
          sub_query_rec_.table_name_ := trim(substr( sub_query_rec_.table_name_, 8 ));
          sub_query_rec_.use_cache_ := TRUE;
          full_cache_id_ := Add_Cache( 'FULL',
                                  table_name_    => sub_query_rec_.table_name_,
                                  columns_key_   => Join_Columns(sub_query_rec_.join_child_names_), 
                                  columns_       => sub_query_rec_.child_columns_str_,
                                  where_         => sub_query_rec_.where_,
                                  next_update_sec_ => table_cache_time_,
                                  wait_            => 'Y' );
          IF FND_Api.Log_Is_On() THEN
              FND_API.Log( 'FullCache: '||
                           'SELECT '||Join_Columns(sub_query_rec_.table_names_) ||
                           '  FROM  '||sub_query_rec_.table_name_||'  WHERE '||sub_query_rec_.where_  );
          END IF;
      ELSIF sub_query_rec_.table_name_ LIKE 'PRELOAD:%' THEN
          sub_query_rec_.table_name_ := trim(substr( sub_query_rec_.table_name_, 9 ));
          IF sub_query_rec_.pre_load_where_ IS NULL THEN
              sub_query_rec_.pre_load_where_ := sub_query_rec_.where_;
          END IF;
          IF sub_query_rec_.pre_load_where_ IS NULL THEN
              sub_query_rec_.pre_load_where_ := '_';
          END IF;
      END IF;

      IF full_cache_id_ IS NOT NULL THEN
          Read_From_Cache( full_cache_id_ );
      END IF;
              
      IF sub_query_rec_.pre_load_where_ IS NOT NULL THEN
          IF sub_query_rec_.pre_load_where_ = '_' THEN
              sub_query_rec_.pre_load_where_ := '';
          END IF;
          Pre_Load();
      END IF;

      RETURN sub_query_rec_;      
  END;


  FUNCTION Get_Where_In_Sub_Query( sub_query_rec_ IN OUT NOCOPY SUB_QUERY_REC, max_rows_ IN NUMBER ) RETURN long_text_tab IS 
      TYPE value_tab  IS TABLE OF BOOLEAN INDEX BY VARCHAR2(30);
      TYPE values_tab IS TABLE OF value_tab INDEX BY PLS_INTEGER;
      values_tab_       values_tab;
      where_in_         VARCHAR2(32767);
      values_idx_       IDX_TAB;
      first_            BOOLEAN;
      value_            VARCHAR2(30);
      key_              VARCHAR2(30);
      count_            PLS_INTEGER;
      tab_num_          PLS_INTEGER; 
      max_count_        NUMBER;
      max_count_num_    NUMBER;
      return_tab_       long_text_tab;
      return_tab_count_ NUMBER;
      
      CURSOR get_values_( columns_ IN VARCHAR2, where_ IN VARCHAR2 ) IS
      SELECT t.This() obj
        FROM TABLE( Sap_Api.Query( table_name_  => sub_query_rec_.table_name_,
                                   columns_     => columns_,
                                   where_       => where_,
                                   max_rows_    => nvl( max_rows_, 100000),
                                   name_cache_  => 'N'
                                  ) 
                    ) t;
  BEGIN 
        IF sub_query_rec_.mode_ IN ('IN', 'NOT IN') THEN
          first_ := TRUE;
          FOR r_ IN get_values_( Join_Columns(sub_query_rec_.join_child_names_),
                                 Change_Where_Condition( Change_Property(sub_query_rec_.where_) ) ) LOOP
              IF first_ THEN
                  values_idx_ := IDX_TAB();
                  values_idx_.Extend( sub_query_rec_.join_count_ );
                  FOR i IN 1..sub_query_rec_.join_count_ LOOP
                     values_idx_(i) := r_.obj.Idx( sub_query_rec_.join_child_names_(i) );
                  END LOOP;
                  first_ := FALSE;
              END IF;
              
              FOR i IN 1..sub_query_rec_.join_count_ LOOP
                  value_ := r_.obj.values_( values_idx_(i) );
                  IF value_ IS NOT NULL THEN
                      values_tab_(i)( value_ ) := TRUE;
                  END IF;
              END LOOP;
          END LOOP;

          max_count_ := 0;
          FOR i IN 1..sub_query_rec_.join_count_ LOOP
              IF values_tab_(i).count > max_count_ THEN
                  max_count_ := values_tab_(i).count;
                  max_count_num_ := i;
              END IF;
          END LOOP;
          return_tab_ := long_text_tab();
          return_tab_count_ := TRUNC( (max_count_-1) / max_where_in_count_ ) + 1;
          return_tab_.Extend( return_tab_count_ );
          
          count_ := 0;
          FOR i IN 1..sub_query_rec_.join_count_ LOOP
              IF max_count_ > max_where_in_count_  AND i <> max_count_num_ THEN
                  IF values_tab_(i).count > max_where_in_count_ THEN
                      Error_Api.Error( 'WHERE_IN_MAX', 'Too many items in where_in statement.' );
                  END IF;
              END IF;
              
              IF max_count_ > max_where_in_count_ AND i = max_count_num_ THEN
                  NULL;
              ELSIF values_tab_(i).count = 0 THEN
                  IF sub_query_rec_.mode_ = 'IN' THEN
                      return_tab_ := long_text_tab();
                      return_tab_.Extend( 1 );
                      return_tab_(1) := sub_query_rec_.join_parent_names_(i)||' = ''$_$''';
                      RETURN return_tab_;
                  END IF;
              ELSIF values_tab_(i).count = 1 AND sub_query_rec_.mode_ = 'IN' THEN
                  where_in_ := where_in_ || CASE WHEN where_in_ IS NOT NULL THEN ' AND ' ELSE '' END ||
                               sub_query_rec_.join_parent_names_(i)||' = '|| values_tab_(i).first;
              ELSE
                  IF sub_query_rec_.mode_ = 'IN' THEN
                      where_in_ := where_in_ || CASE WHEN where_in_ IS NOT NULL THEN ' AND ' ELSE '' END ||
                                   sub_query_rec_.join_parent_names_(i)||' IN (';
                  ELSE
                      where_in_ := where_in_ || CASE WHEN where_in_ IS NOT NULL THEN ' AND ' ELSE '' END ||
                                   sub_query_rec_.join_parent_names_(i)||' NOT IN (';
                  END IF;
                  key_ := values_tab_(i).first;
                  where_in_ := where_in_||''''||key_||'''';
                  key_ := values_tab_(i).next( key_ );
                  WHILE key_ IS NOT NULL LOOP
                      where_in_ := where_in_||', '''||key_||'''';
                      key_ := values_tab_(i).next( key_ );
                  END LOOP;
                  where_in_ := where_in_||')';
              END IF;
          END LOOP;
          
          IF max_count_ <= max_where_in_count_ THEN
              return_tab_(1) := where_in_;
          ELSE
              IF sub_query_rec_.mode_ = 'IN' THEN
                  where_in_ := where_in_ || CASE WHEN where_in_ IS NOT NULL THEN ' AND ' ELSE '' END ||
                               sub_query_rec_.join_parent_names_(max_count_num_)||' IN (';
              ELSE
                  where_in_ := where_in_ || CASE WHEN where_in_ IS NOT NULL THEN ' AND ' ELSE '' END ||
                               sub_query_rec_.join_parent_names_(max_count_num_)||' NOT IN (';
              END IF;

              count_ := 1;
              tab_num_ := 1;
              key_ := values_tab_(max_count_num_).first;
              where_in_ := where_in_||''''||key_||'''';
              return_tab_(tab_num_) := where_in_;
              
              key_ := values_tab_(max_count_num_).next( key_ );
              WHILE key_ IS NOT NULL LOOP
                  IF count_ >= max_where_in_count_ THEN
                      return_tab_(tab_num_) := return_tab_(tab_num_)||')';
                      tab_num_ := tab_num_ + 1;
                      return_tab_(tab_num_) := where_in_;
                      count_ := 0;
                  END IF;
                  return_tab_(tab_num_) := return_tab_(tab_num_)||', '''||key_||'''';
                  count_ := count_ + 1;
                  key_ := values_tab_(max_count_num_).next( key_ );
              END LOOP;
              return_tab_(tab_num_) := return_tab_(tab_num_)||')';
          END IF;

          IF sub_query_rec_.query_names_.count = 0 THEN
              sub_query_rec_.mode_ := 'SKIP';
          ELSE
              sub_query_rec_.mode_ := '_';
          END IF;          
          IF FND_Api.Log_Is_On() THEN
              FOR i IN 1..return_tab_.count LOOP
                  FND_Api.Log( 'WHERE_IN('||i||') count_='||max_count_||' len='||length(return_tab_(i)) );
              END LOOP;
          END IF;
      ELSE
          return_tab_ := long_text_tab();
          return_tab_.Extend( 1 );
          return_tab_(1) := '';
      END IF;
      
      RETURN return_tab_;
  END;

  PROCEDURE Calc_Sub_Query_Value_( query_rec_      IN OUT NOCOPY QUERY_REC,
                                   queue_          IN OUT NOCOPY QUERY_QUEUE_TAB, 
                                   queue_count_    IN NUMBER,
                                   sub_query_rec_  IN OUT NOCOPY SUB_QUERY_REC   ) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      TYPE KEY_TAB      IS TABLE OF BOOLEAN INDEX BY VARCHAR2(200);                                   
                                   
      where_list_          long_text_tab;
      where_               VARCHAR2(32000);
      key_                 VARCHAR2(200);
      key_val_             VARCHAR2(200);
      value_list_          SUB_QUERY_CACHE_VAL;
      empty_value_         SUB_QUERY_CACHE_VAL;
      queue_key_list_      String_Tab;
      value_list_str_tab_  String_Tab;
      set_value_           BOOLEAN;
      not_found_key_tab_   KEY_TAB;
      old_values_          NAME_TAB;
      value_               VARCHAR2(200);
      cache_count_         PLS_INTEGER;

      CURSOR get_table_cache( key_ IN VARCHAR2 ) IS
      SELECT row_values
        FROM sap_cache_items_tab
       WHERE cache_id = sub_query_rec_.table_cache_id_
         AND key = key_
         AND valid_to >= SYSDATE;
      
      FUNCTION Get_Where( sql_where_    IN VARCHAR2, 
                          columns_list_ IN OUT NOCOPY NAME_TAB, 
                          where_list_   IN OUT NOCOPY long_text_tab ) RETURN VARCHAR2 IS
          where_  VARCHAR2(32767);
      BEGIN
          IF trim(sql_where_) IS NOT NULL THEN
              IF instr(upper(sql_where_),' OR ') > 0 THEN
                  where_ := '('|| Change_Where_Condition( Change_Property(sql_where_) ) ||')';
              ELSE
                  where_ := Change_Where_Condition( Change_Property(sql_where_) );
              END IF;
          END IF;
          FOR i IN 1..sub_query_rec_.join_count_ LOOP
              IF where_list_(i) IS NOT NULL THEN
                  IF instr(where_list_(i), ',' ) = 0 THEN
                      where_ := where_|| CASE WHEN where_ IS NOT NULL THEN ' AND ' ELSE '' END || 
                                         columns_list_(i)||' = '||where_list_(i);
                  ELSE
                      where_ := where_|| CASE WHEN where_ IS NOT NULL THEN ' AND ' ELSE '' END || 
                                         columns_list_(i)||' IN ('||where_list_(i)||') ';
                  END IF;
              ELSE
                  RETURN NULL;
              END IF;
          END LOOP;
          RETURN where_;
      END;
      
  BEGIN
      IF (queue_count_ = 0) OR (sub_query_rec_.mode_ = 'SKIP') THEN
          COMMIT;
          RETURN;
      END IF;
      
      IF sub_query_rec_.add_new_value_to_cache_ THEN
          where_list_ := long_text_tab();
          where_list_.Extend( sub_query_rec_.join_count_ );
          old_values_ := NAME_TAB();
          old_values_.Extend( sub_query_rec_.join_count_ );
          FOR i IN 1..sub_query_rec_.join_count_ LOOP
              empty_value_(i) := NULL;
              old_values_(i) := chr_31_;
          END LOOP;
          
          
      END IF;
/*
DBMS_output.put_line( '****************************************************' );
DBMS_output.put_line( 'sub_query_rec_.table_name_        '||sub_query_rec_.table_name_ );
DBMS_output.put_line( 'sub_query_rec_.columns_count_     '||sub_query_rec_.columns_count_ );
DBMS_output.put_line( 'sub_query_rec_.join_count_        '||sub_query_rec_.join_count_ );
DBMS_output.put_line( 'sub_query_rec_.child_columns_str_ '||sub_query_rec_.child_columns_str_ );

DBMS_output.put_line( '****  table_names_ '||sub_query_rec_.table_names_.count );
FOR i IN 1..sub_query_rec_.table_names_.count LOOP
    DBMS_output.put_line( i||' '||sub_query_rec_.table_names_(i) );
END LOOP;

DBMS_output.put_line( '****  query_names_ '||sub_query_rec_.query_names_.count );
FOR i IN 1..sub_query_rec_.query_names_.count LOOP
    DBMS_output.put_line( i||' '||sub_query_rec_.query_names_(i) );
END LOOP;


DBMS_output.put_line( '****  query_to_return_idx_ '||sub_query_rec_.query_to_return_idx_.count );
FOR i IN 1..sub_query_rec_.query_to_return_idx_.count LOOP
    DBMS_output.put_line( i||' '||sub_query_rec_.query_to_return_idx_(i) );
END LOOP;


DBMS_output.put_line( '****  join_parent_names_ '||sub_query_rec_.join_parent_names_.count );
FOR i IN 1..sub_query_rec_.join_parent_names_.count LOOP
    DBMS_output.put_line( i||' '||sub_query_rec_.join_parent_names_(i) );
END LOOP;


DBMS_output.put_line( '****  join_parent_return_idx_ '||sub_query_rec_.join_parent_return_idx_.count );
FOR i IN 1..sub_query_rec_.join_parent_return_idx_.count LOOP
    DBMS_output.put_line( i||' '||sub_query_rec_.join_parent_return_idx_(i) );
END LOOP;


DBMS_output.put_line( '****  join_child_names_ '||sub_query_rec_.join_child_names_.count );
FOR i IN 1..sub_query_rec_.join_child_names_.count LOOP
    DBMS_output.put_line( i||' '||sub_query_rec_.join_child_names_(i) );
END LOOP;
*/


      queue_key_list_ := String_Tab();
      queue_key_list_.Extend( queue_count_ );
      cache_count_ := 0;
      FOR q IN 1..queue_count_ LOOP
          IF queue_(q)( query_rec_.del_idx_ ) = 'Y' THEN
               queue_key_list_(q) := NULL;
               CONTINUE;
          END IF;
          set_value_ := FALSE;
          key_ := '';
          FOR i IN 1..sub_query_rec_.join_count_ LOOP
              key_val_ := queue_(q)( sub_query_rec_.join_parent_return_idx_(i) );
              IF key_val_ IS NULL THEN
                  queue_key_list_(q) := NULL;
                  IF sub_query_rec_.exists_ THEN
                      queue_(q)(query_rec_.del_idx_) := 'Y';
                      set_value_ := TRUE;
                  END IF;
                  key_ := NULL;
                  EXIT;
              END IF;
              IF sub_query_rec_.join_parent_substr_start_(i) IS NOT NULL THEN
                  key_val_ := substr( key_val_, sub_query_rec_.join_parent_substr_start_(i), sub_query_rec_.join_parent_substr_len_(i) );
              END IF;
              key_ := key_ || key_val_ || chr_31_;
          END LOOP;
          IF key_ IS NOT NULL AND sub_query_rec_.use_cache_ THEN
              IF sub_query_rec_.cache_.exists( key_ ) THEN
                  IF NOT sub_query_rec_.exists_ THEN
                      queue_(q)(query_rec_.del_idx_) := 'Y';
                      CONTINUE;
                  ELSE
                      value_list_ := sub_query_rec_.cache_( key_ );
                      FOR j IN 1..sub_query_rec_.columns_count_ LOOP
                            queue_(q)( sub_query_rec_.query_to_return_idx_(j) ) := value_list_(j) ;
                      END LOOP;
                      key_ := NULL;
                  END IF;
                  set_value_ := TRUE;
              ELSIF sub_query_rec_.not_found_.exists( key_ ) THEN
                  IF sub_query_rec_.exists_ THEN
                      queue_(q)(query_rec_.del_idx_) := 'Y';
                      CONTINUE;
                  ELSE
                      FOR j IN 1..sub_query_rec_.columns_count_ LOOP
                            queue_(q)( sub_query_rec_.query_to_return_idx_(j) ) := NULL;
                      END LOOP;
                      key_ := NULL;
                  END IF;
                  set_value_ := TRUE;
              ELSIF sub_query_rec_.table_cache_id_ IS NOT NULL THEN
                  value_list_str_tab_ := NULL; 
                  OPEN get_table_cache( key_ );
                  FETCH get_table_cache INTO value_list_str_tab_;
                  CLOSE get_table_cache;
                  IF value_list_str_tab_ IS NOT NULL THEN
                      cache_count_ := cache_count_ + 1;
                      FOR j IN 1..sub_query_rec_.columns_count_ LOOP
                            value_list_(j) := value_list_str_tab_( sub_query_rec_.table_cache_idx_(j)  );
                            queue_(q)( sub_query_rec_.query_to_return_idx_(j) ) := value_list_(j) ;
                      END LOOP;
                      sub_query_rec_.cache_( key_ ) := value_list_;
                      key_ := NULL;
                      set_value_ := TRUE;
                  END IF;
              END IF;
          END IF;
          queue_key_list_(q) := key_;
          IF NOT set_value_ THEN
              FOR j IN 1..sub_query_rec_.columns_count_ LOOP
                    queue_(q)( sub_query_rec_.query_to_return_idx_(j) ) := NULL;
              END LOOP;
          END IF;
          IF (key_ IS NOT NULL) AND sub_query_rec_.add_new_value_to_cache_ THEN
              IF NOT not_found_key_tab_.Exists( key_ ) THEN
                  not_found_key_tab_( key_ ) := FALSE;
                  FOR i IN 1..sub_query_rec_.join_count_ LOOP
                      value_ := queue_(q)( sub_query_rec_.join_parent_return_idx_(i) );
                      IF sub_query_rec_.join_parent_substr_start_(i) IS NOT NULL THEN
                          value_ := substr( value_, sub_query_rec_.join_parent_substr_start_(i), sub_query_rec_.join_parent_substr_len_(i) );
                      END IF;
                      IF old_values_(i) <> value_ THEN
                          where_list_(i) :=  CASE WHEN where_list_(i) IS NULL THEN '''' ELSE where_list_(i) ||', ''' END 
                                             || value_ ||''''; 
                          old_values_(i) := value_;
                      END IF;
                  END LOOP;
              END IF;
              --sub_query_rec_.cache_( key_ ) := empty_value_;
          END IF;
      END LOOP;
      IF cache_count_ > 0 AND FND_API.Log_Is_On() THEN
          FND_API.Log('Cache nr='||sub_query_rec_.table_cache_id_||' table='||sub_query_rec_.table_name_||
                      ' read '||cache_count_||' records.');
      END IF;
      
      IF sub_query_rec_.add_new_value_to_cache_ THEN
          where_ := Get_Where( sub_query_rec_.where_, sub_query_rec_.join_child_names_, where_list_ );
          IF where_ IS NOT NULL THEN
              DECLARE
                  first_         BOOLEAN;
                  parent_idx_    IDX_TAB;
                  value_idx_     IDX_TAB;
                  cache_idx_     IDX_TAB;
                  where_list_    text_tab;
                  cache_values_  string_tab;
              BEGIN
                  first_ := TRUE;
                  IF length(where_) > 4000 THEN
                      where_list_ := text_tab();
                      WHILE where_ IS NOT NULL LOOP
                          where_list_.Extend( 1 );
                          where_list_( where_list_.count ) := substr(where_, 1, 3700);
                          where_ := substr(where_, 3700 + 1);
                      END LOOP;
                  END IF;
                  parent_idx_ := IDX_TAB();
                  parent_idx_.Extend( sub_query_rec_.join_count_ );
                  value_idx_  := IDX_TAB();
                  value_idx_.Extend( sub_query_rec_.columns_count_ );
                  IF sub_query_rec_.table_cache_id_ IS NOT NULL THEN
                      cache_idx_  := IDX_TAB();
                      cache_idx_.Extend( sub_query_rec_.table_cache_name_.count );
                      cache_values_ := string_tab();
                      cache_values_.Extend( sub_query_rec_.table_cache_name_.count );
                      cache_count_ := 0;
                  END IF;
                  FOR r_ IN (SELECT t.This() obj
                                    FROM TABLE( Sap_Api.Query( table_name_  => sub_query_rec_.table_name_,
                                                               columns_     => sub_query_rec_.child_columns_str_,
                                                               where_       => where_,
                                                               where_list_  => where_list_,
                                                               max_rows_    => 10000,
                                                               name_cache_  => 'N'
                                                              ) 
                                         ) t  ) LOOP
                       IF first_ THEN
                           FOR i IN 1..sub_query_rec_.join_count_ LOOP
                               parent_idx_(i) := r_.obj.Idx( sub_query_rec_.join_child_names_(i) );
                           END LOOP;                       
                           FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                               value_idx_(i) := r_.obj.Idx( sub_query_rec_.table_names_(i) );
                           END LOOP;                       
                           IF sub_query_rec_.table_cache_id_ IS NOT NULL THEN
                               FOR i IN 1..sub_query_rec_.table_cache_name_.count LOOP
                                   cache_idx_(i) := r_.obj.Idx( sub_query_rec_.table_cache_name_(i) );
                               END LOOP;
                           END IF;
                           first_ := FALSE;
                       END IF;
                       key_ := '';
                       FOR i IN 1..sub_query_rec_.join_count_ LOOP
                           key_ := key_ || r_.obj.values_( parent_idx_(i) ) || chr_31_;
                       END LOOP;
                       not_found_key_tab_( key_ ) := TRUE;
                       CASE sub_query_rec_.mode_ 
                           WHEN '_' THEN
                               FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                    value_list_(i) := r_.obj.values_( value_idx_(i) );
                               END LOOP;
                           WHEN 'MAX' THEN
                               IF sub_query_rec_.cache_.exists( key_ ) THEN
                                   value_list_ := sub_query_rec_.cache_( key_ );
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                        IF value_list_(i) IS NOT NULL THEN
                                            value_list_(i) := 
                                                greatest(nvl(r_.obj.values_(value_idx_(i)), value_list_(i)), value_list_(i) );
                                        ELSE
                                            value_list_(i) := r_.obj.values_(value_idx_(i));
                                        END IF;
                                   END LOOP;
                               ELSE
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                       value_list_(i) := r_.obj.values_( value_idx_(i) );
                                   END LOOP;
                               END IF;
                           WHEN 'MIN' THEN
                               IF sub_query_rec_.cache_.exists( key_ ) THEN
                                   value_list_ := sub_query_rec_.cache_( key_ );
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                        IF value_list_(i) IS NOT NULL THEN
                                            value_list_(i) := 
                                                least(nvl(r_.obj.values_(value_idx_(i)), value_list_(i)), value_list_(i) );
                                        ELSE
                                            value_list_(i) := r_.obj.values_(value_idx_(i));
                                        END IF;
                                   END LOOP;
                               ELSE
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                       value_list_(i) := r_.obj.values_( value_idx_(i) );
                                   END LOOP;
                               END IF;
                           WHEN 'SUM' THEN
                               IF sub_query_rec_.cache_.exists( key_ ) THEN
                                   value_list_ := sub_query_rec_.cache_( key_ );
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                        value_list_(i) := value_list_(i) + nvl( Str_To_Number(r_.obj.values_( value_idx_(i) )), 0);
                                   END LOOP;
                               ELSE
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                       value_list_(i) := nvl(Str_To_Number(r_.obj.values_( value_idx_(i) )), 0);
                                   END LOOP;
                               END IF;
                           WHEN 'COUNT' THEN
                               IF sub_query_rec_.cache_.exists( key_ ) THEN
                                   value_list_ := sub_query_rec_.cache_( key_ );
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                        value_list_(i) := value_list_(i)+1;
                                   END LOOP;
                               ELSE
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                        value_list_(i) := '1';
                                   END LOOP;
                               END IF;
                           WHEN 'LIST' THEN
                               IF sub_query_rec_.cache_.exists( key_ ) THEN
                                   value_list_ := sub_query_rec_.cache_( key_ );
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                        IF instr(value_list_(i), r_.obj.values_( value_idx_(i) )) = 0 THEN
                                            value_list_(i) := substr(value_list_(i)||'; '||r_.obj.values_( value_idx_(i) ), 1, 1500);
                                        ELSE
                                            value_list_(i) := substr(value_list_(i),1,1500);
                                        END IF;
                                   END LOOP;
                               ELSE
                                   FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                       value_list_(i) :=r_.obj.values_( value_idx_(i) );
                                   END LOOP;
                               END IF;
                           ELSE
                               FOR i IN 1..sub_query_rec_.columns_count_ LOOP
                                    value_list_(i) := r_.obj.values_( value_idx_(i) );
                               END LOOP;
                       END CASE;
                       sub_query_rec_.cache_( key_ ) := value_list_;
                       
                       IF sub_query_rec_.table_cache_id_ IS NOT NULL THEN
                           FOR i IN 1..sub_query_rec_.table_cache_name_.count LOOP
                               cache_values_(i) := r_.obj.values_( cache_idx_(i) );
                           END LOOP;
                           INSERT INTO sap_cache_items_tab
                              (cache_id, row_no, key, row_values, valid_to )
                           VALUES
                              (sub_query_rec_.table_cache_id_, 0, key_, cache_values_, sub_query_rec_.table_cache_valid_to_ );
                           cache_count_ := cache_count_ + 1;   
                       END IF;
                  END LOOP;
                  IF (sub_query_rec_.table_cache_id_ IS NOT NULL) AND (cache_count_ > 0) THEN
                      UPDATE sap_cache_head_tab SET
                          count_rows = count_rows + cache_count_,
                          last_update = SYSDATE 
                      WHERE cache_id = sub_query_rec_.table_cache_id_;
                      IF FND_API.Log_Is_On() THEN
                          FND_API.Log('Cache nr='||sub_query_rec_.table_cache_id_||' table='||sub_query_rec_.table_name_||
                                      ' added '||cache_count_||' records.');
                      END IF;
                  END IF;
              END;
              
              key_ := not_found_key_tab_.First;
              WHILE key_ IS NOT NULL LOOP
                  IF NOT not_found_key_tab_( key_ ) THEN
                      sub_query_rec_.not_found_( key_ ) := TRUE;
                  END IF;
                  key_ := not_found_key_tab_.next( key_ );
              END LOOP;

              FOR q IN 1..queue_count_ LOOP
                   key_ := queue_key_list_(q);
                   IF key_ IS NOT NULL THEN
                       IF sub_query_rec_.cache_.exists( key_ ) THEN
                           IF NOT sub_query_rec_.exists_  THEN
                               queue_(q)( query_rec_.del_idx_ ) := 'Y';
                           ELSE
                               value_list_ := sub_query_rec_.cache_( key_ );
                               FOR j IN 1..sub_query_rec_.columns_count_ LOOP
                                    queue_(q)( sub_query_rec_.query_to_return_idx_(j) ) := value_list_(j) ;
                               END LOOP;
                           END IF;
                       ELSIF sub_query_rec_.exists_ THEN
                            queue_(q)( query_rec_.del_idx_ ) := 'Y';
                       /*ELSE
                           FOR j IN 1..sub_query_rec_.columns_count_ LOOP
                                queue_(q)( sub_query_rec_.query_to_return_idx_(j) ) := NULL;
                           END LOOP;
                       */    
                       END IF;
                   END IF;
              END LOOP;
          END IF;
          IF (sub_query_rec_.mode_ IS NOT NULL) AND (sub_query_rec_.mode_ != '_') THEN
              NULL;
          ELSIF sub_query_rec_.use_cache_ THEN
              IF sub_query_rec_.add_new_value_to_cache_ THEN
                  IF (sub_query_rec_.cache_.count - sub_query_rec_.max_cache_count_) >= 1 THEN
                      FND_APi.Log( 'Delete cache '||sub_query_rec_.table_name_||' count = '||(sub_query_rec_.cache_.count - sub_query_rec_.max_cache_count_) );
                  END IF;
                  FOR i IN 1..(sub_query_rec_.cache_.count - sub_query_rec_.max_cache_count_) LOOP              
                      key_ := sub_query_rec_.cache_.first;
                      sub_query_rec_.cache_.delete( key_ );
                  END LOOP;
              END IF;
          ELSE
              sub_query_rec_.cache_.delete;
          END IF;
      END IF;
      COMMIT;
  END;

   PROCEDURE Finish_Names(query_rec_ IN OUT NOCOPY query_rec, 
                          sub_query_ IN OUT NOCOPY SUB_QUERY_TAB )  IS
       first_empty_   PLS_INTEGER;
           
       FUNCTION Find_Return_Idx( name_ IN VARCHAR2 ) RETURN PLS_INTEGER IS
       BEGIN
           FOR i IN 1..query_rec_.return_names_count_ LOOP
               IF query_rec_.return_names_(i) = name_ THEN
                   RETURN i;
               END IF;
           END LOOP;
           Error_Api.Error( 'NAME_NOT_FOUND', 'Error in init names :P1.', name_ );
           RETURN NULL;
       END;

       FUNCTION Find_Table_Return_Idx( name_ IN VARCHAR2 ) RETURN PLS_INTEGER IS
       BEGIN
           FOR i IN 1..query_rec_.return_names_count_ LOOP
               IF query_rec_.return_names_(i) = name_ THEN
                   RETURN i;
               END IF;
           END LOOP;
           FOR i IN 1..query_rec_.table_names_.count LOOP
               IF query_rec_.table_names_(i) = name_ THEN
                   RETURN  query_rec_.table_to_return_idx_( i );
               END IF;
           END LOOP;
           Error_Api.Error( 'NAME_NOT_FOUND', 'Error in init names :P1.', name_ );
           RETURN NULL;
       END;
   BEGIN
       IF query_rec_.query_names_.count <> query_rec_.query_names_idx_.count THEN
           Error_Api.Error( 'WRONG_COUNT', 'Error in init names1 :P1 <> :P2.',
                                query_rec_.query_names_.count, query_rec_.query_names_idx_.count  );
       END IF;
       IF query_rec_.table_names_.count <> query_rec_.table_to_query_idx_.count THEN
           Error_Api.Error( 'WRONG_COUNT', 'Error in init names2 :P1 <> :P2.',
                                query_rec_.table_names_.count, query_rec_.table_to_query_idx_.count );
       END IF;

       query_rec_.query_names_.Extend(1);
       query_rec_.query_names_idx_.Extend(1);
       query_rec_.query_names_( query_rec_.query_names_.count ) := '_DEL_';
       query_rec_.query_names_idx_( query_rec_.query_names_idx_.count ) := NULL;
           
       query_rec_.return_names_count_ := query_rec_.query_names_.count;
       FOR i IN 1..query_rec_.query_names_idx_.count LOOP
           IF query_rec_.return_names_count_ < query_rec_.query_names_idx_(i) THEN
               query_rec_.return_names_count_ := query_rec_.query_names_idx_(i);
           END IF;
       END LOOP;           
       query_rec_.return_names_ := NAME_TAB();
       query_rec_.return_names_.Extend( query_rec_.return_names_count_ );
       FOR i IN 1..query_rec_.query_names_idx_.count LOOP
           IF query_rec_.query_names_idx_(i) IS NOT NULL THEN
               IF query_rec_.return_names_( query_rec_.query_names_idx_(i) ) IS NOT NULL THEN
                   Error_Api.Error( 'THE SAME_INDEX', 'Columns :P1 and :P1 are in the same index :P3.',
                        query_rec_.return_names_( query_rec_.query_names_idx_(i) ), 
                        query_rec_.query_names_(i), 
                        query_rec_.query_names_idx_(i)
                    );
               END IF;
               query_rec_.return_names_( query_rec_.query_names_idx_(i) ) := query_rec_.query_names_(i);
           END IF;
       END LOOP;           
       first_empty_ := 0;
       FOR i IN 1..query_rec_.query_names_idx_.count LOOP
           IF query_rec_.query_names_idx_(i) IS NULL THEN
               FOR j IN first_empty_+1..query_rec_.return_names_count_ LOOP
                   IF query_rec_.return_names_( j ) IS NULL THEN
                       first_empty_ := j;
                       EXIT;
                   END IF;
               END LOOP;
               query_rec_.return_names_( first_empty_ ) := query_rec_.query_names_(i);
               query_rec_.query_names_idx_( i ) := first_empty_;
           END IF;
       END LOOP;
       query_rec_.del_idx_ := query_rec_.query_names_idx_( query_rec_.query_names_idx_.count );

       query_rec_.table_to_return_idx_ := IDX_TAB();
       query_rec_.table_to_return_idx_.Extend( query_rec_.table_names_.count );
       FOR i IN 1..query_rec_.table_names_.count LOOP
           query_rec_.table_to_return_idx_(i) := query_rec_.query_names_idx_( query_rec_.table_to_query_idx_(i) );
       END LOOP;
           
       FOR i IN 1..sub_query_.count LOOP
           IF sub_query_(i).query_names_.count > 0 THEN
               FOR j IN 1..sub_query_(i).query_names_.count LOOP
                   IF sub_query_(i).query_to_return_idx_( j ) IS NULL THEN
                       sub_query_(i).query_to_return_idx_( j ) := Find_Return_Idx( sub_query_(i).query_names_( j ) );
                   END IF;
               END LOOP;
           END IF;
           sub_query_(i).join_parent_return_idx_.Extend( sub_query_(i).join_parent_names_.count );
           FOR j IN 1..sub_query_(i).join_parent_return_idx_.count LOOP
               sub_query_(i).join_parent_return_idx_(j) := Find_Table_Return_Idx( sub_query_(i).join_parent_names_( j ) );
           END LOOP;
       END LOOP;
   END;



  FUNCTION Rfc_List( fuFND_name_like_   IN VARCHAR2,
                     description_like_ IN VARCHAR2,
                     area_             IN VARCHAR2 DEFAULT NULL,
                     all_fuFND_         IN VARCHAR2 DEFAULT 'N',
                     language_         IN VARCHAR2 DEFAULT 'E' )  RETURN two_string_tab PIPELINED IS
  BEGIN 
      IF (nvl(fuFND_name_like_,'%') <> '%')
         OR (nvl(fuFND_name_like_,'%') = '%' AND nvl(description_like_,'%') = '%' ) THEN
          FOR r_ IN (SELECT * FROM (SELECT
                           t.Get( 'FUNCNAME' )      fuFND_name,
                           t.Get( 'FMODE' )         fmode,
                           t.Get( 'DESCRIPTION' )   DESCRIPTION,
                           t.Get( 'AREA' )          area,
                           t.Get( 'AREA_DESC' )     area_desc
                        FROM TABLE( SAP_API.Query( table_name_ => 'TFDIR',
                                                   columns_    => 'FUNCNAME, FMODE',
                                                   where_      => CASE WHEN all_fuFND_ = 'Y' THEN '' ELSE 'FMODE = ''R'' AND ' END||
                                                                  ' FUNCNAME LIKE '''||nvl(fuFND_name_like_,'%')||''' ',
                                                   max_rows_   => 100000,                                                   
                                                   sub_query1_ => Sap_Api.Sub_Query( table_name_    => 'TFTIT',
                                                                                     columns_       => 'STEXT => DESCRIPTION',
                                                                                     join_columns_  => 'FUNCNAME = FUNCNAME', 
                                                                                     where_         => 'SPRAS = '''|| language_ ||''' ',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query2_ => Sap_Api.Sub_Query( table_name_    => 'ENLFDIR',
                                                                                     columns_       => 'AREA => AREA',
                                                                                     join_columns_  => 'FUNCNAME = FUNCNAME', 
                                                                                     where_         => '',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query3_ => Sap_Api.Sub_Query( table_name_    => 'TLIBT',
                                                                                     columns_       => 'AREAT => AREA_DESC',
                                                                                     join_columns_  => 'AREA = AREA', 
                                                                                     where_         => 'SPRAS = '''|| language_ ||''' ' ),
                                                   sub_query4_ => Sap_Api.Sub_Query( table_name_    => 'ENLFDIR',
                                                                                     columns_       => '',
                                                                                     join_columns_  => 'FUNCNAME = FUNCNAME', 
                                                                                     where_         => 'AREA LIKE '''||area_||''' ',
                                                                                     mode_          => CASE WHEN nvl(area_,'%') <> '%' THEN 'IN' ELSE 'SKIP' END  )
                             )) t) t
                        WHERE t.area_desc||' '||t.DESCRIPTION LIKE  nvl(description_like_,'%')  ) LOOP
              PIPE ROW( two_string_rec( r_.fuFND_name, r_.fmode||' '||r_.area||', '||r_.area_desc||'>> '|| r_.DESCRIPTION ) );
          END LOOP;
      ELSE
          FOR r_ IN (SELECT * FROM (SELECT
                           t.Get( 'FUNCNAME' )      fuFND_name,
                           t.Get( 'FMODE' )         fmode,
                           t.Get( 'STEXT' )         DESCRIPTION,
                           t.Get( 'AREA' )          area,
                           t.Get( 'AREA_DESC' )     area_desc
                        FROM TABLE( SAP_API.Query( table_name_ => 'TFTIT',
                                                   columns_    => 'FUNCNAME, STEXT',
                                                   where_      => 'SPRAS = '''|| language_ ||''' AND STEXT LIKE '''||description_like_||''' '||
                                                                  CASE WHEN nvl(fuFND_name_like_,'%')= '%' THEN '' ELSE ' AND FUNCNAME LIKE '''||fuFND_name_like_||''' ' END,
                                                   max_rows_   => 100000,
                                                   sub_query1_ => Sap_Api.Sub_Query( table_name_    => 'TFDIR',
                                                                                     columns_       => 'FMODE => FMODE',
                                                                                     join_columns_  => 'FUNCNAME = FUNCNAME',
                                                                                     where_         => '',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query2_ => Sap_Api.Sub_Query( table_name_    => 'ENLFDIR',
                                                                                     columns_       => 'AREA => AREA',
                                                                                     join_columns_  => 'FUNCNAME = FUNCNAME',
                                                                                     where_         => '',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query3_ => Sap_Api.Sub_Query( table_name_    => 'TLIBT',
                                                                                     columns_       => 'AREAT => AREA_DESC',
                                                                                     join_columns_  => 'AREA = AREA',
                                                                                     where_         => 'SPRAS = '''|| language_ ||''' ' ),
                                                   sub_query4_ => Sap_Api.Sub_Query( table_name_    => 'ENLFDIR',
                                                                                     columns_       => '',
                                                                                     join_columns_  => 'FUNCNAME = FUNCNAME',
                                                                                     where_         => 'AREA LIKE '''||area_||''' ',
                                                                                     mode_          => CASE WHEN nvl(area_,'%') <> '%' THEN 'IN' ELSE 'SKIP' END  )
                             )) t) t
                        WHERE ( all_fuFND_ = 'N' OR t.fmode = 'R') AND
                              t.area_desc||' '||t.DESCRIPTION LIKE  nvl(description_like_,'%')  ) LOOP
              PIPE ROW( two_string_rec( r_.fuFND_name, r_.fmode||' '||r_.area||', '||r_.area_desc||'>> '|| r_.DESCRIPTION ) );
          END LOOP;
      END IF;
  RETURN;
/*
SELECT
      t.Get( 'FUNCNAME' )      fuFND_name,
      t.Get( 'FMODE' )         fuFND_mode
  FROM TABLE( SAP_API.Query( table_name_ => 'TFDIR',
                             columns_    => 'FUNCNAME, FMODE',
                             where_      => '(FMODE = ''R'') OR (FUNCNAME = ''BAPI_PROJECTDEF_GETLIST'')',
                             max_rows_   => 1000
                             )) t;
TFTIT                    Function Module Short Text                             
*/
/*
      last_module_ := '_';
      FOR r_ IN (SELECT  n.Get( 'FUNCNAME' )   FUNCNAME,
                         n.Get( 'STEXT' )      DESCRIPTION,
                         n.Get( 'GROUPNAME' )  GROUPNAME
                   FROM TABLE( SAP_API.Call_Tab('RFC_FUNCTION_SEARCH',
                                                 SAP_API.Param('', 
                                                       'FUNCNAME', replace(fuFND_name_like_,'%','*'),
                                                       'LANGUAGE', 'E'
                                                       ),
                                                 SAP_API.Param('FUNCTIONS'),
                                                 path_ => 'RFC_FUNCTION_SEARCH/FUNCTIONS'
                                            )) n
                   WHERE nvl(n.Get( 'STEXT' ),'_') LIKE nvl(description_like_,'%')
                  ) LOOP
          IF instr( r_.FUNCNAME, '/') = 0 THEN
              description_ := r_.DESCRIPTION;
              module_      := r_.GROUPNAME;
              
              IF nvl(last_module_,'_1') <> nvl(module_,'_2') THEN
                  module_name_ := SAP_API.Quick_Value( table_name_ => 'TLIBT',
                                                       column_     => 'AREAT',
                                                       where_      => 'AREA = '''||module_||''' AND SPRAS = '''|| language_ ||''' ' );
                  last_module_ := module_;
              END IF;
          
              PIPE ROW( two_string_rec( r_.FUNCNAME, rpad(module_name_,41)||'>> '|| description_ ) );
          END IF;
      END LOOP;
      
      IF nvl(description_like_,'%') != '%' THEN
          FOR r_ IN (SELECT  n.Get( 'AREA' )   AREA,
                             n.Get( 'AREAT' )  AREAT
                       FROM TABLE( SAP_API.Query(table_name_ => 'TLIBT',
                                                 columns_    => 'AREAT, AREA',
                                                 where_      => 'AREAT like '''||description_like_||''' AND SPRAS = '''|| language_ ||''' '
                                                )) n
                      ) LOOP
              FOR f_ IN (SELECT  n.Get( 'FUNCNAME' )   FUNCNAME,
                                 n.Get( 'STEXT' )      DESCRIPTION,
                                 n.Get( 'GROUPNAME' )  GROUPNAME
                           FROM TABLE( SAP_API.Call_Tab('RFC_FUNCTION_SEARCH',
                                                         SAP_API.Param('', 
                                                               'FUNCNAME',  replace(fuFND_name_like_,'%','*'),
                                                               'LANGUAGE', 'E',
                                                               'GROUPNAME', r_.AREA
                                                               ),
                                                         SAP_API.Param('FUNCTIONS'),
                                                         path_ => 'RFC_FUNCTION_SEARCH/FUNCTIONS'
                                                    )) n
                            WHERE nvl(n.Get( 'STEXT' ),'_') NOT LIKE nvl(description_like_,'%')
                          ) LOOP
                  IF instr( f_.FUNCNAME, '/') = 0 THEN
                      description_ := f_.DESCRIPTION;
                      module_      := f_.GROUPNAME;
                      module_name_ := r_.AREAT;
                      
                      PIPE ROW( two_string_rec( f_.FUNCNAME, rpad(module_name_,41)||'>> '|| description_ ) );
                  END IF;
              END LOOP;
          END LOOP;
      END IF;
*/
      
  END;


  FUNCTION Rfc_Source ( rfc_name_  IN VARCHAR2 ) RETURN CLOB IS
     tmp_source_    CLOB;       
     source_        CLOB;      
  BEGIN
      DBMS_lob.createtemporary( tmp_source_, true );
      FOR r_ IN (SELECT l.Get('LINE')   line
                        FROM TABLE( SAP_API.Call_Tab('RPY_FUNCTIONMODULE_READ_NEW',
                                                     SAP_API.Param( '', 
                                                                   'FUNCTIONNAME', rfc_name_
                                                                  ),
                                                     SAP_API.Param('SOURCE'),
                                                     path_ => 'RPY_FUNCTIONMODULE_READ/SOURCE'
                                                    )) l
                  ) LOOP
          DBMS_lob.append( tmp_source_, r_.line||chr(13)||chr(10) );
      END LOOP;
      source_ := tmp_source_;
      DBMS_LOB.freetemporary(tmp_source_);
      RETURN source_;
  END;


  FUNCTION Rfc_Detail( rfc_name_ IN VARCHAR2 ) RETURN RFC_DESC_TAB PIPELINED IS
      rac_tab_     RFC_DESC_TAB;
      wsdl_        CLOB;
      obj_         Attr_Obj;
      struct_tab_  two_string_tab;
      
      CURSOR get_table_desc_ IS
       SELECT  
              l.Get('TABNAME')       TABNAME,
              l.Get('FIELDNAME')     FIELDNAME,      
              l.Get('PARAMETER')     PARAMETER,
              l.Get('PARAMCLASS')    PARAMCLASS,
              l.Get('EXID')          EXID,
              l.Get('POSITION')      POSITION,
              l.Get('INTLENGTH')     INTLENGTH,
              l.Get('PARAMTEXT')     PARAMTEXT,
              l.Get('PARAM_DEFAULT') PARAM_DEFAULT,
              l.Get('OPTIONAL')      OPTIONAL
        FROM TABLE( SAP_API.Call_Tab('RFC_GET_FUNCTION_INTERFACE',
                                        SAP_API.Param( '', 
                                            'FUNCNAME', rfc_name_
                                            ),
                                        SAP_API.Param('PARAMS'),
                                        path_ => 'RFC_GET_FUNCTION_INTERFACE/PARAMS'
                                    )) l;
                                    
      CURSOR get_help_desc_ IS
      SELECT l.Get('FUNCNAME')   FUNCNAME,
             l.Get('PARAMCLASS') PARAMCLASS,
             l.Get('PARAMETER')  PARAMETER,
             l.Get('TDFORMAT')   TDFORMAT,
             l.Get('TDLINE')     TDLINE
             FROM TABLE( SAP_API.Call_Tab('RFC_FUNCTION_DOCU_GET',
                                          SAP_API.Param( '', 
                                                        'FUNCNAME', rfc_name_
                                                       ),
                                          SAP_API.Param('FUNCDOCU'),
                                          path_ => 'RFC_FUNCTION_DOCU_GET/FUNCDOCU'
                                         )) l;
                                         
      CURSOR get_param_desc_( tab_name_ IN VARCHAR2 ) IS
      SELECT l.Get('FIELDNAME')   FIELDNAME,
             l.Get('DATATYPE')    DATATYPE,
             l.Get('INTLEN')      INTLEN,
             l.Get('FIELDTEXT')   FIELDTEXT,
             nvl(l.Get('CHECKTABLE'),l.Get('REFTABLE'))  REFTABLE
             FROM TABLE( SAP_API.Call_Tab('DDIF_FIELDINFO_GET',
                                          SAP_API.Param( '', 
                                                        'TABNAME', tab_name_
                                                       ),
                                          SAP_API.Param('DFIES_TAB'),
                                          path_ => 'DDIF_FIELDINFO_GET/DFIES_TAB'
                                         )) l;
      
                                          
      TYPE table_desc_tab IS  TABLE OF get_table_desc_%ROWTYPE INDEX BY PLS_INTEGER;
      table_desc_tab_         table_desc_tab;
      TYPE table_help_tab IS  TABLE OF get_help_desc_%ROWTYPE INDEX BY PLS_INTEGER;
      table_help_tab_         table_help_tab;
      TYPE table_param_tab IS  TABLE OF get_param_desc_%ROWTYPE INDEX BY PLS_INTEGER;
      table_param_tab_         table_param_tab;
      help_tab_                Text_Tab;

      FUNCTION Get_Table_Desc( tab_name_ IN VARCHAR2, param_name_ IN VARCHAR2 ) RETURN VARCHAR2 IS
      BEGIN
          IF tab_name_ IS NULL THEN
             RETURN NULL;
          ELSE
             OPEN  get_param_desc_( tab_name_ );
             FETCH get_param_desc_ BULK COLLECT INTO table_param_tab_;
             CLOSE get_param_desc_;
          END IF;
          FOR i IN 1..table_desc_tab_.count LOOP
              IF (table_desc_tab_(i).TABNAME = tab_name_) OR 
                 (table_desc_tab_(i).PARAMETER = param_name_) THEN
                  RETURN table_desc_tab_(i).PARAMTEXT;
              END IF;
          END LOOP;
          RETURN NULL;
          EXCEPTION WHEN OTHERS THEN 
              RETURN NULL;
      END;

      FUNCTION Get_Param_Desc( param_name_ IN VARCHAR2 ) RETURN VARCHAR2 IS
      BEGIN
          FOR i IN 1..table_param_tab_.count LOOP
              IF table_param_tab_(i).FIELDNAME = param_name_ THEN
                  RETURN table_param_tab_(i).FIELDTEXT;
              END IF;
          END LOOP;
          RETURN NULL;
      END;

      FUNCTION Get_Param_Desc_Ref( param_name_ IN VARCHAR2, ref_table_ OUT VARCHAR2 ) RETURN VARCHAR2 IS
      BEGIN
          FOR i IN 1..table_param_tab_.count LOOP
              IF table_param_tab_(i).FIELDNAME = param_name_ THEN
                  ref_table_ := table_param_tab_(i).REFTABLE;
                  RETURN table_param_tab_(i).FIELDTEXT;
              END IF;
          END LOOP;
          RETURN NULL;
      END;

      FUNCTION Get_Help_Desc( tab_name_ IN VARCHAR2, param_name_ IN VARCHAR2 ) RETURN TEXT_TAB IS
          text_   TEXT_TAB;
      BEGIN
          text_ := Text_Tab();
          text_.Extend( 1 );
          IF tab_name_ IS NULL AND param_name_ IS NULL THEN
              FOR i IN 1..table_help_tab_.count LOOP
                  IF (table_help_tab_(i).PARAMCLASS IS NULL ) AND 
                     (table_help_tab_(i).PARAMETER  IS NULL ) THEN
                     IF length( text_(text_.count) ) + length(table_help_tab_(i).TDLINE) >= 3950 THEN
                         text_.Extend( 1 );
                     END IF;
                     IF text_(text_.count) IS NULL THEN
                         text_(text_.count) := table_help_tab_(i).TDLINE;
                     ELSE
                         text_(text_.count) := text_(text_.count) || chr(13) || chr(10) || table_help_tab_(i).TDLINE;
                     END IF;
                  END IF;
              END LOOP;
          ELSE
              FOR i IN 1..table_help_tab_.count LOOP
                  IF (table_help_tab_(i).PARAMETER = tab_name_) OR 
                     (table_help_tab_(i).PARAMETER = param_name_) THEN
                     IF length( text_(text_.count) ) + length(table_help_tab_(i).TDLINE) >= 4000 THEN
                         text_.Extend( 1 );
                     END IF;
                     IF text_(text_.count) IS NULL THEN
                         text_(text_.count) := table_help_tab_(i).TDLINE;
                     ELSE
                         text_(text_.count) := text_(text_.count) || chr(13) || chr(10) || table_help_tab_(i).TDLINE;
                     END IF;
                  END IF;
              END LOOP;
          END IF;
          RETURN text_;
      END;
      
      FUNCTION Get_RFC_Desc( fuFND_name_ IN VARCHAR2 ) RETURN VARCHAR2 IS
          desc_    VARCHAR2(200);
          CURSOR get_desc_ IS
          SELECT  n.Get( 'STEXT' )    DESCRIPTION
          FROM TABLE( SAP_API.Call_Tab('RFC_FUNCTION_SEARCH',
                                        SAP_API.Param('', 
                                              'FUNCNAME',      fuFND_name_   
                                              ),
                                        SAP_API.Param('FUNCTIONS'),
                                        path_ => 'RFC_FUNCTION_SEARCH/FUNCTIONS'
                                   )) n;
      BEGIN
          OPEN get_desc_;
          FETCH get_desc_ INTO desc_;
          CLOSE get_desc_;
          RETURN desc_;
      END;
      
      PROCEDURE Add( tab_name_ IN VARCHAR2, name_ IN VARCHAR2, param_type_ IN VARCHAR2, 
                     data_type_ IN VARCHAR2, data_length_ IN VARCHAR2, optional_ IN VARCHAR2, 
                     description_ IN VARCHAR2, help_ IN VARCHAR2 DEFAULT NULL ) IS
          rec_              RFC_DESC_REC;
          tmp_description_  VARCHAR2(100);
      BEGIN
          rec_.name        := name_;
          rec_.param_type  := param_type_;
          rec_.data_type   := data_type_;
          rec_.data_length := data_length_;
          rec_.optional    := optional_;
          rec_.description := nvl( description_, tmp_description_);
          rec_.help        := help_;
          rac_tab_.Extend( 1 );
          rac_tab_(rac_tab_.Count) := rec_;
      END;
      
      PROCEDURE Print_Complex_Type( complex_type_name_ IN VARCHAR2 ) IS
          found_  BOOLEAN;

          name_           VARCHAR2(200);
          complex_type_   VARCHAR2(200);
          simple_type_    VARCHAR2(200);
          min_occurs_     NUMBER;
          max_occurs_     NUMBER;
          data_length_    VARCHAR2(50);
          record_type_    VARCHAR2(50);
          type_           VARCHAR2(50);
          param_name_     VARCHAR2(200);
          ref_table_      VARCHAR2(50);
      BEGIN
          found_ := FALSE; 
          FOR r_ IN (SELECT * FROM TABLE(struct_tab_) WHERE str_1 LIKE '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE%' ) LOOP
              IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE_ATTR/NAME' THEN
                  found_ := (r_.str_2 = complex_type_name_);
              END IF;
              IF found_ THEN
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/NAME' THEN
                      IF name_ IS NOT NULL THEN
                          param_name_ := Get_Param_Desc_Ref( name_, ref_table_ );
                          Add( complex_type_name_,'              '||name_, ref_table_, type_, data_length_, CASE WHEN min_occurs_ <> 0 THEN 'N' ELSE 'Y' END ,
                                param_name_ );
                          IF complex_type_ IS NOT NULL THEN
                             Print_Complex_Type( complex_type_ );
                          END IF;
                      END IF;
                      name_           := r_.str_2;
                      complex_type_   := NULL;
                      simple_type_    := NULL;
                      min_occurs_     := 1;
                      max_occurs_     := NULL;
                      data_length_    := NULL;
                      record_type_    := NULL;
                      type_           := NULL;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/MINOCCURS' THEN
                      IF r_.str_2 = 'unbounded' THEN
                          min_occurs_     := NULL;
                      ELSE
                          min_occurs_     := r_.str_2;
                      END IF;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/MAXOCCURS' THEN
                      IF r_.str_2 = 'unbounded' THEN
                          max_occurs_     := NULL;
                      ELSE
                          max_occurs_     := r_.str_2;
                      END IF;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT/XSD:SIMPLETYPE/XSD:RESTRICTION/XSD:MAXLENGTH_ATTR/VALUE' THEN
                      data_length_ := r_.str_2;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT/XSD:SIMPLETYPE/XSD:RESTRICTION/XSD:TOTALDIGITS_ATTR/VALUE' THEN
                      data_length_ := r_.str_2;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT/XSD:SIMPLETYPE/XSD:RESTRICTION/XSD:FRACTIONDIGITS_ATTR/VALUE' THEN
                      data_length_ := data_length_||'.'||r_.str_2;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT/XSD:SIMPLETYPE/XSD:RESTRICTION_ATTR/BASE' OR
                     r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/TYPE' THEN
                      IF r_.str_2 LIKE '%:%' THEN
                          type_ :=  substr( r_.str_2, instr(r_.str_2,':')+1 );
                      ELSE
                          type_ := r_.str_2;
                      END IF;
                  END IF;
              END IF;
          END LOOP;
          IF name_ IS NOT NULL THEN
              param_name_ := Get_Param_Desc_Ref( name_, ref_table_ );
              Add( complex_type_name_, '              '||name_, ref_table_, type_, data_length_, CASE WHEN min_occurs_ <> 0 THEN 'N' ELSE 'Y' END , 
                   param_name_  );
              IF complex_type_ IS NOT NULL THEN
                  Print_Complex_Type( complex_type_ );
              END IF;
          END IF;
      END;

      PROCEDURE Print_Paramerers( param_ IN VARCHAR2 ) IS
          found_  BOOLEAN;
          
          name_           VARCHAR2(200);
          complex_type_   VARCHAR2(200);
          simple_type_    VARCHAR2(200);
          min_occurs_     NUMBER;
          max_occurs_     NUMBER;
          data_length_    NUMBER;
          record_type_    VARCHAR2(50);
          type_           VARCHAR2(50);
      BEGIN
          found_ := FALSE; 
          FOR r_ IN (SELECT * FROM TABLE(struct_tab_) WHERE str_1 LIKE '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT%' ) LOOP
              IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT_ATTR/NAME' THEN
                  found_ := (r_.str_2 = param_);
              END IF;
              IF found_ THEN
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT_ATTR/NAME' THEN
                      IF name_ IS NOT NULL THEN
                          help_tab_ := Get_Help_Desc( complex_type_, name_ );
                          Add( '', '       '||name_, record_type_, type_, data_length_, CASE WHEN min_occurs_ <> 0 THEN 'N' ELSE 'Y' END , 
                               Get_Table_Desc( complex_type_, name_ ), help_tab_(1) );
                          IF help_tab_.count > 1 THEN
                              FOR i IN 2..help_tab_.count LOOP
                                  Add( '', '', '', '', '', '', '', help_tab_(i) );
                              END LOOP;
                          END IF;
                          IF complex_type_ IS NOT NULL THEN
                             Print_Complex_Type( complex_type_ );
                          END IF;
                      END IF;
                      name_           := r_.str_2;
                      complex_type_   := NULL;
                      simple_type_    := NULL;
                      min_occurs_     := 1;
                      max_occurs_     := NULL;
                      data_length_    := NULL;
                      record_type_    := NULL;
                      type_           := NULL;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/MINOCCURS' OR
                     r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT_ATTR/MINOCCURS' THEN
                      IF r_.str_2 = 'unbounded' THEN
                          min_occurs_     := NULL;
                      ELSE
                          min_occurs_     := r_.str_2;
                      END IF;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/MAXOCCURS' OR
                     r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT_ATTR/MAXOCCURS' THEN
                      IF r_.str_2 = 'unbounded' THEN
                          max_occurs_     := NULL;
                      ELSE
                          max_occurs_     := r_.str_2;
                      END IF;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT/XSD:SIMPLETYPE/XSD:RESTRICTION/XSD:MAXLENGTH_ATTR/VALUE' THEN
                      data_length_ := r_.str_2;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:SEQUENCE/XSD:ELEMENT_ATTR/TYPE' THEN
                      record_type_ := 'TABLE';
                      IF r_.str_2 LIKE '%:%' THEN
                          complex_type_ :=  substr( r_.str_2, instr(r_.str_2,':')+1 );
                      ELSE
                          complex_type_ := r_.str_2;
                      END IF;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT_ATTR/TYPE' THEN
                      record_type_ := 'RECORD';
                      IF r_.str_2 LIKE '%:%' THEN
                          complex_type_ :=  substr( r_.str_2, instr(r_.str_2,':')+1 );
                      ELSE
                          complex_type_ := r_.str_2;
                      END IF;
                  END IF;
                  IF r_.str_1 = '/DEFINITIONS/TYPES/XSD:SCHEMA/XSD:ELEMENT/XSD:COMPLEXTYPE/XSD:ALL/XSD:ELEMENT/XSD:SIMPLETYPE/XSD:RESTRICTION_ATTR/BASE' THEN
                      IF r_.str_2 LIKE '%:%' THEN
                          record_type_ :=  substr( r_.str_2, instr(r_.str_2,':')+1 );
                      ELSE
                          record_type_ := r_.str_2;
                      END IF;
                  END IF;
              END IF;
          END LOOP;
          IF name_ IS NOT NULL THEN
              help_tab_ := Get_Help_Desc( complex_type_, name_ );
              Add( '', '       '||name_, record_type_, type_, data_length_, CASE WHEN min_occurs_ <> 0 THEN 'N' ELSE 'Y' END , 
                   Get_Table_Desc( complex_type_, name_ ), help_tab_(1) );
              IF help_tab_.count > 1 THEN
                  FOR i IN 2..help_tab_.count LOOP
                      Add( '', '', '', '', '', '', '', help_tab_(i) );
                  END LOOP;
              END IF;
              IF complex_type_ IS NOT NULL THEN
                  Print_Complex_Type( complex_type_ );
              END IF;
          END IF;
      END;
     
      FUNCTION Get_Msg_Element( msg_ IN VARCHAR2 ) RETURN VARCHAR2 IS
          found_  BOOLEAN;
      BEGIN
          found_ := FALSE; 
          FOR r_ IN (SELECT * FROM TABLE(struct_tab_) WHERE str_1 LIKE '/DEFINITIONS/MESSAGE%' ) LOOP
              IF r_.str_1 = '/DEFINITIONS/MESSAGE_ATTR/NAME' AND r_.str_2 = msg_ THEN
                  found_ := TRUE;
              END IF;
              IF found_ AND r_.str_1 = '/DEFINITIONS/MESSAGE/PART_ATTR/ELEMENT' THEN
                  IF r_.str_2 LIKE '%:%' THEN
                      RETURN substr( r_.str_2, instr(r_.str_2,':')+1 );
                  ELSE
                      RETURN r_.str_2;
                  END IF;
              END IF;
          END LOOP;
          RETURN NULL;
      END;

      PROCEDURE List_Operation IS
          operation_ VARCHAR2(100);
          input_     VARCHAR2(100);
          output_    VARCHAR2(100);
      BEGIN
          FOR r_ IN (SELECT * FROM TABLE(struct_tab_) WHERE str_1 LIKE '/DEFINITIONS/PORTTYPE/OPERATION%' ) LOOP
              IF r_.str_1 = '/DEFINITIONS/PORTTYPE/OPERATION_ATTR/NAME' THEN
                  IF operation_ IS NOT NULL THEN
                      help_tab_ := Get_Help_Desc( '', '' );
                      Add( '', operation_, 'FUNCTION', '', '', '', Get_RFC_Desc(operation_), help_tab_(1) );
                      IF help_tab_.count > 1 THEN
                          FOR i IN 2..help_tab_.count LOOP
                              Add( '', '', '', '', '', '', '', help_tab_(i) );
                          END LOOP;
                      END IF;
                      Add( '', '  INPUT  : '||input_,  '-- INPUT --', '-- INPUT --', '-- INPUT --', '-- INPUT --', '-- INPUT --' );
                      Print_Paramerers( input_ );
                      Add( '', '  OUTPUT : '||output_, '-- OUTPUT --', '-- OUTPUT --', '-- OUTPUT --', '-- OUTPUT --', '-- OUTPUT --' );
                      Print_Paramerers( output_ );
                  END IF;
                  operation_ := r_.str_2;
                  input_ := '';
                  output_ := '';
              END IF;
              IF r_.str_1 LIKE '/DEFINITIONS/PORTTYPE/OPERATION/INPUT_ATTR/MESSAGE' THEN
                  IF r_.str_2 LIKE '%:%' THEN
                      input_ := substr( r_.str_2, instr(r_.str_2,':')+1 );
                  ELSE
                      input_ := r_.str_2;
                  END IF;
                  input_ := Get_Msg_Element( input_ );
              END IF;
              IF r_.str_1 LIKE '/DEFINITIONS/PORTTYPE/OPERATION/OUTPUT_ATTR/MESSAGE' THEN
                  IF r_.str_2 LIKE '%:%' THEN
                      output_ := substr( r_.str_2, instr(r_.str_2,':')+1 );
                  ELSE
                      output_ := r_.str_2;
                  END IF;
                  output_ := Get_Msg_Element( output_ );
              END IF;
          END LOOP;
          IF operation_ IS NOT NULL THEN
               help_tab_ := Get_Help_Desc( '', '' );
               Add( '', operation_, 'FUNCTION', '', '', '', Get_RFC_Desc(operation_), help_tab_(1) );
               IF help_tab_.count > 1 THEN
                   FOR i IN 2..help_tab_.count LOOP
                       Add( '', '', '', '', '', '', '', help_tab_(i) );
                   END LOOP;
               END IF;
               Add( '', '  INPUT  : '||input_, '-- INPUT --', '-- INPUT --', '-- INPUT --', '-- INPUT --', '-- INPUT --' );
               Print_Paramerers( input_ );
               Add( '', '  OUTPUT : '||output_, '-- OUTPUT --', '-- OUTPUT --', '-- OUTPUT --', '-- OUTPUT --', '-- OUTPUT --' );
               Print_Paramerers( output_ );
           END IF;
      END;     
  BEGIN
      -- SELECT * FROM TABLE( Sap_API.Quick_Query('FUPARAREF', 'FUNCNAME, PARAMTYPE, PARAMETER ', ' FUNCNAME = ''BAPI_PROJECT_GETINFO'' ', max_rows_ => 100) );

      OPEN  get_table_desc_;
      FETCH get_table_desc_ BULK COLLECT INTO table_desc_tab_;
      CLOSE get_table_desc_;
      OPEN  get_help_desc_;
      FETCH get_help_desc_ BULK COLLECT INTO table_help_tab_;
      CLOSE get_help_desc_;
      Get_Wsdl( rfc_name_, wsdl_);
      rac_tab_ := RFC_DESC_TAB();
      obj_ := Attr_Obj();
      obj_.From_XML(wsdl_, with_attr_ => TRUE );
      struct_tab_ := obj_.Get_Values(print_full_path_ => 'Y' );
      List_Operation();
      /*
      FOR r_ IN (SELECT * FROM TABLE(struct_tab_) ) LOOP
          Add( r_.str_1, '', '', '', '', r_.str_2 );
      END LOOP;
      */
      FOR i IN 1..rac_tab_.count LOOP
          PIPE ROW( rac_tab_(i) );
      END LOOP;
      RETURN;
  END;

  FUNCTION Record_Exists( rfc_name_ IN VARCHAR2,                          
                          param_table_  IN VARCHAR2,
                          query_ IN VARCHAR2,
                          record_table_ IN VARCHAR2 ) RETURN VARCHAR2 IS -- TRUE/FALSE
      tmp_   NUMBER;
      CURSOR get_ IS 
      SELECT 1 tmp
      FROM TABLE( SAP_API.Call_Tab(rfc_name_,
                                    SAP_API.Param_Query(param_table_, query_ => query_ ),
                                    SAP_API.Param(record_table_),
                                    path_ => rfc_name_||'/'||record_table_
                               )) li;
  BEGIN
      OPEN get_;
      FETCH get_ INTO tmp_;
      CLOSE get_;
      IF tmp_ IS NULL THEN
          RETURN 'FALSE';
      ELSE
          RETURN 'TRUE';
      END IF;
  END;


  FUNCTION  First_Empty_Param( param_ IN OUT NOCOPY Attr_Obj ) RETURN PLS_INTEGER IS
      num_  PLS_INTEGER;
  BEGIN 
      num_ := 1;
      WHILE param_.Idx('P'||num_) IS NOT NULL LOOP
          num_ := num_ + 1;
      END LOOP;
      RETURN num_;
  END;

  FUNCTION Exist_Any_Param( param_ IN OUT NOCOPY Attr_Obj ) RETURN BOOLEAN IS
  BEGIN
      RETURN param_.Idx('P1') IS NOT NULL;
  END;
  
  PROCEDURE Add_Param( param_ IN OUT NOCOPY Attr_Obj, 
                       param_name01_ IN VARCHAR2  DEFAULT NULL, param_value01_ IN VARCHAR2 DEFAULT NULL,
                       param_name02_ IN VARCHAR2  DEFAULT NULL, param_value02_ IN VARCHAR2 DEFAULT NULL,
                       param_name03_ IN VARCHAR2  DEFAULT NULL, param_value03_ IN VARCHAR2 DEFAULT NULL,
                       param_name04_ IN VARCHAR2  DEFAULT NULL, param_value04_ IN VARCHAR2 DEFAULT NULL,
                       param_name05_ IN VARCHAR2  DEFAULT NULL, param_value05_ IN VARCHAR2 DEFAULT NULL,
                       param_name06_ IN VARCHAR2  DEFAULT NULL, param_value06_ IN VARCHAR2 DEFAULT NULL,
                       param_name07_ IN VARCHAR2  DEFAULT NULL, param_value07_ IN VARCHAR2 DEFAULT NULL,
                       param_name08_ IN VARCHAR2  DEFAULT NULL, param_value08_ IN VARCHAR2 DEFAULT NULL,
                       param_name09_ IN VARCHAR2  DEFAULT NULL, param_value09_ IN VARCHAR2 DEFAULT NULL,
                       param_name10_ IN VARCHAR2  DEFAULT NULL, param_value10_ IN VARCHAR2 DEFAULT NULL,
                       param_name11_ IN VARCHAR2  DEFAULT NULL, param_value11_ IN VARCHAR2 DEFAULT NULL,
                       param_name12_ IN VARCHAR2  DEFAULT NULL, param_value12_ IN VARCHAR2 DEFAULT NULL,
                       param_name13_ IN VARCHAR2  DEFAULT NULL, param_value13_ IN VARCHAR2 DEFAULT NULL,
                       param_name14_ IN VARCHAR2  DEFAULT NULL, param_value14_ IN VARCHAR2 DEFAULT NULL,
                       param_name15_ IN VARCHAR2  DEFAULT NULL, param_value15_ IN VARCHAR2 DEFAULT NULL,
                       param_name16_ IN VARCHAR2  DEFAULT NULL, param_value16_ IN VARCHAR2 DEFAULT NULL,
                       param_name17_ IN VARCHAR2  DEFAULT NULL, param_value17_ IN VARCHAR2 DEFAULT NULL,
                       param_name18_ IN VARCHAR2  DEFAULT NULL, param_value18_ IN VARCHAR2 DEFAULT NULL,
                       param_name19_ IN VARCHAR2  DEFAULT NULL, param_value19_ IN VARCHAR2 DEFAULT NULL,
                       param_name20_ IN VARCHAR2  DEFAULT NULL, param_value20_ IN VARCHAR2 DEFAULT NULL
                       ) IS
      num_ PLS_INTEGER;
  BEGIN 
      num_ := First_Empty_Param( param_ );
      IF param_name01_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name01_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value01_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name02_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name02_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value02_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name03_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name03_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value03_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name04_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name04_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value04_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name05_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name05_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value05_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name06_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name06_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value06_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name07_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name07_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value07_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name08_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name08_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value08_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name09_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name09_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value09_ ) );
          num_ := num_ + 1;
      END IF;
      --
      IF param_name10_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name10_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value10_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name11_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name11_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value11_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name12_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name12_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value12_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name13_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name13_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value13_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name14_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name14_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value14_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name15_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name15_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value15_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name16_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name16_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value16_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name17_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name17_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value17_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name18_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name18_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value18_ ) );
          num_ := num_ + 1;
      END IF;
      IF param_name19_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name19_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value19_ ) );
          num_ := num_ + 1;
      END IF;
      --
      IF param_name20_ IS NOT NULL THEN
          param_.Set_( 'P'||num_, upper(trim(param_name20_)) );
          param_.Set_( 'V'||num_, Change_Property( param_value20_ ) );
          --num_ := num_ + 1;
      END IF;
      
  END;

  PROCEDURE Add_Param_Not_Null( param_ IN OUT NOCOPY Attr_Obj, 
                       param_name_ IN VARCHAR2, param_value_ IN VARCHAR2) IS
  BEGIN 
      IF param_name_ IS NOT NULL AND param_value_ IS NOT NULL THEN
          Add_Param( param_, param_name_, param_value_ );
      END IF;
  END;

  PROCEDURE Add_Param_Diff( param_ IN OUT NOCOPY Attr_Obj, param_x_ IN OUT NOCOPY Attr_Obj, 
                       param_name_ IN VARCHAR2, old_param_value_ IN VARCHAR2, new_param_value_ IN VARCHAR2) IS
      diff_  BOOLEAN;
  BEGIN
      diff_ := FALSE;
      IF old_param_value_ IS NULL AND new_param_value_ IS NOT NULL THEN
          diff_ := TRUE;
      ELSIF old_param_value_ IS NOT NULL AND new_param_value_ IS NULL THEN
          diff_ := TRUE;
      ELSIF old_param_value_ <> new_param_value_ THEN
          diff_ := TRUE;
      END IF;
      IF diff_ THEN
          Add_Param( param_,   param_name_, new_param_value_ );
          IF param_x_ IS NOT NULL THEN
              Add_Param( param_x_, param_name_, 'X' );
          END IF;
      END IF;
  END;

  PROCEDURE Add_Param_Update( param_ IN OUT NOCOPY Attr_Obj, param_x_ IN OUT NOCOPY Attr_Obj, 
                       param_name_ IN VARCHAR2, param_value_ IN VARCHAR2) IS
  BEGIN
      Add_Param( param_,   param_name_, param_value_ );
      IF param_x_ IS NOT NULL THEN
          Add_Param( param_x_, param_name_, 'X' );
      END IF;
  END;


  FUNCTION Param_Query( name_ IN VARCHAR2, query_ IN VARCHAR2 DEFAULT NULL ) RETURN Attr_Obj IS
      attr_       Attr_Obj;
      from_       NUMBER;
      to_         NUMBER;
      pos_        NUMBER;
      value_      VARCHAR2(500);
      from_value_ VARCHAR2(500);
      to_value_   VARCHAR2(500);
      parm_list_  VARCHAR2(32000);
      sign_       VARCHAR2(10);
  BEGIN
       attr_ := Attr_Obj();
       attr_.Set_( 'TAB_NAME',  name_ );
       IF (query_ IS NULL) THEN
          RETURN attr_;
       ELSE
          parm_list_ := query_ || ';';
       END IF;
       from_ := 1;
       to_ := instr(parm_list_, ';', from_);
       WHILE (to_ > 0) LOOP
          value_ := ltrim(rtrim(substr(parm_list_, from_, to_ - from_)));
          pos_ := instr(value_, '..');
          value_ := replace(value_,',','.');
          IF (pos_ > 0) THEN
    -- Handle between values
             from_value_ := substr(value_, 1, pos_ - 1);
             to_value_ := substr(value_, pos_ + 2);
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'BT',
                               'LOW',    from_value_,
                               'HIGH',   to_value_ );
    -- Handle wildcards
          ELSIF (instr(value_, '*') > 0 OR instr(value_, '+') > 0 OR instr(value_, '%') > 0 OR instr(value_, '_') > 0 ) THEN
             IF (substr(value_, 1, 2) = '!=') THEN
                 sign_ := 'E';
                 value_ := substr(value_,3);
             ELSE
                 sign_ := 'I';
             END IF;
             Add_Param( attr_, '_',      '',
                               'SIGN',   sign_,
                               'OPTION', 'CP',
                               'LOW',    replace(replace(replace(value_,'%','*'),'_','+'),'-','*'));
          ELSIF (substr(value_, 1, 2) = '<=') THEN
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'LE',
                               'LOW',    substr(value_,3) );
          ELSIF (substr(value_, 1, 2) = '>=') THEN
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'GE',
                               'LOW',    substr(value_,3) );
          ELSIF (substr(value_, 1, 2) = '!=') THEN
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'NE',
                               'LOW',    substr(value_,3) );
          ELSIF (substr(value_, 1, 1) = '<') THEN
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'LT',
                               'LOW',    substr(value_,2) );
          ELSIF (substr(value_, 1, 1) = '>') THEN
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'GT',
                               'LOW',    substr(value_,2) );
          ELSE
             Add_Param( attr_, '_',      '',
                               'SIGN',   'I',
                               'OPTION', 'EQ',
                               'LOW',    value_ );
          END IF;
          from_ := to_ + 1;
          to_ := instr(parm_list_, ';', from_);
       END LOOP;
      RETURN attr_;
  END;

  FUNCTION Param( name_ IN VARCHAR2,
          p01_ IN VARCHAR2 DEFAULT NULL, v01_ IN VARCHAR2 DEFAULT NULL,
          p02_ IN VARCHAR2 DEFAULT NULL, v02_ IN VARCHAR2 DEFAULT NULL,
          p03_ IN VARCHAR2 DEFAULT NULL, v03_ IN VARCHAR2 DEFAULT NULL,
          p04_ IN VARCHAR2 DEFAULT NULL, v04_ IN VARCHAR2 DEFAULT NULL,
          p05_ IN VARCHAR2 DEFAULT NULL, v05_ IN VARCHAR2 DEFAULT NULL,
          p06_ IN VARCHAR2 DEFAULT NULL, v06_ IN VARCHAR2 DEFAULT NULL,
          p07_ IN VARCHAR2 DEFAULT NULL, v07_ IN VARCHAR2 DEFAULT NULL,
          p08_ IN VARCHAR2 DEFAULT NULL, v08_ IN VARCHAR2 DEFAULT NULL,
          p09_ IN VARCHAR2 DEFAULT NULL, v09_ IN VARCHAR2 DEFAULT NULL,
          p10_ IN VARCHAR2 DEFAULT NULL, v10_ IN VARCHAR2 DEFAULT NULL,
          p11_ IN VARCHAR2 DEFAULT NULL, v11_ IN VARCHAR2 DEFAULT NULL,
          p12_ IN VARCHAR2 DEFAULT NULL, v12_ IN VARCHAR2 DEFAULT NULL,
          p13_ IN VARCHAR2 DEFAULT NULL, v13_ IN VARCHAR2 DEFAULT NULL,
          p14_ IN VARCHAR2 DEFAULT NULL, v14_ IN VARCHAR2 DEFAULT NULL,
          p15_ IN VARCHAR2 DEFAULT NULL, v15_ IN VARCHAR2 DEFAULT NULL,
          p16_ IN VARCHAR2 DEFAULT NULL, v16_ IN VARCHAR2 DEFAULT NULL,
          p17_ IN VARCHAR2 DEFAULT NULL, v17_ IN VARCHAR2 DEFAULT NULL,
          p18_ IN VARCHAR2 DEFAULT NULL, v18_ IN VARCHAR2 DEFAULT NULL,
          p19_ IN VARCHAR2 DEFAULT NULL, v19_ IN VARCHAR2 DEFAULT NULL,
          p20_ IN VARCHAR2 DEFAULT NULL, v20_ IN VARCHAR2 DEFAULT NULL
           ) RETURN Attr_Obj IS
      attr_       Attr_Obj;
  BEGIN
      attr_ := Attr_Obj();
      attr_.Set_( 'TAB_NAME',  name_ );
      IF p01_ != '_' AND
         (p02_ = '_' OR p03_ = '_' OR p04_ = '_' OR p05_ = '_' OR p06_ = '_' OR p07_ = '_' OR p08_ = '_' OR p09_ = '_' OR
          p10_ = '_' OR p11_ = '_' OR p12_ = '_' OR p13_ = '_' OR p14_ = '_' OR p15_ = '_' OR p16_ = '_' OR p17_ = '_' OR p18_ = '_' OR p19_ = '_' OR 
          p20_ = '_' )
      THEN
          Add_Param( attr_, '_', '' );
      END IF;
      Add_Param( attr_, p01_, v01_,
                        p02_, v02_,
                        p03_, v03_,
                        p04_, v04_,
                        p05_, v05_,
                        p06_, v06_,
                        p07_, v07_,
                        p08_, v08_,
                        p09_, v09_,
                        p10_, v10_,
                        p11_, v11_,
                        p12_, v12_,
                        p13_, v13_,
                        p14_, v14_,
                        p15_, v15_,
                        p16_, v16_,
                        p17_, v17_,
                        p18_, v18_,
                        p19_, v19_,
                        p20_, v20_ );
      RETURN attr_;
  END;

  FUNCTION Call_Tab( 
                 rfc_name_   IN VARCHAR2,
                 param1_     IN Attr_Obj DEFAULT NULL,
                 param2_     IN Attr_Obj DEFAULT NULL,
                 param3_     IN Attr_Obj DEFAULT NULL,
                 param4_     IN Attr_Obj DEFAULT NULL,
                 param5_     IN Attr_Obj DEFAULT NULL,
                 param6_     IN Attr_Obj DEFAULT NULL,
                 param7_     IN Attr_Obj DEFAULT NULL,
                 param8_     IN Attr_Obj DEFAULT NULL,
                 param9_     IN Attr_Obj DEFAULT NULL,
                 path_       IN VARCHAR2 DEFAULT NULL,
                 cache_time_ IN NUMBER DEFAULT 0,
                 sub_query1_ IN AttrS_Obj DEFAULT NULL,
                 sub_query2_ IN AttrS_Obj DEFAULT NULL,
                 sub_query3_ IN AttrS_Obj DEFAULT NULL,
                 sub_query4_ IN AttrS_Obj DEFAULT NULL,
                 sub_query5_ IN AttrS_Obj DEFAULT NULL
                                                                 ) RETURN AttrS_Tab PIPELINED IS
      tab_                Attr_Tab;
      attr_obj_           AttrS_Obj;
      query_rec_          Query_Rec;
      obj_                Xml_Obj;

      sub_query_          SUB_QUERY_TAB;
      queue_              QUERY_QUEUE_TAB; 
      queue_length_       NUMBER;
      queue_count_        PLS_INTEGER;
      first_              BOOLEAN;

  BEGIN 
      tab_ := Attr_Tab();
      Add_Rfc( tab_, rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_ );
      obj_ := Exec_Obj( tab_, cache_time_ => cache_time_ );
      first_ := TRUE;
      FOR r_ IN ( SELECT t.This() obj FROM table( obj_.AttrS_Table( path_ )) t ) LOOP
          IF sub_query1_ IS NULL THEN
              PIPE ROW (r_.obj);
          ELSE
              IF first_ THEN
                  first_ := FALSE;

                  query_rec_.table_names_ := Name_Tab();
                  query_rec_.table_to_query_idx_ := Idx_Tab();
                  query_rec_.table_to_return_idx_ := Idx_Tab();
                  query_rec_.query_names_ := Name_Tab();
                  query_rec_.query_names_idx_ := Idx_Tab();
                  
                  query_rec_.table_names_.Extend(r_.obj.count_);
                  query_rec_.query_names_.Extend(r_.obj.count_);
                  query_rec_.query_names_idx_.Extend(r_.obj.count_);
                  FOR i IN 1..r_.obj.count_ LOOP
                      query_rec_.table_names_(i) := r_.obj.names_(i);
                      query_rec_.query_names_(i) := r_.obj.names_(i);
                      query_rec_.query_names_idx_(i) := i;
                      query_rec_.table_to_query_idx_( i ) := i;
                  END LOOP;

                  sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query1_ );
                  IF sub_query2_ IS NOT NULL THEN
                      sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query2_ );
                  END IF;
                  IF sub_query3_ IS NOT NULL THEN
                      sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query3_ );
                  END IF;
                  IF sub_query4_ IS NOT NULL THEN
                      sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query4_ );
                  END IF;
                  IF sub_query5_ IS NOT NULL THEN
                      sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query5_ );
                  END IF;
  
                  queue_length_   := def_queue_length_;
                  queue_count_    := 0;
                  
                  Finish_Names(query_rec_, sub_query_);
  
                  attr_obj_ := AttrS_Obj();
                  attr_obj_.count_  := query_rec_.return_names_count_;
                  attr_obj_.names_  := query_rec_.return_names_;
                  attr_obj_.values_ := string_tab();
                  attr_obj_.values_.Extend( query_rec_.return_names_count_ );
              END IF;
              
              queue_count_ := queue_count_ + 1;
              queue_(queue_count_) := attr_obj_.values_;
              IF queue_count_ >= queue_length_ THEN
                  FOR i IN 1..sub_query_.count LOOP
                     Calc_Sub_Query_Value_( query_rec_, queue_, queue_count_, sub_query_(i) );
                  END LOOP;
                  FOR i IN 1..queue_count_ LOOP
                      IF queue_(i)( query_rec_.del_idx_ ) = 'Y' THEN
                          NULL;
                      ELSE
                          attr_obj_.values_ := queue_(i);
                          PIPE ROW (attr_obj_);
                      END IF;
                  END LOOP;
                  queue_count_ := 0;
              END IF;
          END IF;
      END LOOP;
      IF sub_query1_ IS NOT NULL THEN
          FOR i IN 1..sub_query_.count LOOP
             Calc_Sub_Query_Value_( query_rec_, queue_, queue_count_, sub_query_(i) );
          END LOOP;
          FOR i IN 1..queue_count_ LOOP
              IF queue_(i)( query_rec_.del_idx_ ) = 'Y' THEN
                  NULL;
              ELSE
                  attr_obj_.values_ := queue_(i);
                  PIPE ROW (attr_obj_);
              END IF;
          END LOOP;
          queue_count_ := 0;
      END IF;
      RETURN;
  END;


      PROCEDURE Set_Quick_Rec( rec_ IN OUT NOCOPY QUICK_QUERY_REC, num_ IN NUMBER, val_ IN VARCHAR2 ) IS
      BEGIN
          IF num_ = 1 THEN rec_.s01 := val_; ELSIF num_ = 2 THEN rec_.s02 := val_; ELSIF num_ = 3 THEN rec_.s03 := val_; 
          ELSIF num_ = 4 THEN rec_.s04 := val_; ELSIF num_ = 5 THEN rec_.s05 := val_; ELSIF num_ = 6 THEN rec_.s06 := val_; 
          ELSIF num_ = 7 THEN rec_.s07 := val_; ELSIF num_ = 8 THEN rec_.s08 := val_; ELSIF num_ = 9 THEN rec_.s09 := val_; 
          
          ELSIF num_ = 10 THEN rec_.s10 := val_; ELSIF num_ = 11 THEN rec_.s11 := val_; ELSIF num_ = 12 THEN rec_.s12 := val_; 
          ELSIF num_ = 13 THEN rec_.s13 := val_; ELSIF num_ = 14 THEN rec_.s14 := val_; ELSIF num_ = 15 THEN rec_.s15 := val_; 
          ELSIF num_ = 16 THEN rec_.s16 := val_; ELSIF num_ = 17 THEN rec_.s17 := val_; ELSIF num_ = 18 THEN rec_.s18 := val_; 
          ELSIF num_ = 19 THEN rec_.s19 := val_; 
          
          ELSIF num_ = 20 THEN rec_.s20 := val_; ELSIF num_ = 21 THEN rec_.s21 := val_; ELSIF num_ = 22 THEN rec_.s22 := val_; 
          ELSIF num_ = 23 THEN rec_.s23 := val_; ELSIF num_ = 24 THEN rec_.s24 := val_; ELSIF num_ = 25 THEN rec_.s25 := val_; 
          ELSIF num_ = 26 THEN rec_.s26 := val_; ELSIF num_ = 27 THEN rec_.s27 := val_; ELSIF num_ = 28 THEN rec_.s28 := val_; 
          ELSIF num_ = 29 THEN rec_.s29 := val_; 
          
          ELSIF num_ = 30 THEN rec_.s30 := val_; ELSIF num_ = 31 THEN rec_.s31 := val_; ELSIF num_ = 32 THEN rec_.s32 := val_; 
          ELSIF num_ = 33 THEN rec_.s33 := val_; ELSIF num_ = 34 THEN rec_.s34 := val_; ELSIF num_ = 35 THEN rec_.s35 := val_; 
          ELSIF num_ = 36 THEN rec_.s36 := val_; ELSIF num_ = 37 THEN rec_.s37 := val_; ELSIF num_ = 38 THEN rec_.s38 := val_; 
          ELSIF num_ = 39 THEN rec_.s39 := val_; 
          
          ELSIF num_ = 40 THEN rec_.s40 := val_; ELSIF num_ = 41 THEN rec_.s41 := val_; ELSIF num_ = 42 THEN rec_.s42 := val_; 
          ELSIF num_ = 43 THEN rec_.s43 := val_; ELSIF num_ = 44 THEN rec_.s44 := val_; ELSIF num_ = 45 THEN rec_.s45 := val_; 
          ELSIF num_ = 46 THEN rec_.s46 := val_; ELSIF num_ = 47 THEN rec_.s47 := val_; ELSIF num_ = 48 THEN rec_.s48 := val_; 
          ELSIF num_ = 49 THEN rec_.s49 := val_; 
          
          ELSIF num_ = 50 THEN rec_.s50 := val_; ELSIF num_ = 51 THEN rec_.s51 := val_; ELSIF num_ = 52 THEN rec_.s52 := val_; 
          ELSIF num_ = 53 THEN rec_.s53 := val_; ELSIF num_ = 54 THEN rec_.s54 := val_; ELSIF num_ = 55 THEN rec_.s55 := val_; 
          ELSIF num_ = 56 THEN rec_.s56 := val_; ELSIF num_ = 57 THEN rec_.s57 := val_; ELSIF num_ = 58 THEN rec_.s58 := val_; 
          ELSIF num_ = 59 THEN rec_.s59 := val_; 
          
          ELSIF num_ = 60 THEN rec_.s60 := val_; ELSIF num_ = 61 THEN rec_.s61 := val_; ELSIF num_ = 62 THEN rec_.s62 := val_; 
          ELSIF num_ = 63 THEN rec_.s63 := val_; ELSIF num_ = 64 THEN rec_.s64 := val_; ELSIF num_ = 65 THEN rec_.s65 := val_; 
          ELSIF num_ = 66 THEN rec_.s66 := val_; ELSIF num_ = 67 THEN rec_.s67 := val_; ELSIF num_ = 68 THEN rec_.s68 := val_; 
          ELSIF num_ = 69 THEN rec_.s69 := val_; 
          
          ELSIF num_ = 70 THEN rec_.s70 := val_; ELSIF num_ = 71 THEN rec_.s71 := val_; ELSIF num_ = 72 THEN rec_.s72 := val_; 
          ELSIF num_ = 73 THEN rec_.s73 := val_; ELSIF num_ = 74 THEN rec_.s74 := val_; ELSIF num_ = 75 THEN rec_.s75 := val_; 
          ELSIF num_ = 76 THEN rec_.s76 := val_; ELSIF num_ = 77 THEN rec_.s77 := val_; ELSIF num_ = 78 THEN rec_.s78 := val_; 
          ELSIF num_ = 79 THEN rec_.s79 := val_; 
          
          ELSIF num_ = 80 THEN rec_.s80 := val_; ELSIF num_ = 81 THEN rec_.s81 := val_; ELSIF num_ = 82 THEN rec_.s82 := val_; 
          ELSIF num_ = 83 THEN rec_.s83 := val_; ELSIF num_ = 84 THEN rec_.s84 := val_; ELSIF num_ = 85 THEN rec_.s85 := val_; 
          ELSIF num_ = 86 THEN rec_.s86 := val_; ELSIF num_ = 87 THEN rec_.s87 := val_; ELSIF num_ = 88 THEN rec_.s88 := val_; 
          ELSIF num_ = 89 THEN rec_.s89 := val_; 
          
          ELSIF num_ = 90 THEN rec_.s90 := val_; ELSIF num_ = 91 THEN rec_.s91 := val_; ELSIF num_ = 92 THEN rec_.s92 := val_; 
          ELSIF num_ = 93 THEN rec_.s93 := val_; ELSIF num_ = 94 THEN rec_.s94 := val_; ELSIF num_ = 95 THEN rec_.s95 := val_; 
          ELSIF num_ = 96 THEN rec_.s96 := val_; ELSIF num_ = 97 THEN rec_.s97 := val_; ELSIF num_ = 98 THEN rec_.s98 := val_; 
          ELSIF num_ = 99 THEN rec_.s99 := val_; 
          END IF;
      END;

  FUNCTION Call_Quick_Tab( 
                 rfc_name_   IN VARCHAR2,
                 param1_     IN Attr_Obj DEFAULT NULL,
                 param2_     IN Attr_Obj DEFAULT NULL,
                 param3_     IN Attr_Obj DEFAULT NULL,
                 param4_     IN Attr_Obj DEFAULT NULL,
                 param5_     IN Attr_Obj DEFAULT NULL,
                 param6_     IN Attr_Obj DEFAULT NULL,
                 param7_     IN Attr_Obj DEFAULT NULL,
                 param8_     IN Attr_Obj DEFAULT NULL,
                 param9_     IN Attr_Obj DEFAULT NULL,
                 path_       IN VARCHAR2 DEFAULT NULL,
                 cache_time_ IN NUMBER DEFAULT 0,      -- how long keep query in a cache, in seconds
                 sub_query1_ IN AttrS_Obj DEFAULT NULL,
                 sub_query2_ IN AttrS_Obj DEFAULT NULL,
                 sub_query3_ IN AttrS_Obj DEFAULT NULL,
                 sub_query4_ IN AttrS_Obj DEFAULT NULL,
                 sub_query5_ IN AttrS_Obj DEFAULT NULL
                                                            ) RETURN QUICK_QUERY_TAB PIPELINED IS
      query_rec_           QUICK_QUERY_REC;
      empty_query_rec_     QUICK_QUERY_REC;
      num_                 NUMBER;
      
  BEGIN
      num_ := 0;
      FOR r_ IN (SELECT t.This() obj
                   FROM TABLE(Sap_Api.Call_Tab(
                                 rfc_name_   => rfc_name_,
                                 param1_     => param1_,
                                 param2_     => param2_,
                                 param3_     => param3_,
                                 param4_     => param4_,
                                 param5_     => param5_,
                                 param6_     => param6_,
                                 param7_     => param7_,
                                 param8_     => param8_,
                                 param9_     => param9_,
                                 path_       => path_,
                                 cache_time_ => cache_time_,
                                 sub_query1_ => sub_query1_,
                                 sub_query2_ => sub_query2_,
                                 sub_query3_ => sub_query3_,
                                 sub_query4_ => sub_query4_,
                                 sub_query5_ => sub_query5_
                                    )) t ) LOOP
          num_ := num_ + 1;
          IF num_ = 1 THEN
              query_rec_ := empty_query_rec_;
              FOR i IN 1..least(99, r_.obj.count_)  LOOP
                 Set_Quick_Rec( query_rec_, i, r_.obj.names_( i ) );
              END LOOP;
              PIPE ROW (query_rec_);
              FOR i IN 1..least(99, r_.obj.count_)  LOOP
                 Set_Quick_Rec( query_rec_, i, '------' );
              END LOOP;
              PIPE ROW (query_rec_);
          END IF;
          query_rec_ := empty_query_rec_;
          FOR i IN 1..least(99, r_.obj.count_)  LOOP
              Set_Quick_Rec( query_rec_, i, r_.obj.Get( i ) );
          END LOOP;
          PIPE ROW (query_rec_);
      END LOOP;
      RETURN;
  END;

  FUNCTION Call_Obj( session_id_ IN NUMBER                      ) RETURN xml_obj IS
      clob_      CLOB;  
      xml_       XML_obj;

      CURSOR get_clob IS
      SELECT CLOB_DATA
        FROM FND_SESSION_DATA_CLOB_TAB
       WHERE session_id = session_id_
         AND data_type = 'SAP_OBJ';
      
  BEGIN
      OPEN get_clob;
      FETCH get_clob INTO clob_;
      CLOSE get_clob;
      
      IF clob_ IS NOT NULL THEN
          xml_ := XML_Obj(NULL, '', '', '');
          xml_.From_Clob( clob_ );
          RETURN xml_;
      END IF;
      RETURN NULL;
  END;

  FUNCTION Call_Obj( 
                 rfc_name_ IN VARCHAR2,
                 param1_    IN Attr_Obj DEFAULT NULL,
                 param2_    IN Attr_Obj DEFAULT NULL,
                 param3_    IN Attr_Obj DEFAULT NULL,
                 param4_    IN Attr_Obj DEFAULT NULL,
                 param5_    IN Attr_Obj DEFAULT NULL,
                 param6_    IN Attr_Obj DEFAULT NULL,
                 param7_    IN Attr_Obj DEFAULT NULL,
                 param8_    IN Attr_Obj DEFAULT NULL,
                 param9_    IN Attr_Obj DEFAULT NULL,
                 path_      IN VARCHAR2 DEFAULT NULL,
                 cache_time_ IN NUMBER DEFAULT 0 ) RETURN xml_obj IS
      tab_         attr_tab;
  BEGIN 
      tab_ := attr_tab();
      Add_Rfc( tab_, rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_ );
      RETURN Exec_Obj( tab_, path_, cache_time_ => cache_time_ );
  END;
     
  FUNCTION Call_XML( 
                 rfc_name_ IN VARCHAR2,
                 param1_    IN Attr_Obj DEFAULT NULL,
                 param2_    IN Attr_Obj DEFAULT NULL,
                 param3_    IN Attr_Obj DEFAULT NULL,
                 param4_    IN Attr_Obj DEFAULT NULL,
                 param5_    IN Attr_Obj DEFAULT NULL,
                 param6_    IN Attr_Obj DEFAULT NULL,
                 param7_    IN Attr_Obj DEFAULT NULL,
                 param8_    IN Attr_Obj DEFAULT NULL,
                 param9_    IN Attr_Obj DEFAULT NULL ) RETURN CLOB IS
      tab_         attr_tab;
  BEGIN 
      tab_ := attr_tab();
      Add_Rfc( tab_, rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_ );
      RETURN Exec_XML( tab_ );
  END;

  FUNCTION Call_Values( 
                 rfc_name_ IN VARCHAR2,
                 param1_    IN Attr_Obj DEFAULT NULL,
                 param2_    IN Attr_Obj DEFAULT NULL,
                 param3_    IN Attr_Obj DEFAULT NULL,
                 param4_    IN Attr_Obj DEFAULT NULL,
                 param5_    IN Attr_Obj DEFAULT NULL,
                 param6_    IN Attr_Obj DEFAULT NULL,
                 param7_    IN Attr_Obj DEFAULT NULL,
                 param8_    IN Attr_Obj DEFAULT NULL,
                 param9_    IN Attr_Obj DEFAULT NULL) RETURN two_string_tab PIPELINED IS
      tab_       Attr_Tab;
      obj_       Xml_Obj;
  BEGIN
      tab_ := Attr_Tab();
      Add_Rfc( tab_, rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_ );
      obj_ := Exec_Obj( tab_ );
      --tab_ := NULL;
      FOR r_ IN ( SELECT * FROM table( obj_.Get_Values() ) ) LOOP
          PIPE ROW( two_string_rec( replace( replace(r_.str_1 , 'SOAP-ENV:Envelope/SOAP-ENV:Body/', ''), '/', ' / '), r_.str_2) );
      END LOOP;
      RETURN;
  END;

  FUNCTION Call_Struct( 
                 rfc_name_ IN VARCHAR2,
                 param1_    IN Attr_Obj DEFAULT NULL,
                 param2_    IN Attr_Obj DEFAULT NULL,
                 param3_    IN Attr_Obj DEFAULT NULL,
                 param4_    IN Attr_Obj DEFAULT NULL,
                 param5_    IN Attr_Obj DEFAULT NULL,
                 param6_    IN Attr_Obj DEFAULT NULL,
                 param7_    IN Attr_Obj DEFAULT NULL,
                 param8_    IN Attr_Obj DEFAULT NULL,
                 param9_    IN Attr_Obj DEFAULT NULL) RETURN string_tab PIPELINED IS
      tab_       Attr_Tab;
      obj_       Xml_Obj;
  BEGIN
      tab_ := Attr_Tab();
      Add_Rfc( tab_, rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_ );
      obj_ := Exec_Obj( tab_ );
      --tab_ := NULL;
      FOR r_ IN ( SELECT column_value, rownum FROM table( obj_.Get_Struct()) ) LOOP
          IF r_.rownum > 2 THEN
              PIPE ROW( replace( replace( r_.column_value, 'SOAP-ENV:Envelope/SOAP-ENV:Body/', ''), '/', ' / ') );
          END IF;
      END LOOP;
      RETURN;
  END;


  PROCEDURE Add_Rfc( 
                 rfc_      IN OUT NOCOPY attr_tab,
                 rfc_name_ IN VARCHAR2,
                 param1_    IN Attr_Obj DEFAULT NULL,
                 param2_    IN Attr_Obj DEFAULT NULL,
                 param3_    IN Attr_Obj DEFAULT NULL,
                 param4_    IN Attr_Obj DEFAULT NULL,
                 param5_    IN Attr_Obj DEFAULT NULL,
                 param6_    IN Attr_Obj DEFAULT NULL,
                 param7_    IN Attr_Obj DEFAULT NULL,
                 param8_    IN Attr_Obj DEFAULT NULL,
                 param9_    IN Attr_Obj DEFAULT NULL) IS
      attr_      Attr_Obj;
      tmp_       Attr_Obj;
  BEGIN 
      attr_ := Attr_Obj();
      attr_.Set_( 'RFC_NAME', rfc_name_ );
      IF param1_ IS NOT NULL THEN
          tmp_ := param1_; 
          attr_.Set_( 'PARAM1', tmp_ );
      END IF;
      IF param2_ IS NOT NULL THEN
          tmp_ := param2_; 
          attr_.Set_( 'PARAM2', tmp_ );
      END IF;
      IF param3_ IS NOT NULL THEN
          tmp_ := param3_; 
          attr_.Set_( 'PARAM3', tmp_ );
      END IF;
      IF param4_ IS NOT NULL THEN
          tmp_ := param4_; 
          attr_.Set_( 'PARAM4', tmp_ );
      END IF;
      IF param5_ IS NOT NULL THEN
          tmp_ := param5_; 
          attr_.Set_( 'PARAM5', tmp_ );
      END IF;
      IF param6_ IS NOT NULL THEN
          tmp_ := param6_; 
          attr_.Set_( 'PARAM6', tmp_ );
      END IF;
      IF param7_ IS NOT NULL THEN
          tmp_ := param7_; 
          attr_.Set_( 'PARAM7', tmp_ );
      END IF;
      IF param8_ IS NOT NULL THEN
          tmp_ := param8_; 
          attr_.Set_( 'PARAM8', tmp_ );
      END IF;
      IF param9_ IS NOT NULL THEN
          tmp_ := param9_; 
          attr_.Set_( 'PARAM9', tmp_ );
      END IF;
      rfc_.Extend();
      rfc_( rfc_.count ) := attr_;
  END;

  FUNCTION Response_From_Cache_( rfc_name_ IN VARCHAR2, hash_ IN NUMBER ) RETURN CLOB IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      response_  CLOB;
      status_    VARCHAR2(20);
      
      CURSOR get_cache IS
      SELECT status, response
        FROM sap_rfc_cache_tab a
       WHERE a.time >= SYSDATE
         AND a.hash = hash_;

      CURSOR get_cache_resp IS
      SELECT response
        FROM sap_rfc_cache_tab a
       WHERE a.time >= SYSDATE
         AND a.hash = hash_
         AND status = 'READY';
  BEGIN 
      FOR r_ IN get_cache LOOP
          IF r_.status = 'READY' THEN
              status_ := 'READY';
              response_ := r_.response;
              EXIT;
          ELSE
              status_ := r_.status;
          END IF;
      END LOOP;

      IF status_ IS NULL THEN
          INSERT INTO sap_rfc_cache_tab
             (time, hash, status)
          VALUES 
             (SYSDATE + xml_cache_time_, hash_, 'WAIT');
      ELSIF status_ = 'WAIT' THEN
          LOOP
              OPEN get_cache_resp;
              FETCH get_cache_resp INTO response_;
              CLOSE get_cache_resp;
              EXIT WHEN response_ IS NOT NULL;
          END LOOP;
      END IF;

      COMMIT;
      RETURN response_;
  END;
  
  PROCEDURE Save_To_Cache_( rfc_name_ IN varchar2, hash_ IN NUMBER, response_ IN OUT NOCOPY CLOB, cache_time_ IN NUMBER ) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
      IF cache_time_ = 0 THEN
          RETURN;
      END IF; 

      INSERT INTO sap_rfc_cache_tab
         (time, hash, response, status)
      VALUES 
         (SYSDATE + cache_time_, hash_, response_, 'READY');
      COMMIT;
      
      IF SYSDATE > rfc_cache_clear_time_ THEN
          DELETE sap_rfc_cache_tab a
           WHERE a.time < SYSDATE;
           
          rfc_cache_clear_time_ := SYSDATE + 1/24/60;  -- 1 minutes
      END IF;
      
      COMMIT;
  END;

  PROCEDURE Clear_Cache IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      count_   NUMBER;
  BEGIN 
      DELETE sap_rfc_cache_tab;
      COMMIT;
      
      FOR r_ IN (SELECT cache_id
                   FROM sap_cache_head_tab
                  WHERE cache_type = 'CACHE' ) LOOP
             DELETE sap_cache_items_tab
              WHERE cache_id = r_.cache_id
                AND valid_to < SYSDATE;
             count_ := SQL%ROWCOUNT;
             
             IF count_ > 0 THEN
                 UPDATE sap_cache_head_tab SET
                     count_rows = count_rows - count_
                  WHERE cache_id = r_.cache_id;
             END IF;
             COMMIT; 
      END LOOP; 

      FND_Api.Log( 'Clear cache' );
      COMMIT;
  END;

  FUNCTION Generate_Request_( rfc_ IN OUT NOCOPY attr_tab ) RETURN CLOB IS
      requect_     CLOB;
      ret_         CLOB;
      rfc_name_   VARCHAR2(50);
      tab_name_    VARCHAR2(50);
      param_       Attr_Obj;
      idx_         PLS_INTEGER;
      
      FUNCTION Obj_To_Xml_( obj_ IN OUT NOCOPY Attr_Obj ) RETURN CLOB IS
          xml_    CLOB;
          ret_    CLOB;
          tab_    Attr_Api.Attr_Tab_;
          rec_    Attr_Obj;
          type_   VARCHAR2(30);
          name_   VARCHAR2(200);
          item_   BOOLEAN;
          exist_item_ BOOLEAN;
      BEGIN 
          item_ := FALSE;
          exist_item_ := FALSE;
          DBMS_lob.createtemporary( xml_, true );
          FOR i_ IN 1..obj_.count_ LOOP
              name_ := obj_.names_(i_);
              IF name_ IS NOT NULL THEN
                  type_ := obj_.Get_Type( i_ );
                  IF type_ = 'TABLE' THEN
                      tab_ := Attr_Api.Get_Attr_Table_( obj_, name_ );
                      DBMS_lob.append( xml_, '<'||name_||'>' );
                      FOR j_ IN 1..tab_.count LOOP
                          DBMS_lob.append( xml_, '<item>'||                          
                                                 Obj_To_Xml_( tab_(j_) ) ||
                                                 '</item>' );
                      END LOOP;
                      DBMS_lob.append( xml_, '</'||name_||'>' );
                  ELSIF type_ = 'RECORD' THEN
                      rec_ := obj_.Get_Record(name_);
                      DBMS_lob.append( xml_, '<'||name_||'>'||
                                             Obj_To_Xml_( rec_ )||  
                                             '</'||name_||'>' );
                  ELSE
                      IF name_ LIKE 'P%' THEN
                         IF obj_.Get(i_) = '_' THEN
                             IF name_ = 'P1' THEN
                                 DBMS_lob.append( xml_, '<item>' );
                                 item_ := TRUE;
                                 exist_item_ := TRUE;
                             ELSIF item_ THEN
                                 DBMS_lob.append( xml_, '</item>' );
                                 item_ := FALSE;
                             END IF;
                         ELSE
                             IF exist_item_ AND (NOT item_) THEN
                                 DBMS_lob.append( xml_, '<item>' );
                                 item_ := TRUE;
                             END IF;
                             DBMS_lob.append( xml_, '<'||obj_.Get(i_)||'>'|| 
                                                    utl_i18n.escape_reference(obj_.Get('V'||substr( name_, 2 )))||
                                                    '</'||obj_.Get(i_)||'>' );
                         END IF;
                      END IF;
                  END IF;            
              END IF;
          END LOOP;
          IF item_ THEN
              DBMS_lob.append( xml_, '</item>' );
          END IF;
          ret_ := xml_;
          DBMS_LOB.freetemporary(xml_);
          RETURN ret_;
      END;
      
  BEGIN
      DBMS_lob.createtemporary( requect_, true );
      DBMS_lob.append( requect_,  
'<?xml version="1.0" encoding="utf-8"?> 
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="urn:sap-com:document:sap:rfc:functions">
<soapenv:Header/>
<soapenv:Body>
' );
      FOR i_ IN 1..rfc_.count LOOP
         rfc_name_ := rfc_(i_).Get('RFC_NAME');
         DBMS_lob.append( requect_,  '<urn:'||rfc_name_||'>' );
         FOR p_ IN 1..max_param_ LOOP
             idx_ := rfc_(i_).Idx( 'PARAM'||p_ );
             IF idx_ IS NOT NULL THEN
                 param_ := rfc_(i_).Get_Record( idx_ );
                 IF param_ IS NOT NULL THEN
                     tab_name_ := param_.Get( 'TAB_NAME' );
                     IF param_.Get( 'P1' ) IS NULL THEN
                             DBMS_lob.append( requect_, '<'||tab_name_||'/>' );
                     ELSE
                         IF tab_name_ IS NOT NULL THEN
                             DBMS_lob.append( requect_, '<'||tab_name_||'>'||
                                                        Obj_To_Xml_( param_ )||
                                                        '</'||tab_name_||'>' );
                         ELSE
                             DBMS_lob.append( requect_, Obj_To_Xml_( param_ ) );
                         END IF;
                     END IF;
                 END IF;
             END IF;
         END LOOP;
         DBMS_lob.append( requect_,  '</urn:'||rfc_name_||'>' );
      END LOOP;
      DBMS_lob.append( requect_,  '</soapenv:Body></soapenv:Envelope>' );
      ret_ := requect_;
      DBMS_LOB.freetemporary(requect_);
      RETURN ret_;
  END;
  

  PROCEDURE Call_Web_Service_( request_ IN OUT NOCOPY CLOB, response_ IN OUT NOCOPY CLOB, info_ IN VARCHAR2 DEFAULT NULL ) IS
     http_req_        UTL_HTTP.req;
     http_resp_       UTL_HTTP.resp;
     tmp_response_    CLOB;       
     tmp_request_     CLOB;       

     buffer_         VARCHAR2(32767); 
     buffer_tmp_     VARCHAR2(32767); 
     prev_buffer_    VARCHAR2(300); 
     tmp_buffer_     VARCHAR2(300);
     amper_          VARCHAR2(1) := chr(38);
     i_              PLS_INTEGER;
     j_              PLS_INTEGER;
     row_nr_         PLS_INTEGER;
     len_            PLS_INTEGER;
     tmp_            VARCHAR2(50);
     escape_         BOOLEAN;
  BEGIN
     IF FND_Api.Log_Is_On() THEN
         FND_Api.Time_Start( 'Call_Web_Service_ '||info_ );
     END IF;
     UTL_HTTP.SET_TRANSFER_TIMEOUT( 120 );
     http_req_ := UTL_HTTP.begin_request(url_rfc_||'?sap-client='||client_, 'POST', 'HTTP/1.1' );
     BEGIN
     --UTL_HTTP.set_persistent_conn_support(http_req_, TRUE);
     UTL_HTTP.set_header (http_req_, 'Authorization', 'Basic ' || authorization_);
     UTL_HTTP.set_header (http_req_, 'Content-Type', 'text/xml'); 
     tmp_request_ := CONVERT(request_, 'UTF8');
     len_ := DBMS_lob.getlength(tmp_request_);
     UTL_HTTP.set_header (http_req_, 'Content-Length', len_);
     IF len_ < 32767 THEN
         UTL_HTTP.write_text (http_req_, tmp_request_);
     ELSE
         DECLARE
             start_   PLS_INTEGER;
         BEGIN
             start_ := 1;
             WHILE start_ <= len_ LOOP
                 UTL_HTTP.write_text (http_req_, DBMS_LOB.Substr(tmp_request_, 32000, start_ ));
                 start_ := start_ + 32000;
             END LOOP;
         END;
     END IF;
     EXCEPTION WHEN OTHERS THEN
         FND_API.LOG( '*********** ERROR **************' );
         FND_API.LOG( SQLERRM );
         UTL_HTTP.end_request( http_req_ );
         RAISE;
     END;
     
     http_resp_ := UTL_HTTP.get_response (http_req_);

     row_nr_ := 0;
     prev_buffer_ := '';   
     BEGIN
        loop
          UTL_HTTP.read_text( http_resp_, buffer_, 32760);
          IF row_nr_ = 0 THEN
              escape_ := substr(buffer_,1,4) = amper_||'lt;';
          END IF;
          IF escape_ THEN
              IF row_nr_ = 1 THEN
                  DBMS_lob.createtemporary( tmp_response_, true );
                  tmp_buffer_ := '';
                  tmp_ := substr(buffer_tmp_, -15 );
                  i_ := INSTR( tmp_, amper_, -1  );
                  j_ := INSTR( tmp_, ';', -1  );
                  IF i_ > j_ THEN
                      i_ := LENGTH(buffer_tmp_) - 15 + i_;
                      tmp_buffer_ := SUBSTR( buffer_tmp_, i_ );
                      DBMS_lob.append( tmp_response_, utl_i18n.unescape_reference( SUBSTR( buffer_tmp_, 1, i_-1 ) ) ); 
                  ELSE
                      DBMS_lob.append( tmp_response_, utl_i18n.unescape_reference( buffer_tmp_ ) ); 
                  END IF;
                  prev_buffer_ := tmp_buffer_;
              END IF;

              row_nr_ := row_nr_ + 1;
              IF row_nr_ > 1 THEN
                  tmp_ := substr(buffer_, -15 );
                  tmp_buffer_ := '';
                  i_ := INSTR( tmp_, amper_, -1  );
                  j_ := INSTR( tmp_, ';', -1  );
                  IF i_ > j_ THEN
                      i_ := LENGTH(buffer_) - 15 + i_;
                      tmp_buffer_ := SUBSTR( buffer_, i_ );
                      DBMS_lob.append( tmp_response_, utl_i18n.unescape_reference( prev_buffer_||SUBSTR( buffer_, 1, i_-1 ) ) ); 
                  ELSE
                      DBMS_lob.append( tmp_response_, utl_i18n.unescape_reference( prev_buffer_||buffer_ ) ); 
                  END IF;
                  prev_buffer_ := tmp_buffer_;
              ELSE --row_nr_ = 1 THEN
                  buffer_tmp_ := buffer_;
              END IF;
          ELSE
              IF row_nr_ = 1 THEN
                  DBMS_lob.createtemporary( tmp_response_, true );
                  DBMS_lob.append( tmp_response_, buffer_tmp_ ); 
              END IF;

              row_nr_ := row_nr_ + 1;
              IF row_nr_ > 1 THEN
                  DBMS_lob.append( tmp_response_, buffer_ ); 
              ELSE --row_nr_ = 1 THEN
                  buffer_tmp_ := buffer_;
              END IF;
          END IF;
        END LOOP;
     EXCEPTION 
     WHEN UTL_HTTP.END_OF_BODY THEN
        IF row_nr_ <= 1 THEN
              UTL_HTTP.end_response( http_resp_ );
              IF escape_ THEN
                  response_ := utl_i18n.unescape_reference( buffer_tmp_ );
              ELSE
                  response_ := buffer_tmp_;
              END IF;
              IF FND_Api.Log_Is_On() THEN
                 FND_Api.Time_Stop( 'Call_Web_Service_ '||info_ );
              END IF;
              RETURN;  --- !!!!  RETURN  !!!!  
        END IF;   
     WHEN OTHERS THEN
         UTL_HTTP.end_response( http_resp_ );
         IF row_nr_ > 1 THEN
             DBMS_LOB.freetemporary(tmp_response_);
         END IF;
         RAISE;
     END;
     UTL_HTTP.end_response( http_resp_ );
     IF escape_ AND prev_buffer_ IS NOT NULL THEN
          DBMS_lob.append( tmp_response_, utl_i18n.unescape_reference( prev_buffer_ ) );
     END IF;
     response_ := tmp_response_;
     DBMS_LOB.freetemporary(tmp_response_);
     IF FND_Api.Log_Is_On() THEN
         FND_Api.Time_Stop( 'Call_Web_Service_ '||info_ );
         FND_Api.Log( 'Call_Web_Service_ '||info_||' XmlLength', DBMS_lob.getlength(response_) );
     END IF;
  END;

  PROCEDURE Call_Web_Service_Raw( request_ IN OUT NOCOPY CLOB, response_ IN OUT NOCOPY BLOB, 
                                  start__ IN VARCHAR2, stop__ IN VARCHAR2, 
                                  size_start__  IN VARCHAR2, size_stop__  IN VARCHAR2  ) IS
     http_req_        UTL_HTTP.req;
     http_resp_       UTL_HTTP.resp;
     tmp_response_    BLOB;       
     tmp_result_      BLOB;       
     tmp_request_     CLOB;       
     start_           VARCHAR2(50) := start__;
     stop_            VARCHAR2(50) := stop__;
     size_start_      VARCHAR2(50) := size_start__;
     size_stop_       VARCHAR2(50) := size_stop__;

     buffer_          RAW(32767); 
     pos_             PLS_INTEGER;
     len_             PLS_INTEGER;
     blob_size_       PLS_INTEGER;
     
     start_raw_       RAW(100);
     stop_raw_        RAW(100);
     start_len_       PLS_INTEGER;
     stop_len_        PLS_INTEGER;
     start_line_      PLS_INTEGER;
     stop_line_       PLS_INTEGER;
  BEGIN
     IF FND_Api.Log_Is_On() THEN
         IF show_xml_ THEN
             FND_Api.Log( request_ );
         END IF;
         FND_Api.Time_Start( 'Call_Web_Service_Raw' );
     END IF;
     http_req_ := UTL_HTTP.begin_request(url_rfc_||'?sap-client='||client_, 'POST', 'HTTP/1.1' );
     BEGIN
     --UTL_HTTP.set_persistent_conn_support(http_req_, TRUE);
     UTL_HTTP.set_header (http_req_, 'Authorization', 'Basic ' || authorization_);
     UTL_HTTP.set_header (http_req_, 'Content-Type', 'text/xml'); 
     tmp_request_ := CONVERT(request_, 'UTF8');
     len_ := DBMS_lob.getlength(tmp_request_);
     UTL_HTTP.set_header (http_req_, 'Content-Length', len_);
     IF len_ < 32767 THEN
         UTL_HTTP.write_text (http_req_, tmp_request_);
     ELSE
         DECLARE
             start_   PLS_INTEGER;
         BEGIN
             start_ := 1;
             WHILE start_ < len_ LOOP
                 UTL_HTTP.write_text (http_req_, DBMS_LOB.Substr(tmp_request_, 32000, start_ ));
                 start_ := start_ + 32000;
             END LOOP;
         END;
     END IF;
     EXCEPTION WHEN OTHERS THEN
         UTL_HTTP.end_request( http_req_ );
         RAISE;
     END;
     
     http_resp_ := UTL_HTTP.get_response (http_req_);

     pos_ := 1;
     DBMS_lob.createtemporary( tmp_response_, true );
     BEGIN
        loop
          UTL_HTTP.read_raw( http_resp_, buffer_, 32760);
          len_ := utl_raw.length( buffer_ );
          DBMS_lob.write( tmp_response_, len_, pos_, buffer_ );
          pos_ := pos_ + len_;
        end loop;
     EXCEPTION 
     WHEN UTL_HTTP.END_OF_BODY THEN
         NULL;
     WHEN OTHERS THEN
         FND_API.LOG( '*********** ERROR **************' );
         FND_API.LOG( SQLERRM );
         UTL_HTTP.end_response( http_resp_ );
         DBMS_LOB.freetemporary(tmp_response_);
         RAISE;
     END;
     UTL_HTTP.end_response( http_resp_ );
     IF FND_Api.Log_Is_On() THEN
         FND_Api.Time_Stop( 'Call_Web_Service_Raw' );
         IF show_xml_ THEN
             FND_Api.Log( utl_raw.cast_to_varchar2(tmp_response_) );
         END IF;
     END IF;

          
     pos_ := 1;
     DBMS_lob.createtemporary( tmp_result_, true );

     start_raw_ := utl_raw.cast_to_raw( size_start_ );
     stop_raw_  := utl_raw.cast_to_raw( size_stop_ );
     start_len_ := utl_raw.length( start_raw_ );
     stop_len_ := utl_raw.length( stop_raw_ );
     start_line_ := DBMS_LOB.INSTR (tmp_response_, start_raw_, 1 );
     IF start_line_ = 0 THEN
         size_start_ := utl_i18n.unescape_reference( size_start_ );
         size_stop_ := utl_i18n.unescape_reference( size_stop_ );
         start_raw_ := utl_raw.cast_to_raw( size_start_ );
         stop_raw_  := utl_raw.cast_to_raw( size_stop_ );
         start_len_ := utl_raw.length( start_raw_ );
         stop_len_ := utl_raw.length( stop_raw_ );
         start_line_ := DBMS_LOB.INSTR (tmp_response_, start_raw_, 1 );
     END IF;
     start_line_ := start_line_ + start_len_;
     stop_line_ := DBMS_LOB.INSTR (tmp_response_, stop_raw_, start_line_ );
     blob_size_ := utl_raw.cast_to_varchar2(DBMS_LOB.Substr(tmp_response_, stop_line_ - start_line_, start_line_ ));

     start_raw_ := utl_raw.cast_to_raw( start_ );
     stop_raw_  := utl_raw.cast_to_raw( stop_ );
     start_len_ := utl_raw.length( start_raw_ );
     stop_len_ := utl_raw.length( stop_raw_ );
     start_line_ := DBMS_LOB.INSTR (tmp_response_, start_raw_, 1 );
     IF start_line_ = 0 THEN
         start_ := utl_i18n.unescape_reference( start_ );
         stop_ := utl_i18n.unescape_reference( stop_ );
         start_raw_ := utl_raw.cast_to_raw( start_ );
         stop_raw_  := utl_raw.cast_to_raw( stop_ );
         start_len_ := utl_raw.length( start_raw_ );
         stop_len_ := utl_raw.length( stop_raw_ );
         start_line_ := DBMS_LOB.INSTR (tmp_response_, start_raw_, 1 );
     END IF;
     start_line_ := start_line_ + start_len_;
     
     IF start_line_ > start_len_ THEN
         LOOP
             stop_line_ := DBMS_LOB.INSTR (tmp_response_, stop_raw_, start_line_ );
             EXIT WHEN stop_line_ = 0;
             buffer_ := DBMS_LOB.Substr(tmp_response_, stop_line_ - start_line_, start_line_ );
             buffer_ := utl_encode.base64_decode(utl_raw.cast_to_raw(
                          utl_i18n.unescape_reference( utl_raw.cast_to_varchar2(buffer_))));
             len_ := utl_raw.length( buffer_ );
             IF pos_ + len_ > blob_size_ + 1 THEN
                 len_ := blob_size_ + 1 - pos_;
             END IF;
             IF len_ > 0 THEN
                 DBMS_lob.write( tmp_result_, len_, pos_, buffer_ );
             END IF;
             pos_ := pos_ + len_;
             
             --start_line_ := DBMS_LOB.INSTR (tmp_response_, start_raw_, stop_line_ + stop_len_ ) + start_len_;
             start_line_ := stop_line_ + stop_len_  + start_len_;
         END LOOP;
     END IF;
     response_ := tmp_result_;
     DBMS_LOB.freetemporary(tmp_result_);
     DBMS_LOB.freetemporary(tmp_response_);
  END;


  FUNCTION Exec_Tab( rfc_ IN OUT NOCOPY attr_tab, path_ IN VARCHAR2, cache_time_ IN NUMBER DEFAULT 0  ) RETURN Attr_Tab PIPELINED IS
      obj_  Xml_Obj;
  BEGIN 
      obj_ := Exec_Obj( rfc_, cache_time_ => cache_time_ );
      FOR r_ IN ( SELECT t.This() obj FROM TABLE( obj_.Attr_Table( path_ ) ) t ) LOOP
          PIPE ROW( r_.obj );
      END LOOP;
      RETURN;
  END;

  
  FUNCTION Exec_XML( rfc_ IN OUT NOCOPY attr_tab ) RETURN CLOB IS
      request_        CLOB; 
      response_       CLOB;
  BEGIN
      request_  := Generate_Request_( rfc_ );
      Call_Web_Service_( request_, response_ );
      RETURN response_;
  END;

  FUNCTION Exec_Obj( rfc_ IN OUT NOCOPY attr_tab, 
                     path_ IN VARCHAR2 DEFAULT NULL, 
                     cache_time_ IN NUMBER DEFAULT 0,
                     request_xml_ IN CLOB DEFAULT NULL ) RETURN Xml_Obj IS
      request_        CLOB; 
      response_       CLOB;
      response_str_   VARCHAR2(400);
      hash_           NUMBER;
      commit_         BOOLEAN;
      rfc_name_       VARCHAR2(50);
      rfc_name_tab_   name_tab;
      full_path_      VARCHAR2(2000);
      massage_        VARCHAR2(6000);
      ret_            Xml_Obj;
      response_len_   NUMBER;
            
      FUNCTION lob_replace( p_lob IN OUT NOCOPY CLOB, p_what in varchar2, p_with in varchar2 ) RETURN CLOB IS 
          n              NUMBER; 
          p_offset       NUMBER; 
          temp_clob      CLOB;
          ret_clob       CLOB;
          p_what_length  NUMBER := length(p_what);
          p_with_length  NUMBER := length(p_with);
        begin 
          p_offset := 1;
          DBMS_lob.createtemporary(temp_clob,true,DBMS_lob.call); 
          LOOP
              n := DBMS_lob.instr( p_lob, p_what, p_offset );
              EXIT WHEN nvl(n,0) = 0;
              IF n - p_offset > 0 THEN
                  DBMS_lob.copy( temp_clob, p_lob, n - p_offset, DBMS_lob.getlength(temp_clob)+1, p_offset); 
              END IF;
              DBMS_lob.writeAppend( temp_clob, p_with_length, p_with ); 
              p_offset := n + p_what_length;
          END LOOP;
          IF DBMS_lob.getlength(p_lob) - p_offset+1 > 0 THEN
              DBMS_lob.copy( temp_clob, p_lob, DBMS_lob.getlength(p_lob) - p_offset+1, DBMS_lob.getlength(temp_clob)+1, p_offset); 
          END IF;
          ret_clob := temp_clob;
          DBMS_lob.freetemporary(temp_clob); 
          RETURN ret_clob;
        END;
          /*
          WHILE ( nvl(n,0) > 0 ) THEN  
              DBMS_lob.createtemporary(temp_clob,true,DBMS_lob.call); 
              DBMS_lob.copy ( temp_clob, p_lob, n); 
              DBMS_lob.writeAppend( temp_clob, p_with_length, p_with ); 
              DBMS_lob.copy ( temp_clob, p_lob, DBMS_lob.getlength(p_lob)- n - p_what_length  ); 
              
              DBMS_lob.copy( p_lob, p_lob, DBMS_lob.getlength(p_lob),  n+length(p_with), n+length(p_what) ); 
              --DBMS_lob.createtemporary(temp_clob,true,DBMS_lob.call); 
              --DBMS_lob.copy(temp_clob, p_lob, DBMS_lob.getlength(p_lob),  1,  n+p_what_length); 
              --DBMS_lob.copy(p_lob, temp_clob, DBMS_lob.getlength(temp_clob), n+p_with_length, 1); 
              --DBMS_lob.freetemporary(temp_clob); 
              
              DBMS_lob.write( p_lob, p_with_length, n, p_with ); 
              IF ( p_what_length > p_with_length ) THEN
                 DBMS_lob.trim( p_lob, DBMS_lob.getlength(p_lob)-(p_what_length-p_with_length) ); 
              END IF; 
          END IF;
          */

        /*        
        FUNCTION lob_replace ( srcClob IN OUT NOCOPY CLOB, replaceStr IN varchar2, replaceWith IN varchar2 ) RETURN CLOB  IS    
             l_buffer   VARCHAR2 (32767);
             l_amount   BINARY_INTEGER := 32700;
             l_pos      INTEGER := 1;
             l_clob_len INTEGER;
             newClob    CLOB;
             retClob    CLOB;
             n          NUMBER;
        BEGIN
             DBMS_lob.CreateTemporary( newClob, TRUE );
             l_amount := least( 32700 - length(replaceWith) + length(replaceStr), 32700);
             n := DBMS_lob.instr( srcClob, replaceStr ); 
             l_clob_len := DBMS_LOB.getlength (srcClob);
             WHILE l_pos < l_clob_len LOOP
                 IF l_pos + l_amount > n THEN
                 END IF;
                 DBMS_LOB.READ (srcClob,l_amount,l_pos,l_buffer);
                 IF l_buffer IS NOT NULL THEN
                   -- replace the text
                   l_buffer := replace(l_buffer,replaceStr,replaceWith);
                   -- write it to the new clob
                   DBMS_LOB.writeAppend(newClob, LENGTH(l_buffer), l_buffer);
                 END IF;
                 l_pos :=   l_pos + l_amount;
             END LOOP;
             retClob := newClob;
             DBMS_lob.freetemporary(newClob); 
             RETURN retClob;
        END;
        */
             
  BEGIN 
      commit_ := FALSE;
      rfc_name_tab_ := name_tab();
      rfc_name_tab_.Extend( rfc_.count );
      FOR i_ in 1..rfc_.count LOOP
          rfc_name_         := rfc_(i_).Get('RFC_NAME');
          rfc_name_tab_(i_) := rfc_name_;
          commit_           := commit_ OR (instr( rfc_name_, 'COMMIT' ) > 0);
      END LOOP;
      IF request_xml_ IS NULL THEN
          request_  := Generate_Request_( rfc_ );
      ELSE
          request_  := request_xml_;
      END IF;
      IF FND_Api.Log_Is_On() THEN
          IF show_xml_ THEN
              FND_Api.Log( request_ );
          END IF;
          FND_Api.Time_Start( 'SAP_API.Call_Web_Service_'||rfc_name_ );
      END IF;
      IF (NOT commit_) AND (cache_time_ > 0) THEN
          hash_     := DBMS_UTILITY.GET_HASH_VALUE( FND_api.environment_id_||request_, 2, 268435456);
          response_ := Response_From_Cache_( rfc_name_, hash_ );
          IF response_ IS NULL THEN
              Call_Web_Service_( request_, response_ );
              Save_To_Cache_( rfc_name_, hash_, response_, cache_time_/24/60/60 );
          END IF;
      ELSE
          Call_Web_Service_( request_, response_ );
      END IF;
      IF FND_Api.Log_Is_On() THEN
          FND_Api.Time_Stop ( 'SAP_API.Call_Web_Service_'||rfc_name_ );
      END IF;
      IF show_xml_ THEN
          FND_Api.Log( response_ );
      END IF;
      IF commit_ THEN
          --FND_Api.Log( request_ );
          Clear_Cache();
      END IF;

      response_len_ := DBMS_lob.getlength(response_);
      FOR i_ in 1..rfc_name_tab_.count LOOP
          rfc_name_ := rfc_name_tab_(i_);
          IF response_len_ < 32767 THEN
              response_ := REPLACE( to_char(response_), 'urn:'||rfc_name_||'.Response', rfc_name_ );
          ELSE
              response_ := lob_replace( response_, 'urn:'||rfc_name_||'.Response', rfc_name_ );
          END IF;
      END LOOP;
      
      response_str_ := substr(response_,1, 400);
      IF instr( response_str_, '<SOAP-ENV:Fault>' ) > 0 THEN
          DECLARE
              i_ NUMBER;
          BEGIN          
              massage_ := substr( response_, 1, 4000);
              i_ := instr( massage_, '</type><message>' );
              IF i_ > 0 THEN
                  massage_ := substr( massage_, i_ + 16 );
              ELSE
                  i_ := instr( massage_, '<faultstring>' );
                  massage_ := substr( massage_, i_ + 13 );
              END IF;
              massage_ := substr( massage_, 1, instr( massage_, '<' ) - 1 );
              Error_Api.Error( 'SAP_API.FAULT', 'SAP Fault: '||massage_  );
          END;
      END IF;
      IF substr(response_str_,1,12) = '<HTML><HEAD>' THEN
          FND_Api.Log( response_ );
          Error_Api.Error( 'SAP_API.RESPONSE', 'Error when data was written to SAP.' );
      END IF;

      full_path_ := '/SOAP-ENV:Envelope/SOAP-ENV:Body';
      IF path_ IS NOT NULL THEN
          full_path_ := full_path_ || '/' ||path_;
      END IF;

      ret_ := Xml_Obj( XmlType(response_), full_path_, 
                                'xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:sap-com:document:sap:rfc:functions"',
                                'item'  );
      IF (response_len_ < 32767) AND (rfc_name_tab_.count = 1) THEN
          massage_ := substr( response_, 1, 4000);
          IF instr( massage_, '<RETURN><TYPE></TYPE>') = 0 THEN
              Sap_API.Show_Error( ret_.Attr_Record( rfc_name_||'/RETURN' ) );
          END IF;
          IF instr( massage_, '<ET_RETURN>') > 0 THEN
              Sap_API.Show_Error( ret_.Attr_Record( rfc_name_||'/ET_RETURN' ) );
          END IF;
      ELSE
          FOR i_ in 1..rfc_name_tab_.count LOOP
              rfc_name_ := rfc_name_tab_(i_);
              Sap_API.Show_Error( ret_.Attr_Record( rfc_name_||'/RETURN' ) );
              Sap_API.Show_Error( ret_.Attr_Record( rfc_name_||'/ET_RETURN' ) );
          END LOOP;
      END IF;
      RETURN ret_;
      EXCEPTION WHEN OTHERS THEN
          FND_Api.Log( '*** REQUEST ***');
          FND_Api.Log( request_ );
          FND_Api.Log( '*** RESPONSE *** '||response_len_);
          FND_Api.Log( response_ );
          RAISE;
  END;
  
  PROCEDURE Show_Error ( return_ IN attr_obj ) IS
  BEGIN
      IF return_ IS NOT NULL THEN
      CASE nvl(return_.Get('TYPE'),'S') 
          WHEN 'S' THEN NULL;
          WHEN 'E' THEN Error_Api.Error( 'SAP ERROR', return_.Get('MESSAGE') );
          WHEN 'W' THEN FND_Api.Log( 'SAP WARNING', return_.Get('MESSAGE') );
          WHEN 'I' THEN FND_Api.Log( 'SAP INFO', return_.Get('MESSAGE') );
          ELSE NULL;
      END CASE;
      END IF;
  END;
  
  PROCEDURE Get_Wsdl( rfc_name_ IN VARCHAR2, wsdl_ IN OUT NOCOPY CLOB ) IS
     http_req_        UTL_HTTP.req;
     http_resp_       UTL_HTTP.resp;
     tmp_response_    CLOB;       

     buffer_         VARCHAR2(32767);
  BEGIN
     http_req_ := UTL_HTTP.begin_request(url_wsdl_||'?services='||
                                         upper(REPLACE(rfc_name_,'/', '%2F')), 'GET', 'HTTP/1.1' );
     UTL_HTTP.set_header (http_req_, 'Authorization', 'Basic ' || authorization_);
     UTL_HTTP.set_header (http_req_, 'Content-Type', 'text/xml'); 

     http_resp_ := UTL_HTTP.get_response (http_req_);

     DBMS_lob.createtemporary( tmp_response_, true );
     begin
        loop
          UTL_HTTP.read_text( http_resp_, buffer_, 32760);
          DBMS_lob.append( tmp_response_, buffer_ );
        end loop;
     exception
        when UTL_HTTP.END_OF_BODY then
          null;
     end;
     UTL_HTTP.end_response( http_resp_ );
     wsdl_ := tmp_response_;
     IF show_xml_ THEN
         FND_Api.Log( '**** WSDL ****' );
         FND_Api.Log( wsdl_ );
     END IF;
     DBMS_LOB.freetemporary(tmp_response_);
  END;


  ---------------------  READ TABLE -------------------------------  

  PROCEDURE Query_Get_Xml( 
                  from_cache_    OUT BOOLEAN,
                  response_xml_  IN OUT NOCOPY CLOB,
                  table_name_    IN VARCHAR2,
                  columns_       IN OUT NOCOPY NAME_TAB,
                  where_         IN OUT NOCOPY VARCHAR2,
                  max_rows_      IN NUMBER DEFAULT 1000,
                  info_          IN VARCHAR2 DEFAULT NULL ) IS
      request_        CLOB; 
      hash_           NUMBER;

      FUNCTION Query_Request_ RETURN VARCHAR2 IS
          where_xml_    VARCHAR2(32767);
          where_tmp_    VARCHAR2(32767);
          columns_tmp_  VARCHAR2(32767);
          i_            NUMBER;
      BEGIN
          IF columns_.count = 0 THEN
              columns_tmp_ := '<FIELDS>';
              FOR r_ IN (SELECT t.Get('POSITION')   POSITION,
                                t.Get('FIELDNAME')  FIELDNAME
                           FROM TABLE( Sap_Api.Query(table_name_ => 'DD03L', 
                                                     columns_    => 'FIELDNAME, POSITION', 
                                                     where_      => 'TABNAME = '''||upper(trim(table_name_))||''' AND (POSITION LE 5) ',
                                                     max_rows_   => 5 )) t 
                           ORDER BY 1
                           ) LOOP
                  columns_tmp_ := columns_tmp_ || '<item><FIELDNAME>'|| r_.FIELDNAME ||'</FIELDNAME></item>';
              END LOOP;
              columns_tmp_ := columns_tmp_ || '</FIELDS>';
          ELSE
              columns_tmp_ := '<FIELDS>';
              FOR i IN 1..columns_.count LOOP
                  columns_tmp_ := columns_tmp_ || '<item><FIELDNAME>'|| trim(upper( columns_(i) )) ||'</FIELDNAME></item>';
              END LOOP;
              columns_tmp_ := columns_tmp_ || '</FIELDS>';
          END IF;
          where_tmp_ := convert( where_,'US7ASCII','EE8MSWIN1250') ;
          IF where_tmp_ != where_ THEN
               where_tmp_ := convert( 
                             REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( 
                             REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( 
                                where_, 
                                '�', chr(38)||'#260;'),
                                '�', chr(38)||'#261;'),
                                '�', chr(38)||'#262;'),
                                '�', chr(38)||'#263;'),
                                '�', chr(38)||'#280;'),
                                '�', chr(38)||'#281;'),
                                '�', chr(38)||'#321;'),
                                '�', chr(38)||'#322;'),
                                '�', chr(38)||'#323;'),
                                '�', chr(38)||'#324;'),
                                '�', chr(38)||'#211;'),
                                '�', chr(38)||'#243;'),
                                '�', chr(38)||'#346;'),
                                '�', chr(38)||'#347;'),
                                '�', chr(38)||'#377;'),
                                '�', chr(38)||'#378;'),
                                '�', chr(38)||'#379;'),
                                '�', chr(38)||'#380;'),
                                'US7ASCII','EE8MSWIN1250') ;
          END IF;
          --html entries
          where_xml_ := '';
          WHILE where_tmp_ IS NOT NULL LOOP
              IF length(where_tmp_) <= 70 THEN
                  where_xml_ := where_xml_ || '<item><TEXT>'|| where_tmp_ ||'</TEXT></item>';
                  where_tmp_ := '';
              ELSE
                  i_ := instr( substr(where_tmp_,1,70), ' AND ', -1 );
                  IF i_ = 0 THEN
                      i_ := instr( substr(where_tmp_,1,70), ''', ', -1 );
                      IF i_ = 0 THEN
                          i_ := instr( substr(where_tmp_,1,70), ' ', -1 );
                          IF i_ = 0 THEN
                              i_ := instr( substr(where_tmp_,1,70), ')', -1 );
                          END IF;
                          IF i_ = 0 THEN
                              i_ := instr( substr(where_tmp_,1,70), '(', -1 );
                          END IF;
                          IF i_ = 0 THEN
                              i_ := instr( substr(where_tmp_,1,70), ',', -1 );
                          END IF;
                          IF i_ = 0 THEN
                              Error_Api.Error( 'SAP_API.FAULT', 'A problem in where statement. Add more space chars in expression.'  );
                          END IF;
                      END IF;
                  END IF;
                  where_xml_ := where_xml_ || '<item><TEXT>'|| substr(where_tmp_,1,i_) ||'</TEXT></item>';
                  where_tmp_ := substr(where_tmp_,i_+1);                                 
              END IF;
          END LOOP;
          IF where_xml_ IS NOT NULL THEN
              where_xml_ := '<OPTIONS>' || where_xml_ || '</OPTIONS>'; 
          END IF;
          RETURN 
'<?xml version="1.0" encoding="utf-8"?>
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="urn:sap-com:document:sap:rfc:functions">
<soapenv:Header/>
<soapenv:Body>
<urn:RFC_READ_TABLE><QUERY_TABLE>'|| table_name_ ||'</QUERY_TABLE><ROWCOUNT>'|| max_rows_ ||'</ROWCOUNT>'|| columns_tmp_ ||'<DATA/>'|| where_xml_ ||'</urn:RFC_READ_TABLE>
</soapenv:Body></soapenv:Envelope>';
      END;
  BEGIN
      from_cache_ := FALSE;
      request_  := Query_Request_();
      IF show_xml_ THEN
          FND_Api.Log( request_ );
      END IF;
      IF xml_cache_time_ > 0 THEN
          hash_     := DBMS_UTILITY.GET_HASH_VALUE( FND_api.environment_id_||request_, 2, 268435456);
          response_xml_ := Response_From_Cache_( table_name_, hash_ );
          IF response_xml_ IS NULL THEN
              Call_Web_Service_( request_, response_xml_, info_ => info_ );
              Save_To_Cache_( table_name_, hash_, response_xml_, xml_cache_time_ );
          ELSE
              from_cache_ := TRUE;
          END IF;
      ELSE
          Call_Web_Service_( request_, response_xml_, info_ => info_ );
      END IF;
      
      IF show_xml_ THEN
          FND_Api.Log( response_xml_ );
      END IF;
      IF instr(substr(response_xml_, 1, 2000), '<SOAP-ENV:Fault>' ) > 0 THEN
          DECLARE
              TYPE columns_dic IS TABLE OF PLS_INTEGER INDEX BY VARCHAR2(35);
              tmp_            NUMBER;
              add_            NUMBER;
              massage_        VARCHAR2(4000);
              columns_dic_    columns_dic;
          BEGIN
              FND_API.Log( 'WHERE:', where_ );
              FOR r_ IN (SELECT t.Get('POSITION')   POSITION,
                                t.Get('FIELDNAME')  FIELDNAME
                           FROM TABLE( Sap_Api.Query(table_name_ => 'DD03L', 
                                                     columns_    => 'FIELDNAME, POSITION', 
                                                     where_      => 'TABNAME = '''||upper(trim(table_name_))||''' ',
                                                     max_rows_   => 1000)) t 
                           WHERE t.Get('FIELDNAME') IS NOT NULL
                           ORDER BY 1
                           ) LOOP
                  FND_API.Log( r_.FIELDNAME );
                  columns_dic_( r_.FIELDNAME ) := 1;
              END LOOP;
              FOR i IN 1..columns_.count LOOP
                  IF NOT columns_dic_.Exists( columns_(i) ) THEN
                      Error_Api.Error( 'SAP_API.ERR_COLUMN', 'In table :P1 column :P2 not exists.', table_name_, columns_(i) );
                  END IF;
              END LOOP;
          
              massage_ := substr( response_xml_, 1, 4000);
              IF instr( massage_, '<Name>DATA_BUFFER_EXCEEDED</Name>') > 0 THEN
                  Error_Api.Error( 'SAP_API.FAULT', 'Fault: '||'Too many columns selected in a query.'  );
              ELSE
                  tmp_ := instr( massage_, '</Name><Text>' );
                  add_ := 13;
                  IF tmp_ = 0 THEN
                      tmp_ := instr( massage_, '</type><message>' );
                      add_ := 16;
                  END IF;
                  IF tmp_ = 0 THEN
                      tmp_ := instr( massage_, '<faultstring>' );
                      add_ := 13;
                  END IF;
                  massage_ := substr( massage_, tmp_+ add_ );
                  tmp_ := instr( massage_, '<' );
                  massage_ := substr( massage_, 1, tmp_-1 );
                  Error_Api.Error( 'SAP_API.FAULT', 'Fault: '||massage_  );
              END IF;
          END;
      END IF;
  END;

  FUNCTION Quick_Value   ( table_name_     IN VARCHAR2,            
                           return_column_  IN VARCHAR2 DEFAULT '',
                           value_column_   IN VARCHAR2 DEFAULT '',
                           value_          IN VARCHAR2 DEFAULT '',
                           where_          IN VARCHAR2 DEFAULT '' ) RETURN VARCHAR2 IS
  BEGIN
          FOR r_ IN (SELECT t.Get(return_column_) val FROM TABLE(Query( 
                                                                 table_name_ => table_name_,
                                                                 columns_    => return_column_,
                                                                 where_      => CASE WHEN value_column_ IS NOT NULL AND where_ IS NOT NULL THEN
                                                                                        where_||' AND '||value_column_||' = '''||value_||''''
                                                                                     WHEN value_column_ IS NOT NULL AND where_ IS NULL THEN   
                                                                                        value_column_||' = '''||value_||''''
                                                                                     ELSE
                                                                                        where_
                                                                                END,
                                                                 max_rows_   => 1 )) t ) LOOP
              RETURN r_.val;
          END LOOP; 
      RETURN NULL;
  END;

  FUNCTION Quick_Query( table_name_  IN VARCHAR2,
                        columns_     IN VARCHAR2 DEFAULT '',
                        where_       IN VARCHAR2 DEFAULT '',
                        max_rows_    IN NUMBER   DEFAULT 500,
                        start_field_nr_ IN NUMBER DEFAULT 1 ) RETURN QUICK_QUERY_TAB PIPELINED IS
      columns_list_        FND_Api.List;
      columns_str_         VARCHAR2(10000);
      query_rec_           QUICK_QUERY_REC;
      query_rec_empty_     QUICK_QUERY_REC;
      query_rec1_          QUICK_QUERY_REC;
      query_rec2_          QUICK_QUERY_REC;
      query_rec3_          QUICK_QUERY_REC;
      query_rec4_          QUICK_QUERY_REC;
      query_rec5_          QUICK_QUERY_REC;
      length_              NUMBER;
      data_length_         VARCHAR2(10);
      
  BEGIN
      IF columns_ IS NOT NULL THEN
          columns_str_ := ','||FND_Api.Join( FND_Api.Split_Trim( columns_, ','), ',')||',';
      END IF;
      length_ := 0;
      FOR r_ IN (SELECT *  FROM (
                 SELECT t.*, rownum num FROM TABLE(Sap_API.Table_Detail(table_name_, print_reference_ => 'N') ) t 
                  WHERE (t.name LIKE '***%' --first row
                         OR (columns_str_ IS NULL) 
                         OR  instr(columns_str_, ','||t.name||',') > 0)
                     AND t.name NOT LIKE '%.%'
                       ) t
                   ORDER BY CASE WHEN columns_str_ IS NULL THEN t.num ELSE instr(columns_str_, ','||t.name||',') END    ) LOOP
          IF r_.name LIKE '***%' THEN  --first row
              query_rec_ := query_rec_empty_;
              query_rec_.s01 := r_.name;
              query_rec_.s03 := r_.description;
              PIPE ROW (query_rec_);
              CONTINUE;
          END IF;
          IF r_.num-1 >= start_field_nr_ THEN
              data_length_ := r_.data_length;
              IF data_length_ IS NULL THEN
                  data_length_ := 10;
              ELSIF instr(data_length_,',') > 0 THEN
                  data_length_ := substr( data_length_, instr(data_length_,',')-1);
              END IF;
              IF (length_ + nvl(to_number(data_length_),10) <= 510) AND (columns_list_.count < 99) THEN
                  length_ := length_ + nvl(to_number(data_length_),10);
                  columns_list_( columns_list_.count + 1 ) := r_.name;
                  Set_Quick_Rec( query_rec1_, columns_list_.count, r_.name ||' ('||(r_.num-1)||')' );
                  Set_Quick_Rec( query_rec2_, columns_list_.count, r_.param_type );
                  Set_Quick_Rec( query_rec3_, columns_list_.count, r_.data_type||'('||r_.data_length||')' );
                  Set_Quick_Rec( query_rec4_, columns_list_.count, r_.description );
                  Set_Quick_Rec( query_rec5_, columns_list_.count, '-------' );
              END IF;
          END IF;
      END LOOP;
      PIPE ROW (query_rec5_);
      PIPE ROW (query_rec1_);
      PIPE ROW (query_rec2_);
      PIPE ROW (query_rec3_);
      PIPE ROW (query_rec4_);
      PIPE ROW (query_rec5_);
      
      columns_str_ := FND_Api.Join( columns_list_, ', ' );
      FOR i IN columns_list_.count+1..99 LOOP
          columns_list_( i ) := '';
      END LOOP;
      
      FOR r_ IN (SELECT t.This() obj 
                   FROM TABLE( Sap_Api.Query( table_name_ => table_name_,
                                              columns_    => columns_str_,
                                              where_      => where_,
                                              max_rows_   => max_rows_ ) ) t ) LOOP
          BEGIN
              query_rec_.s01 := r_.obj.values_(1); query_rec_.s02 := r_.obj.values_(2); query_rec_.s03 := r_.obj.values_(3); query_rec_.s04 := r_.obj.values_(4); query_rec_.s05 := r_.obj.values_(5); 
              query_rec_.s06 := r_.obj.values_(6); query_rec_.s07 := r_.obj.values_(7); query_rec_.s08 := r_.obj.values_(8); query_rec_.s09 := r_.obj.values_(9); 
              
              query_rec_.s10 := r_.obj.values_(10); query_rec_.s11 := r_.obj.values_(11); query_rec_.s12 := r_.obj.values_(12); query_rec_.s13 := r_.obj.values_(13); query_rec_.s14 := r_.obj.values_(14); 
              query_rec_.s15 := r_.obj.values_(15); query_rec_.s16 := r_.obj.values_(16); query_rec_.s17 := r_.obj.values_(17); query_rec_.s18 := r_.obj.values_(18); query_rec_.s19 := r_.obj.values_(19); 
              
              query_rec_.s20 := r_.obj.values_(20); query_rec_.s21 := r_.obj.values_(21); query_rec_.s22 := r_.obj.values_(22); query_rec_.s23 := r_.obj.values_(23); query_rec_.s24 := r_.obj.values_(24); 
              query_rec_.s25 := r_.obj.values_(25); query_rec_.s26 := r_.obj.values_(26); query_rec_.s27 := r_.obj.values_(27); query_rec_.s28 := r_.obj.values_(28); query_rec_.s29 := r_.obj.values_(29); 
              
              query_rec_.s30 := r_.obj.values_(30); query_rec_.s31 := r_.obj.values_(31); query_rec_.s32 := r_.obj.values_(32); query_rec_.s33 := r_.obj.values_(33); query_rec_.s34 := r_.obj.values_(34); 
              query_rec_.s35 := r_.obj.values_(35); query_rec_.s36 := r_.obj.values_(36); query_rec_.s37 := r_.obj.values_(37); query_rec_.s38 := r_.obj.values_(38); query_rec_.s39 := r_.obj.values_(39); 
              
              query_rec_.s40 := r_.obj.values_(40); query_rec_.s41 := r_.obj.values_(41); query_rec_.s42 := r_.obj.values_(42); query_rec_.s43 := r_.obj.values_(43); query_rec_.s44 := r_.obj.values_(44); 
              query_rec_.s45 := r_.obj.values_(45); query_rec_.s46 := r_.obj.values_(46); query_rec_.s47 := r_.obj.values_(47); query_rec_.s48 := r_.obj.values_(48); query_rec_.s49 := r_.obj.values_(49); 
              
              query_rec_.s50 := r_.obj.values_(50); query_rec_.s51 := r_.obj.values_(51); query_rec_.s52 := r_.obj.values_(52); query_rec_.s53 := r_.obj.values_(53); query_rec_.s54 := r_.obj.values_(54); 
              query_rec_.s55 := r_.obj.values_(55); query_rec_.s56 := r_.obj.values_(56); query_rec_.s57 := r_.obj.values_(57); query_rec_.s58 := r_.obj.values_(58); query_rec_.s59 := r_.obj.values_(59); 
              
              query_rec_.s60 := r_.obj.values_(60); query_rec_.s61 := r_.obj.values_(61); query_rec_.s62 := r_.obj.values_(62); query_rec_.s63 := r_.obj.values_(63); query_rec_.s64 := r_.obj.values_(64); 
              query_rec_.s65 := r_.obj.values_(65); query_rec_.s66 := r_.obj.values_(66); query_rec_.s67 := r_.obj.values_(67); query_rec_.s68 := r_.obj.values_(68); query_rec_.s69 := r_.obj.values_(69); 
              
              query_rec_.s70 := r_.obj.values_(70); query_rec_.s71 := r_.obj.values_(71); query_rec_.s72 := r_.obj.values_(72); query_rec_.s73 := r_.obj.values_(73); query_rec_.s74 := r_.obj.values_(74); 
              query_rec_.s75 := r_.obj.values_(75); query_rec_.s76 := r_.obj.values_(76); query_rec_.s77 := r_.obj.values_(77); query_rec_.s78 := r_.obj.values_(78); query_rec_.s79 := r_.obj.values_(79); 
              
              query_rec_.s80 := r_.obj.values_(80); query_rec_.s81 := r_.obj.values_(81); query_rec_.s82 := r_.obj.values_(82); query_rec_.s83 := r_.obj.values_(83); query_rec_.s84 := r_.obj.values_(84); 
              query_rec_.s85 := r_.obj.values_(85); query_rec_.s86 := r_.obj.values_(86); query_rec_.s87 := r_.obj.values_(87); query_rec_.s88 := r_.obj.values_(88); query_rec_.s89 := r_.obj.values_(89); 
              
              query_rec_.s90 := r_.obj.values_(90); query_rec_.s91 := r_.obj.values_(91); query_rec_.s92 := r_.obj.values_(92); query_rec_.s93 := r_.obj.values_(93); query_rec_.s94 := r_.obj.values_(94); 
              query_rec_.s95 := r_.obj.values_(95); query_rec_.s96 := r_.obj.values_(96); query_rec_.s97 := r_.obj.values_(97); query_rec_.s98 := r_.obj.values_(98); query_rec_.s99 := r_.obj.values_(99); 
          EXCEPTION WHEN OTHERS THEN
               NULL;
          END;
          PIPE ROW (query_rec_);
      END LOOP;
      RETURN;
  END;

  FUNCTION Query_(table_name_   IN VARCHAR2,
                  columns_      IN VARCHAR2,
                  where_        IN VARCHAR2,
                  max_rows_     IN NUMBER DEFAULT 1000,
                  sub_query1_   IN AttrS_Obj DEFAULT NULL,
                  sub_query2_   IN AttrS_Obj DEFAULT NULL,
                  sub_query3_   IN AttrS_Obj DEFAULT NULL,
                  sub_query4_   IN AttrS_Obj DEFAULT NULL,
                  sub_query5_   IN AttrS_Obj DEFAULT NULL ) RETURN SELECT_QUERY_TAB PIPELINED IS
      rec_   SELECT_QUERY_REC;
  BEGIN
      FOR r_ IN (SELECT t.This() obj
                   FROM TABLE( Sap_Api.Query(
                                                           table_name_ => table_name_,
                                                           columns_    => columns_,
                                                           where_      => where_,
                                                           max_rows_   => max_rows_,
                                                           name_cache_ => 'N',
                                                           sub_query1_ => sub_query1_,
                                                           sub_query2_ => sub_query2_,
                                                           sub_query3_ => sub_query3_,
                                                           sub_query4_ => sub_query4_,
                                                           sub_query5_ => sub_query5_
                                                           )
                  ) t ) LOOP 
          BEGIN
          rec_.s01 := r_.obj.values_(1);
          rec_.s02 := r_.obj.values_(2);
          rec_.s03 := r_.obj.values_(3);
          rec_.s04 := r_.obj.values_(4);
          rec_.s05 := r_.obj.values_(5);
          rec_.s06 := r_.obj.values_(6);
          rec_.s07 := r_.obj.values_(7);
          rec_.s08 := r_.obj.values_(8);
          rec_.s09 := r_.obj.values_(9);

          rec_.s10 := r_.obj.values_(10);
          rec_.s11 := r_.obj.values_(11);
          rec_.s12 := r_.obj.values_(12);
          rec_.s13 := r_.obj.values_(13);
          rec_.s14 := r_.obj.values_(14);
          rec_.s15 := r_.obj.values_(15);
          rec_.s16 := r_.obj.values_(16);
          rec_.s17 := r_.obj.values_(17);
          rec_.s18 := r_.obj.values_(18);
          rec_.s19 := r_.obj.values_(19);

          rec_.s20 := r_.obj.values_(20);
          rec_.s21 := r_.obj.values_(21);
          rec_.s22 := r_.obj.values_(22);
          rec_.s23 := r_.obj.values_(23);
          rec_.s24 := r_.obj.values_(24);
          rec_.s25 := r_.obj.values_(25);
          rec_.s26 := r_.obj.values_(26);
          rec_.s27 := r_.obj.values_(27);
          rec_.s28 := r_.obj.values_(28);
          rec_.s29 := r_.obj.values_(29);

          rec_.s30 := r_.obj.values_(30);
          rec_.s31 := r_.obj.values_(31);
          rec_.s32 := r_.obj.values_(32);
          rec_.s33 := r_.obj.values_(33);
          rec_.s34 := r_.obj.values_(34);
          rec_.s35 := r_.obj.values_(35);
          rec_.s36 := r_.obj.values_(36);
          rec_.s37 := r_.obj.values_(37);
          rec_.s38 := r_.obj.values_(38);
          rec_.s39 := r_.obj.values_(39);
          EXCEPTION WHEN OTHERS THEN
              NULL;
          END;
          PIPE ROW( rec_ );
      END LOOP;
      RETURN;
  END;

  FUNCTION Query( table_name_   IN VARCHAR2,
                  columns_      IN VARCHAR2,
                  where_        IN VARCHAR2,
                  where_list_   IN text_tab DEFAULT NULL,  --only when length( where_ ) > 4000
                  max_rows_     IN NUMBER DEFAULT 1000,
                  skip_         IN VARCHAR2 DEFAULT 'N', -- Y/N
                  name_cache_   IN VARCHAR2 DEFAULT 'Y',
                  sub_query1_   IN AttrS_Obj DEFAULT NULL,
                  sub_query2_   IN AttrS_Obj DEFAULT NULL,
                  sub_query3_   IN AttrS_Obj DEFAULT NULL,
                  sub_query4_   IN AttrS_Obj DEFAULT NULL,
                  sub_query5_   IN AttrS_Obj DEFAULT NULL,
                  sub_query6_   IN AttrS_Obj DEFAULT NULL,
                  sub_query7_   IN AttrS_Obj DEFAULT NULL,
                  sub_query8_   IN AttrS_Obj DEFAULT NULL ) RETURN AttrS_Tab PIPELINED IS
      query_rec_          QUERY_REC;
      sap_table_name_     VARCHAR2(50);
                  
      attr_obj_       AttrS_Obj;
      response_xml_   CLOB;
      response_str_   VARCHAR2(32767);
      response_len_   PLS_INTEGER;
      one_column_     BOOLEAN;
      one_column_idx_ PLS_INTEGER;
      start_          PLS_INTEGER;
      stop_           PLS_INTEGER;
      start_xml_      PLS_INTEGER;
      stop_str_       PLS_INTEGER;
      value_          VARCHAR2(1100);
      cache_id_       NUMBER;
      from_cache_     BOOLEAN;
      
      sub_query_      SUB_QUERY_TAB;
      queue_          QUERY_QUEUE_TAB; 
      queue_length_   NUMBER;
      queue_count_    NUMBER := 0;

      max_length_        PLS_INTEGER; 
      where_in_str_      VARCHAR2(32767);
      where_in_loop_     long_text_tab;
      where_in_loop_nr_  PLS_INTEGER;
      table_name_count_  PLS_INTEGER;
      

      TYPE Column_REC IS RECORD (
            col_FIELDNAME VARCHAR2(30),
            col_OFFSET    PLS_INTEGER,
            col_LENGTH    PLS_INTEGER--,
            --col_TYPE      VARCHAR2(1),
            --col_FIELDTEXT VARCHAR2(60)
      );
      TYPE Columns_TAB IS TABLE OF Column_REC;
      columns_tab_                 Columns_TAB;
            
      PROCEDURE Read_Columns( response_str_ IN OUT NOCOPY VARCHAR2 ) IS
          num_   PLS_INTEGER;
          i_     PLS_INTEGER;
          j_     PLS_INTEGER;
          start_ NUMBER;
          stop_  NUMBER;
          value_ VARCHAR2(200);
          
       BEGIN
          columns_tab_ := Columns_TAB();
          start_ := 1;
          LOOP
              start_ := instr( response_str_, '<item><FIELDNAME>', start_) + 17;
              EXIT WHEN start_ <= 17;
              columns_tab_.Extend(1);
              stop_  := instr( response_str_, '</FIELDTEXT></item>', start_);
              value_ := substr( response_str_, start_, stop_ - start_ );
                  
              num_ := columns_tab_.count;
              i_ := instr( value_, '</FIELDNAME>' );
              columns_tab_(num_).col_FIELDNAME := substr( value_, 1, i_-1 );
              i_ := instr( value_, '<OFFSET>' ) + 8;
              j_ := instr( value_, '</OFFSET>' );
              columns_tab_(num_).col_OFFSET    := to_number(substr( value_, i_, j_ - i_   )) + 1;
              i_ := instr( value_, '<LENGTH>' ) + 8;
              j_ := instr( value_, '</LENGTH>' );
              columns_tab_(num_).col_LENGTH    := substr( value_, i_, j_ - i_ );
              start_ := stop_ + 19;
           END LOOP;

           IF columns_tab_.count != query_rec_.table_names_.count THEN
               Error_Api.Error( 'WRONG_FIELD', 'Wrong filed count in query :P1 <> :P2',
                        columns_tab_.count, query_rec_.table_names_.count
                        );
           END IF;  
           FOR i IN 1..columns_tab_.count LOOP
               IF columns_tab_(i).col_FIELDNAME != query_rec_.table_names_(i) THEN
                    Error_Api.Error( 'WRONG_FIELD', 'Wrong filed in query :P1 <> :P2',
                        columns_tab_(i).col_FIELDNAME, query_rec_.table_names_(i)
                        );
               END IF;
           END LOOP;
       END;
       
       PROCEDURE Init_Where_In_Condition IS
          where_in_       long_text_tab;
       BEGIN
          --where_in_str_ := '';
          where_in_loop_ := NULL;
          FOR i IN 1..sub_query_.count LOOP
              IF sub_query_(i).mode_ IN ('IN', 'NOT IN') THEN
                  where_in_ := Get_Where_In_Sub_Query( sub_query_(i), max_rows_ );
                  IF where_in_.count = 1 THEN
                      IF where_in_(1) IS NOT NULL THEN
                          IF length(where_in_(1)) + length(where_in_str_) > 32000 THEN
                              Error_Api.Error( 'TOO_MANY_IN_PARAMETER', 'Too many values in IN condition.' );
                          END IF;
                          where_in_str_ := where_in_str_|| CASE WHEN where_in_str_ IS NOT NULL THEN ' AND ' ELSE '' END ||where_in_(1);
                      END IF;
                  ELSE
                      IF where_in_loop_ IS NOT NULL THEN
                          Error_Api.Error( 'TOO_MANY_IN_PARAMETER', 'Too many values in IN condition.' );
                      END IF;
                      where_in_loop_ := where_in_;
                  END IF;
              END IF;
          END LOOP;
          IF where_in_str_ IS NOT NULL AND FND_API.Log_Is_On() THEN
              FND_API.Log( '---- WHERE_IN len='||length(where_in_str_) );
              FND_API.Log( where_in_str_ );
          END IF;
       END;
              
  BEGIN 
      IF (skip_ = 'Y') OR (instr(where_,'= ''''') > 0) THEN
          RETURN;
      END IF;
      --FND_api.log_tab_on();
      --utl_http.set_persistent_conn_support(TRUE, 10);

      query_rec_.table_names_ := Name_Tab();
      query_rec_.table_to_query_idx_ := Idx_Tab();
      query_rec_.table_to_return_idx_ := Idx_Tab();
      query_rec_.query_names_ := Name_Tab();
      query_rec_.query_names_idx_ := Idx_Tab();
      

      --  'COL1=>COL2:NR'   =>  tables ...
      Build_Name_List( UPPER(columns_),
                       query_rec_.table_names_,
                       query_rec_.query_names_,
                       query_rec_.query_names_idx_,
                       1 );
      query_rec_.table_to_query_idx_.Extend( query_rec_.table_names_.count );
      FOR i IN 1..query_rec_.table_names_.count LOOP
          query_rec_.table_to_query_idx_( i ) := i;
      END LOOP;

      IF sub_query1_ IS NOT NULL THEN
          sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query1_ );
          IF sub_query2_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query2_ );
          END IF;
          IF sub_query3_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query3_ );
          END IF;
          IF sub_query4_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query4_ );
          END IF;
          IF sub_query5_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query5_ );
          END IF;
          IF sub_query6_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query6_ );
          END IF;
          IF sub_query7_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query7_ );
          END IF;
          IF sub_query8_ IS NOT NULL THEN
              sub_query_(sub_query_.count + 1) := Init_Sub_Query_( query_rec_, sub_query8_ );
          END IF;
              
          queue_length_   := def_queue_length_;
          queue_count_    := 0;

          Init_Where_In_Condition(); --where_in_str_   := ...    where_in_loop_ := ...
      END IF;
      Finish_Names(query_rec_, sub_query_);
      
      IF skip_ = '_' THEN
          attr_obj_ := AttrS_Obj();
          attr_obj_.count_  := query_rec_.return_names_count_;
          attr_obj_.names_  := query_rec_.return_names_;
          attr_obj_.values_ := string_tab();
          attr_obj_.values_.Extend( query_rec_.return_names_count_ );
          PIPE ROW(attr_obj_);
          RETURN;
      END IF;
/*
DBMS_output.put_line( '****  table_names_ '||query_rec_.table_names_.count );
FOR i IN 1..query_rec_.table_names_.count LOOP
    DBMS_output.put_line( i||' '||query_rec_.table_names_(i) );
END LOOP;

DBMS_output.put_line( '****  table_to_query_idx_ '||query_rec_.table_to_query_idx_.count );
FOR i IN 1..query_rec_.table_to_query_idx_.count LOOP
    DBMS_output.put_line( i||' '||query_rec_.table_to_query_idx_(i) );
END LOOP;

DBMS_output.put_line( '****  table_to_return_idx_ '||query_rec_.table_to_return_idx_.count );
FOR i IN 1..query_rec_.table_to_return_idx_.count LOOP
    DBMS_output.put_line( i||' '||query_rec_.table_to_return_idx_(i) );
END LOOP;

DBMS_output.put_line( '****  query_names_ '||query_rec_.query_names_.count );
FOR i IN 1..query_rec_.query_names_.count LOOP
    DBMS_output.put_line( i||' '||query_rec_.query_names_(i) );
END LOOP;

DBMS_output.put_line( '****  query_names_idx_ '||query_rec_.query_names_idx_.count );
FOR i IN 1..query_rec_.query_names_idx_.count LOOP
    DBMS_output.put_line( i||' '||query_rec_.query_names_idx_(i) );
END LOOP;
*/     

      IF where_list_ IS NOT NULL THEN
          IF where_in_str_ IS NOT NULL THEN
              where_in_str_ := where_in_str_||' AND ';
          END IF;
          FOR i IN 1..where_list_.count LOOP
              where_in_str_ := where_in_str_ || where_list_(i);
          END LOOP;
      END IF;          

      sap_table_name_ := Trim(Upper(table_name_));
      cache_id_ := NULL;
      IF sap_table_name_ LIKE 'CACHE:%' THEN
          sap_table_name_ := trim(substr(sap_table_name_, 7));
      ELSIF sap_table_name_ LIKE 'LCACHE:%' THEN
          sap_table_name_ := trim(substr(sap_table_name_, 8));
          IF where_in_str_ IS NULL AND where_in_loop_ IS NULL THEN
              cache_id_ := Add_Cache( cache_type_      => 'FULL',
                                      table_name_      => sap_table_name_,
                                      columns_key_     => '',
                                      columns_         => Join_Columns( query_rec_.table_names_ ),
                                      where_           => Change_Where_Condition(Change_Property( where_ )),
                                      next_update_sec_ => table_cache_time_,
                                      wait_            => 'Y' );          
              IF cache_id_ IS NOT NULL AND FND_Api.Log_Is_On() THEN
                  FND_API.Log( 'FullCache: '||
                               'SELECT '||CASE WHEN length(columns_) > 100 THEN substr(columns_,1,100)||' ...' ELSE columns_ END ||
                               '  FROM  '||table_name_||'  WHERE '||Change_Where_Condition(Change_Property( where_ ))  );
              END IF;
          END IF;
      END IF;

      attr_obj_ := AttrS_Obj();
      attr_obj_.count_  := query_rec_.return_names_count_;
      attr_obj_.names_  := query_rec_.return_names_;
      attr_obj_.values_ := string_tab();
      attr_obj_.values_.Extend( query_rec_.return_names_count_ );
      IF name_cache_ = 'Y' AND max_rows_> 1 AND query_rec_.table_names_.count > 1 THEN
          attr_obj_.hash_cache_id_ := Attr_Api.Create_Idx_Cache( attr_obj_.names_ ); 
      END IF;


      IF cache_id_ IS NULL THEN
          where_in_loop_nr_ := 0;
          LOOP
              where_in_loop_nr_ := where_in_loop_nr_ + 1;

              DECLARE
                  all_where_  VARCHAR2(32767);
                  info_       VARCHAR2(2000);
              BEGIN
                  all_where_ := Change_Where_Condition(Change_Property( where_ ));
                  IF where_in_str_ IS NOT NULL THEN
                      all_where_ := all_where_||CASE WHEN all_where_ IS NOT NULL THEN ' AND ' ELSE '' END||where_in_str_;
                  END IF;
                  IF where_in_loop_ IS NOT NULL AND where_in_loop_(where_in_loop_nr_) IS NOT NULL THEN
                      all_where_ := all_where_||CASE WHEN all_where_ IS NOT NULL THEN ' AND ' ELSE '' END||where_in_loop_(where_in_loop_nr_);
                  END IF;
                  Query_Get_Xml( from_cache_,
                                 response_xml_, 
                                 sap_table_name_, 
                                 query_rec_.table_names_, 
                                 all_where_,
                                 max_rows_,
                                 info_ => table_name_);
                  IF FND_API.Log_Is_On() THEN
                      FND_API.Log( CASE WHEN from_cache_ THEN ' XMLCache: ' ELSE '      SAP: ' END||
                                   'SELECT '||CASE WHEN length(columns_) > 100 THEN substr(columns_,1,100)||' ...' ELSE columns_ END ||
                                   '  FROM  '||table_name_||'  WHERE '||
                                   CASE WHEN length(all_where_) > 100 THEN substr(all_where_,1,100)||' ...' ELSE all_where_ END );
                  END IF;
              END;
          
              one_column_ := query_rec_.table_names_.count = 1;

              response_len_ := DBMS_lob.getlength(response_xml_);
              IF response_len_ <= 32767 THEN
                  response_str_ := response_xml_;
              END IF;
              IF NOT one_column_ THEN
                  IF response_len_ > 32767 THEN
                      response_str_ := DBMS_LOB.SUBSTR( response_xml_, amount => 32767, offset => response_len_-20000 );
                      response_str_ := substr( response_str_, instr( response_str_, '<item><FIELDNAME>')-1);
                  END IF;
              END IF;
              Read_Columns( response_str_ );  -- => columns_tab_

              max_length_ := (columns_tab_(columns_tab_.count).col_OFFSET + columns_tab_(columns_tab_.count).col_LENGTH + 15);

              IF one_column_ THEN
                 one_column_idx_ := query_rec_.table_to_return_idx_(1);
              END IF;

              table_name_count_ := query_rec_.table_names_.count;
              start_xml_ := 1;
              WHILE start_xml_ < response_len_ LOOP
                  IF response_len_ > 32767 THEN
                      response_str_ := DBMS_LOB.SUBSTR( response_xml_, amount => 32767, offset => start_xml_ );
                  END IF;
                  stop_str_  := instr( response_str_, '</WA></item>', -1, 1 );
                  EXIT WHEN stop_str_ = 0;
                  IF (response_len_ > 32767) AND (start_xml_ + length( response_str_ ) < response_len_) THEN
                      start_xml_ := start_xml_ + stop_str_ - 1 + 12;
                  ELSE
                      start_xml_ := start_xml_ + 32767;
                  END IF;
                  
                    start_ := 1;
                    start_ := instr( response_str_, '<item><WA>', start_) + 10;
                    LOOP                        
                        value_ := substr( response_str_, start_, max_length_ );
                        stop_  := instr( value_, '</WA></item>', 1) -1;
                        value_ := substr( value_, 1, stop_ );
                        IF instr(value_,chr(38)) > 0 THEN
                            value_ := utl_i18n.unescape_reference( value_ );
                        END IF;
                        IF one_column_ THEN
                            attr_obj_.values_( one_column_idx_ ) := RTRIM(value_);
                        ELSE
                            FOR i IN 1..query_rec_.table_names_.count LOOP
                                attr_obj_.values_( query_rec_.table_to_return_idx_(i) ) := 
                                    RTRIM(substr(value_, columns_tab_(i).col_OFFSET, columns_tab_(i).col_LENGTH) );
                            END LOOP;
                        END IF;
                        IF sub_query1_ IS NULL THEN
                            PIPE ROW (attr_obj_);
                        ELSE
                            queue_count_ := queue_count_ + 1;
                            queue_(queue_count_) := attr_obj_.values_;
                            IF queue_count_ >= queue_length_ THEN
                                FOR i IN 1..sub_query_.count LOOP
                                   Calc_Sub_Query_Value_( query_rec_, queue_, queue_count_, sub_query_(i) );
                                END LOOP;
                                FOR i IN 1..queue_count_ LOOP
                                    IF queue_(i)( query_rec_.del_idx_ ) = 'Y' THEN
                                        NULL;
                                    ELSE
                                        attr_obj_.values_ := queue_(i);
                                        PIPE ROW (attr_obj_);
                                    END IF;
                                END LOOP;
                                queue_count_ := 0;
                            END IF;
                        END IF;

                        start_ := start_ + stop_ + 22;
                        EXIT WHEN start_ > stop_str_;
                    END LOOP;
               END LOOP;
               
          
              IF sub_query1_ IS NOT NULL THEN
                   FOR i IN 1..sub_query_.count LOOP
                        Calc_Sub_Query_Value_( query_rec_, queue_, queue_count_, sub_query_(i) );
                   END LOOP;
                   FOR i IN 1..queue_count_ LOOP
                        IF queue_(i)( query_rec_.del_idx_ ) = 'Y' THEN
                            NULL;
                        ELSE
                            attr_obj_.values_ := queue_(i);
                            PIPE ROW (attr_obj_);
                        END IF;
                   END LOOP;
                   queue_count_ := 0;
              END IF;

          EXIT WHEN (where_in_loop_ IS NULL) OR (where_in_loop_nr_ = where_in_loop_.count);
          END LOOP;       
      ELSE --cache_id_ IS NOT NULL THEN
          FND_Api.Log( 'Query from cache ', cache_id_ );
          DECLARE
              found_               BOOLEAN;
              table_name_idx_      IDX_TAB;
              one_column_name_idx_ PLS_INTEGER;
          BEGIN
              FOR r_ IN (SELECT *
                           FROM sap_cache_head_tab 
                          WHERE cache_id = cache_id_ ) LOOP                      
                  table_name_idx_ := IDX_TAB();
                  table_name_idx_.Extend( query_rec_.table_names_.count );
                  FOR i IN 1..query_rec_.table_names_.count LOOP
                      found_ := FALSE;
                      FOR j IN 1..r_.table_columns_count LOOP
                          IF r_.table_columns_tab(j) = query_rec_.table_names_(i) THEN
                              table_name_idx_(i) := j;
                              found_ := TRUE;
                              EXIT;
                          END IF;
                      END LOOP;
                      IF NOT found_ THEN
                          Error_Api.Error( 'SAP_COL_NOT_FOUND', 'Not found column :P1 in cache :P2.', query_rec_.table_names_(i), r_.cache_id );
                      END IF;
                  END LOOP;
                  IF one_column_ THEN
                      one_column_name_idx_ := table_name_idx_(1);
                  END IF;
                  
                  FOR v_ IN (SELECT t.row_values
                               FROM sap_cache_items_tab t
                              WHERE cache_id = r_.cache_id
                                AND rownum <= max_rows_ ) LOOP
                        IF one_column_ THEN
                            attr_obj_.values_( one_column_idx_ ) := v_.row_values( one_column_name_idx_ );
                        ELSE
                            FOR i IN 1..query_rec_.table_names_.count LOOP
                                attr_obj_.values_( query_rec_.table_to_return_idx_(i) ) :=  v_.row_values( table_name_idx_(i) );
                            END LOOP;
                        END IF;
                        IF sub_query1_ IS NULL THEN
                            PIPE ROW (attr_obj_);
                        ELSE
                            queue_count_ := queue_count_ + 1;
                            queue_(queue_count_) := attr_obj_.values_;
                            IF queue_count_ >= queue_length_ THEN
                                FOR i IN 1..sub_query_.count LOOP
                                   Calc_Sub_Query_Value_( query_rec_, queue_, queue_count_, sub_query_(i) );
                                END LOOP;
                                FOR i IN 1..queue_count_ LOOP
                                    IF queue_(i)( query_rec_.del_idx_ ) = 'Y' THEN
                                        NULL;
                                    ELSE
                                        attr_obj_.values_ := queue_(i);
                                        PIPE ROW (attr_obj_);
                                    END IF;
                                END LOOP;
                                queue_count_ := 0;
                            END IF;
                        END IF;
                  END LOOP;

                  IF sub_query1_ IS NOT NULL THEN
                       FOR i IN 1..sub_query_.count LOOP
                            Calc_Sub_Query_Value_( query_rec_, queue_, queue_count_, sub_query_(i) );
                       END LOOP;
                       FOR i IN 1..queue_count_ LOOP
                            IF queue_(i)( query_rec_.del_idx_ ) = 'Y' THEN
                                NULL;
                            ELSE
                                attr_obj_.values_ := queue_(i);
                                PIPE ROW (attr_obj_);
                            END IF;
                       END LOOP;
                       queue_count_ := 0;
                  END IF;
              END LOOP;
          END;
      END IF;
      
      RETURN;
      /*
  EXCEPTION 
      WHEN NO_DATA_NEEDED THEN
          NULL;
      WHEN OTHERS THEN
      DECLARE
          error_id_  NUMBER;
      BEGIN
          error_id_ := Error_Api.Start_Log_Error( SQLERRM );
          Error_Api.Log( error_id_, 'PROCEDURE', 'SAP_API.QUERY' );
          Error_Api.Log( error_id_, 'table_name_', table_name_ );
          Error_Api.Log( error_id_, 'columns_', columns_ );
          Error_Api.Log( error_id_, 'where_', where_ );
          IF where_list_ IS NOT NULL THEN
              FOR i_ IN 1..where_list_.count LOOP
                  Error_Api.Log( error_id_, 'where_list_('||i_||')', where_list_(i_) );
              END LOOP;
          END IF;
          Error_Api.Log( error_id_, 'max_rows_', max_rows_ );
          Error_Api.Log( error_id_, 'skip_', skip_ );
          Error_Api.Log( error_id_, 'name_cache_', name_cache_  );          
          Error_Api.Log( error_id_, 'sub_query1_', sub_query1_ );
          Error_Api.Log( error_id_, 'sub_query2_', sub_query2_ );
          Error_Api.Log( error_id_, 'sub_query3_', sub_query3_ );
          Error_Api.Log( error_id_, 'sub_query4_', sub_query4_ );
          Error_Api.Log( error_id_, 'sub_query5_', sub_query5_ );
          Error_Api.Log( error_id_, 'sub_query6_', sub_query6_ );
          Error_Api.Log( error_id_, 'sub_query7_', sub_query7_ );
          Error_Api.Log( error_id_, 'sub_query8_', sub_query8_ );
      END;
      RAISE;
    */  
  END;
                  
  FUNCTION Sub_Query     ( table_name_     IN VARCHAR2,
                           columns_        IN VARCHAR2,
                           join_columns_   IN VARCHAR2,
                           where_          IN VARCHAR2,
                           pre_load_where_ IN VARCHAR2 DEFAULT NULL,
                           use_cache_      IN VARCHAR2 DEFAULT 'Y',
                           exists_         IN VARCHAR2 DEFAULT NULL, -- Y / N
                           mode_           IN VARCHAR2 DEFAULT NULL  -- MAX / MIN / SUM / COUNT / EXISTS / NOT EXISTS / LIST / SKIP 
                                                                     -- IN / NOT IN 
                          ) RETURN AttrS_Obj IS
      attr_obj_  AttrS_Obj;
  BEGIN
      attr_obj_  := AttrS_Obj();
      attr_obj_.Add_( 'TABLE_NAME',    upper(Trim(table_name_)) );
      attr_obj_.Add_( 'COLUMNS',       upper(columns_) );
      attr_obj_.Add_( 'JOIN_COLUMNS',  upper(join_columns_) );
      attr_obj_.Add_( 'WHERE',         where_ );
      attr_obj_.Add_( 'PRE_LOAD_WHERE',pre_load_where_ );
      attr_obj_.Add_( 'USE_CACHE',     UPPER(use_cache_) );
      attr_obj_.Add_( 'EXISTS',        UPPER(exists_) );
      attr_obj_.Add_( 'MODE',          UPPER(mode_) );
      RETURN attr_obj_;
  END;

  FUNCTION Record_Exists(  table_name_  IN VARCHAR2,
                           where_       IN VARCHAR2 ) RETURN VARCHAR2 IS        -- TRUE/FALSE  
      tmp_   NUMBER;
      CURSOR check_( where_ IN VARCHAR2 ) IS
      SELECT 1
        FROM TABLE( SAP_API.Query( table_name_ => table_name_,
                                   columns_    => '',
                                   where_      => where_,
                                   max_rows_   => 1,
                                   name_cache_ => 'N'
                             )) t;
  BEGIN
     OPEN  check_( Change_Where_Condition( Change_Property( where_ ) ) );
     FETCH check_ INTO tmp_;
     CLOSE check_; 
     IF tmp_ IS NULL THEN
        RETURN 'FALSE';
     ELSE
        RETURN 'TRUE';
     END IF;
  END;
  
  FUNCTION Table_List   ( table_name_like_  IN VARCHAR2,
                          description_like_ IN VARCHAR2,
                          empty_tables_     IN VARCHAR2 DEFAULT 'Y',
                          language_         IN VARCHAR2 DEFAULT 'L' ) RETURN two_string_tab PIPELINED IS
       
      table_name_     VARCHAR2(50);
      description_    VARCHAR2(500);
      
      FUNCTION Get_Description( table_name_ IN VARCHAR2, tab_description_ IN VARCHAR2, columns_ IN VARCHAR2 ) RETURN VARCHAR2 IS
         description_    VARCHAR2(200);
         tmp_            VARCHAR2(600); 
      BEGIN
          description_ := tab_description_;
          
          BEGIN
          tmp_  := SAP_API.Quick_Value( table_name_     => table_name_,
                                        return_column_  => columns_,
                                        where_          => '' );
          IF tmp_ IS NULL THEN
              description_ := '-'||description_;
          ELSE
              description_ := '*'||description_;
          END IF;
          
          EXCEPTION WHEN OTHERS THEN
              description_ := '?'||description_;
          END;
          
          RETURN description_;
      END;
  BEGIN
      IF nvl(description_like_,'%') = '%' THEN
          FOR r_ IN ( SELECT t.Get('TABNAME')      table_name,
                             t.Get('DESCRIPTION')  description,
                             t.Get('FIELDNAME1')||', '||t.Get('FIELDNAME2')   tab_columns
                        FROM TABLE( SAP_API.Query( table_name_ => 'DD02L',
                                                   columns_    => 'TABNAME',
                                                   where_      => CASE WHEN Nvl(table_name_like_,'%') != '%' 
                                                                         THEN 'TABNAME LIKE '''||table_name_like_||'''  ' 
                                                                       ELSE '' END,
                                                   sub_query1_ => Sap_Api.Sub_Query( table_name_    => 'DD02T',
                                                                                     columns_       => 'DDTEXT => DESCRIPTION',
                                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                                     where_         => 'DDLANGUAGE = '''|| language_ ||''' ',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query2_ => Sap_Api.Sub_Query( table_name_    => 'DD03L',
                                                                                     columns_       => 'FIELDNAME => FIELDNAME1', 
                                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                                     where_         => 'POSITION = 1 ',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query3_ => Sap_Api.Sub_Query( table_name_    => 'DD03L',
                                                                                     columns_       => 'FIELDNAME => FIELDNAME2', 
                                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                                     where_         => 'POSITION = 2 ',
                                                                                     use_cache_     => 'N' ),
                                                   max_rows_   => 800000
                                   )) t 
                      ) LOOP
              table_name_   := r_.table_name;
              IF empty_tables_ != 'N' THEN
                      PIPE ROW ( two_string_rec( table_name_, r_.description ) );
              ELSE
                  description_  := Get_Description(table_name_, r_.description, r_.tab_columns);
                  IF substr(description_,1,1) != '-' THEN
                      PIPE ROW ( two_string_rec( table_name_, description_ ) );
                  END IF;
              END IF;
          END LOOP;
      ELSE
          FOR r_ IN ( SELECT t.Get('TABNAME')      table_name,
                             t.Get('DDTEXT')       description,
                             t.Get('FIELDNAME1')||', '||t.Get('FIELDNAME2')   tab_columns
                        FROM TABLE( SAP_API.Query( table_name_ => 'DD02T',
                                                   columns_    => 'TABNAME, DDTEXT',
                                                   where_      => 'DDLANGUAGE = '''|| language_ ||''' AND '||
                                                                  CASE WHEN Nvl(table_name_like_,'%') != '%' 
                                                                         THEN 'TABNAME LIKE '''||table_name_like_||''' AND ' 
                                                                       ELSE '' END ||
                                                                  ' DDTEXT LIKE '''||description_like_||''' ',
                                                   sub_query1_ => Sap_Api.Sub_Query( table_name_    => 'DD03L',
                                                                                     columns_       => 'FIELDNAME => FIELDNAME1',
                                                                                     join_columns_  => 'TABNAME = TABNAME', 
                                                                                     where_         => 'POSITION = 1 ',
                                                                                     use_cache_     => 'N',
                                                                                     mode_          => CASE WHEN empty_tables_ != 'N' THEN 'SKIP' ELSE '' END  ),
                                                   sub_query2_ => Sap_Api.Sub_Query( table_name_    => 'DD03L',
                                                                                     columns_       => 'FIELDNAME => FIELDNAME2',
                                                                                     join_columns_  => 'TABNAME = TABNAME', 
                                                                                     where_         => 'POSITION = 2 ',
                                                                                     use_cache_     => 'N',
                                                                                     mode_          => CASE WHEN empty_tables_ != 'N' THEN 'SKIP' ELSE '' END  ),
                                                   max_rows_   => 800000
                                   )) t 
                      ) LOOP
              table_name_   := r_.table_name;
              IF empty_tables_ != 'N' THEN
                  description_  := r_.description;
                  PIPE ROW ( two_string_rec( table_name_, description_ ) );
              ELSE
                  description_  := Get_Description(table_name_, r_.description, r_.tab_columns);
                  IF substr(description_,1,1) != '-' THEN
                      PIPE ROW ( two_string_rec( table_name_, description_ ) );
                  END IF;
              END IF;
          END LOOP;
      END IF;
      RETURN;
  END;

  FUNCTION Column_List   ( table_name_like_  IN VARCHAR2,
                          description_like_ IN VARCHAR2,
                          empty_tables_     IN VARCHAR2 DEFAULT 'N',
                          language_         IN VARCHAR2 DEFAULT 'L' ) RETURN two_string_tab PIPELINED IS
       
      table_name_     VARCHAR2(50);
      description_    VARCHAR2(500);
      
      FUNCTION Get_Description( table_name_ IN VARCHAR2, tab_description_ IN VARCHAR2, columns_ IN VARCHAR2 ) RETURN VARCHAR2 IS
         description_    VARCHAR2(200);
         tmp_            VARCHAR2(600); 
      BEGIN
          description_ := tab_description_;
          
          BEGIN
          tmp_  := SAP_API.Quick_Value( table_name_     => table_name_,
                                        return_column_  => columns_,
                                        where_          => '' );
          IF tmp_ IS NULL THEN
              description_ := '-'||description_;
          ELSE
              description_ := '*'||description_;
          END IF;
          
          EXCEPTION WHEN OTHERS THEN
              description_ := '?'||description_;
          END;
          
          RETURN description_;
      END;
  BEGIN

          FOR r_ IN ( SELECT t.Get('TABNAME')      table_name,
                             t.Get('TAB_DESCRIPTION') table_description,
                             t.Get('FIELDNAME')    field_name,
                             t.Get('DDTEXT')       col_description,
                             t.Get('FIELDNAME1')||', '||t.Get('FIELDNAME2')   tab_columns
                        FROM TABLE( SAP_API.Query( table_name_ => 'DD03T',
                                                   columns_    => 'TABNAME, FIELDNAME, DDTEXT',
                                                   where_      => 'DDLANGUAGE = '''|| language_ ||''' AND '||
                                                                  CASE WHEN Nvl(table_name_like_,'%') != '%' 
                                                                         THEN 'TABNAME LIKE '''||table_name_like_||''' AND ' 
                                                                       ELSE '' END ||
                                                                  ' DDTEXT LIKE '''||description_like_||''' ',
                                                   sub_query1_ => Sap_Api.Sub_Query( table_name_    => 'DD03L',
                                                                                     columns_       => 'FIELDNAME => FIELDNAME1',
                                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                                     where_         => 'POSITION = 1 ',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query2_ => Sap_Api.Sub_Query( table_name_    => 'DD03L',
                                                                                     columns_       => 'FIELDNAME => FIELDNAME2',
                                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                                     where_         => 'POSITION = 2 ',
                                                                                     use_cache_     => 'N' ),
                                                   sub_query3_ => Sap_Api.Sub_Query( table_name_    => 'DD02T',
                                                                                     columns_       => 'DDTEXT => TAB_DESCRIPTION',
                                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                                     where_         => 'DDLANGUAGE = '''|| language_ ||''' ',
                                                                                     use_cache_     => 'N' ),
                                                   max_rows_   => 800000
                                   )) t 
                      ) LOOP
              table_name_   := r_.table_name;
              IF empty_tables_ != 'N' THEN
                  PIPE ROW ( two_string_rec( rpad(table_name_,35)||' - '||r_.table_description, rpad(r_.field_name,25)||' - '||r_.col_description ) );
              ELSE
                  description_  := Get_Description(table_name_, r_.table_description, r_.tab_columns);
                  IF substr(description_,1,1) != '-' THEN
                      PIPE ROW ( two_string_rec( rpad(table_name_,35)||' - '||description_, rpad(r_.field_name,25)||' - '||r_.col_description ) );
                  END IF;
              END IF;
          END LOOP;
      RETURN;
  END;

  
  FUNCTION Table_Detail ( table_name_      IN VARCHAR2, 
                          print_reference_ IN VARCHAR2 DEFAULT 'N',
                          language_        IN VARCHAR2 DEFAULT 'L',
                          ref_             IN VARCHAR2 DEFAULT NULL ) RETURN RFC_DESC_TAB PIPELINED IS
      TYPE TEXT_REC IS RECORD (
          key_    VARCHAR2(50),
          value_  VARCHAR2(200) );
      TYPE TEXT_TAB IS TABLE OF TEXT_REC INDEX BY PLS_INTEGER;


      rec_             RFC_DESC_REC;
      fields_desc_     TEXT_TAB;
      fields_relation_ TEXT_TAB;
      fields_text_     TEXT_TAB;
      num_             NUMBER;
      table_rel_       VARCHAR2(500);
      help_            VARCHAR2(5000);

      /*
      CURSOR field_rel IS
      SELECT t.Get('FIELDNAME')   fieldname,
             t.Get('CHECKTABLE')  rel_table
        FROM TABLE( Sap_Api.Query(table_name_ => 'DD08L', 
                                  columns_    => 'FIELDNAME, CHECKTABLE', 
                                  where_      => 'TABNAME = '''||upper(trim(table_name_))||''' ', 
                                  max_rows_   => 1000 )) t;
      */
      FUNCTION Get_Desc( key_ IN VARCHAR2, tab_ IN OUT NOCOPY TEXT_TAB ) RETURN VARCHAR2 IS
      BEGIN
          FOR i IN 1..tab_.count LOOP
              IF tab_(i).key_ = key_ THEN
                  RETURN tab_(i).value_;
              END IF;
          END LOOP;
          RETURN NULL;
      END;
  BEGIN
      SELECT t.Get('FIELDNAME')   fieldname,
             t.Get('CHECKTABLE')  rel_table
      BULK COLLECT INTO fields_relation_
       FROM TABLE( Sap_Api.Query(table_name_ => 'DD08L', 
                                 columns_    => 'FIELDNAME, CHECKTABLE', 
                                 where_      => 'TABNAME = '''||upper(trim(table_name_))||''' ', 
                                 max_rows_   => 1000 )) t;
                                 
      SELECT t.Get('FIELDNAME') FIELDNAME, 
             t.Get('DDTEXT')    DDTEXT
      BULK COLLECT INTO fields_desc_
       FROM TABLE( Sap_Api.Query(table_name_ => 'DD03T', 
                                 columns_    => 'FIELDNAME, DDTEXT', 
                                 where_      => 'DDLANGUAGE = '''|| language_ ||''' AND TABNAME = '''||upper(trim(table_name_))||''' ', 
                                 max_rows_   => 1000 )) t;
            
      
      
      rec_.name        := '*** '||upper(trim(table_name_))||' ***';
      rec_.description := SAP_API.Quick_Value( table_name_     => 'DD02T',
                                               return_column_  => 'DDTEXT',
                                               where_          => 'DDLANGUAGE = '''|| language_ ||''' AND TABNAME = '''||upper(trim(table_name_))||''' ' );

      help_ := '';
      FOR t_ IN (SELECT t.Get('TABNAME')     TABNAME, 
                        t.Get('FIELDNAME')   fieldname,
                        t.Get('DESCRIPTION') DESCRIPTION,
                        t.Get('FRKART')      FRKART
                   FROM TABLE( Sap_Api.Query(table_name_ => 'DD08L', 
                                             columns_    => 'TABNAME, FIELDNAME, CHECKTABLE, FRKART', 
                                             where_      => 'FRKART IN (''KEY'',''TEXT'') AND CHECKTABLE = '''||upper(trim(table_name_))||''' ', 
                                             max_rows_   => 1000,
                                             sub_query1_ => Sap_Api.Sub_Query( 
                                                                     table_name_    => 'DD02T',
                                                                     columns_       => 'DDTEXT => DESCRIPTION',
                                                                     join_columns_  => 'TABNAME = TABNAME',
                                                                     where_         => 'DDLANGUAGE = '''|| language_ ||''' ',
                                                                     use_cache_     => 'N' )
                                              )) t
                                    ORDER BY FRKART DESC,
                                             CASE WHEN instr(TABNAME,'/') > 0 THEN 2 ELSE 1 END,
                                             CASE WHEN substr(table_name_,1,2) = substr(TABNAME,1,2) THEN 1 ELSE 2 END,
                                             CASE WHEN length(TABNAME) < 10 AND length(translate(TABNAME,'a1234567890','a')) = length(TABNAME) THEN 1 ELSE 2 END
                    ) LOOP
          IF t_.FRKART = 'TEXT' THEN
              num_ := fields_text_.count + 1;
              fields_text_( num_ ).key_ := t_.fieldname;
              fields_text_( num_ ).value_ := t_.TABNAME||' - '||t_.DESCRIPTION||chr(13)||chr(10);
          ELSE
              help_ := help_||rpad(t_.TABNAME,25)||t_.DESCRIPTION||chr(13)||chr(10);
          END IF;
          IF length(help_) > 3900 THEN
              EXIT;
          END IF;
      END LOOP;
      rec_.help := substr(help_, 1, 3900);
      rec_.param_type  := 'TABLE';
      PIPE ROW (rec_ );
      rec_.help := '';

      FOR r_ IN (SELECT t.Get('POSITION')   POSITION,
                        t.Get('FIELDNAME')  FIELDNAME, 
                        t.Get('ROLLNAME')   ROLLNAME, 
                        t.Get('DATATYPE')   DATATYPE,
                        t.Get('INTLEN')     INTLEN,
                        t.Get('KEYFLAG')    KEYFLAG,
                        t.Get('DDTEXT')     FIELD_DESC
                   FROM TABLE( Sap_Api.Query(table_name_ => 'DD03L', 
                                             columns_    => 'FIELDNAME, DATATYPE, INTLEN, POSITION, ROLLNAME, KEYFLAG', 
                                             where_      => 'TABNAME = '''||upper(trim(table_name_))||''' ',
                                             max_rows_   => 1000,
                               sub_query1_ => Sap_Api.Sub_Query( 
                                                   table_name_    => 'DD04T',
                                                   columns_       => 'DDTEXT',
                                                   join_columns_  => 'ROLLNAME = ROLLNAME',
                                                   where_         => 'DDLANGUAGE = '''|| language_ ||''' ' )
                                              )) t 
                   ORDER BY 1
                   ) LOOP
           table_rel_ := Get_Desc( r_.FIELDNAME, fields_relation_ );
           rec_.name        := r_.FIELDNAME;
           rec_.param_type  := CASE WHEN r_.KEYFLAG = 'X' THEN '*' ELSE '' END || table_rel_;
           rec_.data_type   := r_.DATATYPE;
           rec_.data_length := to_number(r_.INTLEN);
           rec_.optional    := '';
           IF r_.field_desc IS NOT NULL THEN
               rec_.description := r_.field_desc;
           ELSIF (r_.ROLLNAME IS NOT NULL) THEN
               rec_.description := Get_Desc( r_.ROLLNAME, fields_desc_ );
           ELSE
               rec_.description := Get_Desc( r_.FIELDNAME, fields_desc_ );
           END IF;
           help_     := Get_Desc( r_.FIELDNAME, fields_text_ );
           IF print_reference_ IN ('Y','T','TRUE') THEN
               IF     r_.DATATYPE IN ('CHAR','NUMC')
                  --AND table_rel_ IS NULL 
                  AND (ref_ IS NULL OR ref_ LIKE r_.FIELDNAME||' %')
                  AND (to_number(nvl(r_.INTLEN,0)) >= 6 OR r_.KEYFLAG = 'X')
                  AND r_.FIELDNAME NOT IN ('MANDT','BNAME','NAME','DDTEXT','STEXT','POSITION','POSNR') 
               THEN
                   IF help_ IS NOT NULL THEN
                       help_ := help_ ||'----------'||chr(13)||chr(10);
                   END IF;
                   IF table_rel_ IS NULL THEN 
                       FOR t_ IN ((SELECT t.Get('TABNAME')       TABNAME,
                                          t.Get('DESCRIPTION')   DESCRIPTION
                                    FROM TABLE( Sap_Api.Query(table_name_ => 'DD03L', 
                                                              columns_    => 'TABNAME', 
                                                              where_      => 'FIELDNAME = '''||r_.FIELDNAME||''' AND (KEYFLAG = ''X'') '||
                                                                             ' AND DATATYPE = '''||r_.DATATYPE||''' AND INTLEN = '''||r_.INTLEN||''''||
                                                                             ' AND (TABNAME NE '''||upper(trim(table_name_))||''') ',
                                                              max_rows_   => 1000,
                                                              sub_query1_ => Sap_Api.Sub_Query( 
                                                                              table_name_    => 'DD02T',
                                                                              columns_       => 'DDTEXT => DESCRIPTION',
                                                                              join_columns_  => 'TABNAME = TABNAME',
                                                                              where_         => 'DDLANGUAGE = '''|| language_ ||''' ',
                                                                              use_cache_     => 'N' )
                                           )) t)
                                    ORDER BY CASE WHEN instr(TABNAME,'/') > 0 THEN 2 ELSE 1 END,
                                             CASE WHEN substr(table_name_,1,2) = substr(TABNAME,1,2) THEN 1 ELSE 2 END,
                                             CASE WHEN length(TABNAME) < 10 AND length(translate(TABNAME,'a1234567890','a')) = length(TABNAME) THEN 1 ELSE 2 END
                                             ) LOOP
                               IF ref_ IS NULL THEN
                                   help_ := help_||rpad(t_.TABNAME,25)||t_.DESCRIPTION||chr(13)||chr(10);
                               ELSE
                                  IF Record_Exists( t_.TABNAME, ref_ ) = 'TRUE' THEN
                                     help_ := help_||rpad(t_.TABNAME,25)||t_.DESCRIPTION||chr(13)||chr(10);
                                  END IF;
                               END IF;
                           IF length(help_) > 3900 THEN
                               help_ := substr(help_, 1, 3900) || ' ... ';
                               EXIT;
                           END IF;
                       END LOOP;
                   ELSE
                       FOR t_ IN ((SELECT t.Get('TABNAME')       TABNAME,
                                          t.Get('DESCRIPTION')   DESCRIPTION
                                    FROM TABLE( Sap_Api.Query(table_name_ => 'DD08L', 
                                                              columns_    => 'TABNAME', 
                                                              where_      => 'FRKART = ''KEY'' AND CHECKTABLE = '''||table_rel_||''' '||
                                                                             ' AND FIELDNAME = '''||r_.FIELDNAME||''' '||
                                                                             ' AND (TABNAME NE '''||upper(trim(table_name_))||''') ',
                                                              max_rows_   => 1000,
                                                              sub_query1_ => Sap_Api.Sub_Query( 
                                                                              table_name_    => 'DD02T',
                                                                              columns_       => 'DDTEXT => DESCRIPTION',
                                                                              join_columns_  => 'TABNAME = TABNAME',
                                                                              where_         => 'DDLANGUAGE = '''|| language_ ||''' ',
                                                                              use_cache_     => 'N' )
                                           )) t)
                                    ORDER BY CASE WHEN instr(TABNAME,'/') > 0 THEN 2 ELSE 1 END,
                                             CASE WHEN substr(table_name_,1,2) = substr(TABNAME,1,2) THEN 1 ELSE 2 END,
                                             CASE WHEN length(TABNAME) < 10 AND length(translate(TABNAME,'a1234567890','a')) = length(TABNAME) THEN 1 ELSE 2 END
                                             ) LOOP
                               IF ref_ IS NULL THEN
                                   help_ := help_||rpad(t_.TABNAME,25)||t_.DESCRIPTION||chr(13)||chr(10);
                               ELSE
                                  IF Record_Exists( t_.TABNAME, ref_ ) = 'TRUE' THEN
                                     help_ := help_||rpad(t_.TABNAME,25)||t_.DESCRIPTION||chr(13)||chr(10);
                                  END IF;
                               END IF;
                           IF length(help_) > 3900 THEN
                               help_ := substr(help_, 1, 3900) || ' ... ';
                               EXIT;
                           END IF;
                       END LOOP;
                   END IF;

               END IF;
           END IF;
           rec_.help := substr(help_, 1, 3990);
           
           PIPE ROW (rec_ );
      END LOOP;
      RETURN;
  END;

  FUNCTION Query_In_Background( table_name_   IN VARCHAR2,
                           columns_      IN VARCHAR2,
                           where_        IN VARCHAR2,
                           max_rows_     IN NUMBER DEFAULT 1000,
                           sub_query1_   IN AttrS_Obj DEFAULT NULL,
                           sub_query2_   IN AttrS_Obj DEFAULT NULL,
                           sub_query3_   IN AttrS_Obj DEFAULT NULL,
                           sub_query4_   IN AttrS_Obj DEFAULT NULL,
                           sub_query5_   IN AttrS_Obj DEFAULT NULL
                                                                    ) RETURN NUMBER IS
      PRAGMA AUTONOMOUS_TRANSACTION;

      columns_str_      VARCHAR2(4000);
      get_columns_str_  VARCHAR2(32000);
      session_id_       NUMBER;
  BEGIN
      session_id_ := FND_Api.Start_Session();
      FOR i IN 1..39 LOOP
         columns_str_ := columns_str_ ||', '||'S'||lpad(i,2,'0'); 
         get_columns_str_ := get_columns_str_ ||', t.Get('||i||') ';
      END LOOP;

      FND_API.Save_Attrs( sub_query1_, session_id_, 'SUB_QUERY1' );
      FND_API.Save_Attrs( sub_query2_, session_id_, 'SUB_QUERY2' );
      FND_API.Save_Attrs( sub_query3_, session_id_, 'SUB_QUERY3' );
      FND_API.Save_Attrs( sub_query4_, session_id_, 'SUB_QUERY4' );
      FND_API.Save_Attrs( sub_query5_, session_id_, 'SUB_QUERY5' );
      COMMIT;
               
      FND_Api.Background_Exec_( session_id_,
'DECLARE
 sub_query1_ AttrS_Obj;
 sub_query2_ AttrS_Obj;
 sub_query3_ AttrS_Obj;
 sub_query4_ AttrS_Obj;
 sub_query5_ AttrS_Obj;
 BEGIN
 sub_query1_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY1'' );
 sub_query2_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY2'' );
 sub_query3_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY3'' );
 sub_query4_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY4'' );
 sub_query5_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY5'' );

 INSERT INTO FND_SESSION_DATA_TAB
    (SESSION_ID, DATA_TYPE, ROW_NO '|| columns_str_ || ')
 SELECT :SESSION_ID, ''SAP'', ROWNUM '|| get_columns_str_ || '
   FROM TABLE( Sap_Api.Query( :table_name_, :columns_, :where_, :max_rows_,
                  sub_query1_ => sub_query1_, sub_query2_ => sub_query2_, sub_query3_ => sub_query3_,
                  sub_query4_ => sub_query4_, sub_query5_ => sub_query5_)  ) t;
 COMMIT;
 END;', table_name_, columns_, where_, to_char(max_rows_) );
      COMMIT;
      RETURN session_id_;
  END;

  FUNCTION Call_Obj_In_Background( 
                 rfc_name_ IN VARCHAR2,
                 param1_     IN Attr_Obj DEFAULT NULL,
                 param2_     IN Attr_Obj DEFAULT NULL,
                 param3_     IN Attr_Obj DEFAULT NULL,
                 param4_     IN Attr_Obj DEFAULT NULL,
                 param5_     IN Attr_Obj DEFAULT NULL,
                 param6_     IN Attr_Obj DEFAULT NULL,
                 param7_     IN Attr_Obj DEFAULT NULL,
                 param8_     IN Attr_Obj DEFAULT NULL,
                 param9_     IN Attr_Obj DEFAULT NULL,
                 path_       IN VARCHAR2 DEFAULT NULL           ) RETURN NUMBER IS
      PRAGMA AUTONOMOUS_TRANSACTION;

      session_id_       NUMBER;
  BEGIN
      session_id_ := FND_Api.Start_Session();
      FND_API.Save_Attr( param1_, session_id_, 'PARAM1' );
      FND_API.Save_Attr( param2_, session_id_, 'PARAM2' );
      FND_API.Save_Attr( param3_, session_id_, 'PARAM3' );
      FND_API.Save_Attr( param4_, session_id_, 'PARAM4' );
      FND_API.Save_Attr( param5_, session_id_, 'PARAM5' );
      FND_API.Save_Attr( param6_, session_id_, 'PARAM6' );
      FND_API.Save_Attr( param7_, session_id_, 'PARAM7' );
      FND_API.Save_Attr( param8_, session_id_, 'PARAM8' );
      FND_API.Save_Attr( param9_, session_id_, 'PARAM9' );
      COMMIT;

      FND_Api.Background_Exec_( session_id_,
'DECLARE
 param1_    Attr_Obj;
 param2_    Attr_Obj;
 param3_    Attr_Obj;
 param4_    Attr_Obj;
 param5_    Attr_Obj;
 param6_    Attr_Obj;
 param7_    Attr_Obj;
 param8_    Attr_Obj;
 param9_    Attr_Obj;
 xml_obj_   Xml_Obj;
 BEGIN               

 param1_ := FND_Api.Read_Attr( :session_id, ''PARAM1'' );
 param2_ := FND_Api.Read_Attr( :session_id, ''PARAM2'' );
 param3_ := FND_Api.Read_Attr( :session_id, ''PARAM3'' );
 param4_ := FND_Api.Read_Attr( :session_id, ''PARAM4'' );
 param5_ := FND_Api.Read_Attr( :session_id, ''PARAM5'' );
 param6_ := FND_Api.Read_Attr( :session_id, ''PARAM6'' );
 param7_ := FND_Api.Read_Attr( :session_id, ''PARAM7'' );
 param8_ := FND_Api.Read_Attr( :session_id, ''PARAM8'' );
 param9_ := FND_Api.Read_Attr( :session_id, ''PARAM9'' );
 xml_obj_ := Sap_Api.Call_Obj( :rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_, :path_ );
 INSERT INTO FND_SESSION_DATA_CLOB_TAB
    (SESSION_ID, DATA_TYPE, ROW_NO, CLOB_ )
 VALUES ( :SESSION_ID , ''SAP_OBJ'', 1, xml_obj_.To_Clob() );
 COMMIT;
 END;
           ', rfc_name_, path_ );
      COMMIT;
      RETURN session_id_;
  END;

  FUNCTION Call_Tab_In_Background( 
                 rfc_name_   IN VARCHAR2,
                 columns_    IN VARCHAR2,
                 param1_     IN Attr_Obj DEFAULT NULL,
                 param2_     IN Attr_Obj DEFAULT NULL,
                 param3_     IN Attr_Obj DEFAULT NULL,
                 param4_     IN Attr_Obj DEFAULT NULL,
                 param5_     IN Attr_Obj DEFAULT NULL,
                 param6_     IN Attr_Obj DEFAULT NULL,
                 param7_     IN Attr_Obj DEFAULT NULL,
                 param8_     IN Attr_Obj DEFAULT NULL,
                 param9_     IN Attr_Obj DEFAULT NULL,
                 path_       IN VARCHAR2 DEFAULT NULL,
                 sub_query1_ IN AttrS_Obj DEFAULT NULL,
                 sub_query2_ IN AttrS_Obj DEFAULT NULL,
                 sub_query3_ IN AttrS_Obj DEFAULT NULL,
                 sub_query4_ IN AttrS_Obj DEFAULT NULL,
                 sub_query5_ IN AttrS_Obj DEFAULT NULL
                                                       ) RETURN NUMBER IS
      PRAGMA AUTONOMOUS_TRANSACTION;

      session_id_       NUMBER;
      columns_str_      VARCHAR2(4000);
      get_columns_str_  VARCHAR2(32000);      
  BEGIN
      session_id_ := FND_Api.Start_Session();
      FOR i IN 1..39 LOOP
         columns_str_ := columns_str_ ||', '||'S'||lpad(i,2,'0'); 
         get_columns_str_ := get_columns_str_ ||', t.Get('||i||') ';
      END LOOP;
      FND_API.Save_Attr( param1_, session_id_, 'PARAM1' );
      FND_API.Save_Attr( param2_, session_id_, 'PARAM2' );
      FND_API.Save_Attr( param3_, session_id_, 'PARAM3' );
      FND_API.Save_Attr( param4_, session_id_, 'PARAM4' );
      FND_API.Save_Attr( param5_, session_id_, 'PARAM5' );
      FND_API.Save_Attr( param6_, session_id_, 'PARAM6' );
      FND_API.Save_Attr( param7_, session_id_, 'PARAM7' );
      FND_API.Save_Attr( param8_, session_id_, 'PARAM8' );
      FND_API.Save_Attr( param9_, session_id_, 'PARAM9' );

      FND_API.Save_Attrs( sub_query1_, session_id_, 'SUB_QUERY1' );
      FND_API.Save_Attrs( sub_query2_, session_id_, 'SUB_QUERY2' );
      FND_API.Save_Attrs( sub_query3_, session_id_, 'SUB_QUERY3' );
      FND_API.Save_Attrs( sub_query4_, session_id_, 'SUB_QUERY4' );
      FND_API.Save_Attrs( sub_query5_, session_id_, 'SUB_QUERY5' );
      COMMIT;
               
      FND_Api.Background_Exec_( session_id_,
'DECLARE
 param1_    Attr_Obj;
 param2_    Attr_Obj;
 param3_    Attr_Obj;
 param4_    Attr_Obj;
 param5_    Attr_Obj;
 param6_    Attr_Obj;
 param7_    Attr_Obj;
 param8_    Attr_Obj;
 param9_    Attr_Obj;
 sub_query1_ AttrS_Obj;
 sub_query2_ AttrS_Obj;
 sub_query3_ AttrS_Obj;
 sub_query4_ AttrS_Obj;
 sub_query5_ AttrS_Obj;
 BEGIN            

 param1_ := FND_Api.Read_Attr( :session_id, ''PARAM1'' );
 param2_ := FND_Api.Read_Attr( :session_id, ''PARAM2'' );
 param3_ := FND_Api.Read_Attr( :session_id, ''PARAM3'' );
 param4_ := FND_Api.Read_Attr( :session_id, ''PARAM4'' );
 param5_ := FND_Api.Read_Attr( :session_id, ''PARAM5'' );
 param6_ := FND_Api.Read_Attr( :session_id, ''PARAM6'' );
 param7_ := FND_Api.Read_Attr( :session_id, ''PARAM7'' );
 param8_ := FND_Api.Read_Attr( :session_id, ''PARAM8'' );
 param9_ := FND_Api.Read_Attr( :session_id, ''PARAM9'' );

 sub_query1_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY1'' );
 sub_query2_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY2'' );
 sub_query3_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY3'' );
 sub_query4_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY4'' );
 sub_query5_ := FND_Api.Read_Attr( :session_id, ''SUB_QUERY5'' );

 INSERT INTO FND_SESSION_DATA_TAB
    (SESSION_ID, DATA_TYPE, ROW_NO '|| columns_str_ || ')
 SELECT :SESSION_ID , ''SAP'', ROWNUM '|| get_columns_str_ || '
   FROM TABLE( Sap_Api.Call_Tab( :rfc_name_, param1_, param2_, param3_, param4_, param5_, param6_, param7_, param8_, param9_, 
                path_ => :path_, sub_query1_ => sub_query1_, sub_query2_ => sub_query2_, sub_query3_ => sub_query3_,
                sub_query4_ => sub_query4_, sub_query5_ => sub_query5_)  ) t;
 COMMIT;
 END;
           ', rfc_name_, path_ );
      COMMIT;
      RETURN session_id_;
  END;
                           
  FUNCTION Call_Tab( session_id_ IN NUMBER,
                     path_       IN VARCHAR2 DEFAULT NULL )           RETURN AttrS_Tab PIPELINED IS
      attr_val_  AttrS_Obj;
      columns_   string_tab;
      value_     VARCHAR2(4000);
      clob_      CLOB;  
      xml_       XML_obj;

      CURSOR get_clob IS
      SELECT CLOB_DATA
        FROM FND_SESSION_DATA_CLOB_TAB
       WHERE session_id = session_id_
         AND data_type = 'SAP_OBJ';
      
      CURSOR get_columns_ IS
      SELECT S01
        FROM FND_SESSION_DATA_TAB
       WHERE session_id = session_id_
         AND data_type = 'COLUMNS'
       ORDER BY ROW_NO;
  BEGIN
      FND_Api.Background_Wait_For_Job( session_id_, throw_error_ => 'Y' );
      
      OPEN get_clob;
      FETCH get_clob INTO clob_;
      CLOSE get_clob;
      
      IF clob_ IS NOT NULL THEN
          xml_ := XML_Obj(NULL, '', '', '');
          xml_.From_Clob( clob_ );
          FOR r_ IN ( SELECT t.This() obj FROM table( xml_.AttrS_Table(path_)) t ) LOOP
              PIPE ROW(r_.obj);
          END LOOP;
      ELSE
          OPEN get_columns_;
          FETCH get_columns_ BULK COLLECT INTO columns_;
          CLOSE get_columns_;
          
          attr_val_ := AttrS_Obj();
          FOR r_ IN (SELECT *
                       FROM FND_SESSION_DATA_TAB
                      WHERE session_id = session_id_
                        AND data_type = 'SAP'
                      ORDER BY ROW_NO ) LOOP
              attr_val_.Clear();
              FOR i IN 1..columns_.count LOOP
                  IF i = 1 THEN value_ := r_.s01;
                  ELSIF i = 1  THEN value_ := r_.s01;
                  ELSIF i = 2  THEN value_ := r_.s02;
                  ELSIF i = 3  THEN value_ := r_.s03;
                  ELSIF i = 4  THEN value_ := r_.s04;
                  ELSIF i = 5  THEN value_ := r_.s05;
                  ELSIF i = 6  THEN value_ := r_.s06;
                  ELSIF i = 7  THEN value_ := r_.s07;
                  ELSIF i = 8  THEN value_ := r_.s08;
                  ELSIF i = 9  THEN value_ := r_.s09;
                  ELSIF i = 10 THEN value_ := r_.s10;
                  ELSIF i = 11 THEN value_ := r_.s11;
                  ELSIF i = 12 THEN value_ := r_.s12;
                  ELSIF i = 13 THEN value_ := r_.s13;
                  ELSIF i = 14 THEN value_ := r_.s14;
                  ELSIF i = 15 THEN value_ := r_.s15;
                  ELSIF i = 16 THEN value_ := r_.s16;
                  ELSIF i = 17 THEN value_ := r_.s17;
                  ELSIF i = 18 THEN value_ := r_.s18;
                  ELSIF i = 19 THEN value_ := r_.s19;
                  ELSE              value_ := NULL;
                  END IF;
                  attr_val_.Set_( columns_(i), value_ );
              END LOOP;
              PIPE ROW ( attr_val_ );
          END LOOP;
      END IF;

      FND_Api.Stop_Session( session_id_ );
      RETURN;
  END;

  ---------------------  Cache ----------------------------  

  FUNCTION Calc_New_Columns_( columns1_ IN VARCHAR2, columns2_ IN VARCHAR2 ) RETURN VARCHAR2 IS
          exists_            BOOLEAN;
          new_columns_       VARCHAR2(4000);
          column1_list_      FND_Api.List;
          column2_list_      FND_Api.List;
          column_name_       VARCHAR2(50);
          v_                 NUMBER;
  BEGIN 
           new_columns_ := columns1_;
           column1_list_ := FND_Api.Split_Trim( columns1_, ',' );
           column2_list_ := FND_Api.Split_Trim( columns2_, ',' );
           FOR i IN 1..column2_list_.count LOOP
               column_name_ := Upper(column2_list_(i));
               v_ := instr(column_name_, '=>');
               IF v_ > 0 THEN
                   column_name_ := trim(substr( column_name_, v_-1));
               END IF;
               v_ := instr(column_name_, ':');
               IF v_ > 0 THEN
                   column_name_ := trim(substr( column_name_, v_-1));
               END IF;
               exists_ := FALSE;
               FOR j IN 1..column1_list_.count LOOP
                   IF column1_list_(j) = column_name_ THEN
                       exists_ := TRUE;
                       EXIT;
                   END IF;
               END LOOP;
               IF NOT exists_ THEN
                   IF new_columns_ IS NULL THEN
                       new_columns_ := column2_list_(i);
                   ELSE
                       new_columns_ := new_columns_||', '||column2_list_(i);
                   END IF;
               END IF;
           END LOOP;
           RETURN new_columns_;
  END;

  FUNCTION Add_Cache( cache_type_      IN VARCHAR2, --  FULL / CACHE
                      table_name_      IN VARCHAR2,
                      columns_key_     IN VARCHAR2,
                      columns_         IN VARCHAR2,
                      where_           IN VARCHAR2,
                      next_update_sec_ IN VARCHAR2 DEFAULT 86400,
                      wait_            IN VARCHAR2 DEFAULT 'N' ) RETURN NUMBER IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      cache_id_          NUMBER;
      table_description_ VARCHAR2(100);
      new_columns_       VARCHAR2(4000);
      new_columns_key_   VARCHAR2(1000); 
      new_columns_tab_   name_tab;
      new_columns_list_  FND_API.List;
      count_             NUMBER;
      session_id_        NUMBER;
      valid_to_          DATE; 
      state_             VARCHAR2(20);
      found_             BOOLEAN;
      tmp_               NUMBER;
      
      CURSOR get_chache_head( table_name_ IN VARCHAR2, columns_key_ IN VARCHAR2, where_ IN VARCHAR2) IS
      SELECT state, cache_id, table_columns, valid_to, ROWID
        FROM sap_cache_head_tab
       WHERE table_name = table_name_
         AND cache_type = cache_type_
         AND nvl(columns_key_,'_') = columns_key_
         AND where_ LIKE where_str||'%';
  BEGIN
      new_columns_key_ := Calc_New_Columns_( '', columns_key_ );
      SELECT nvl(MAX(cache_id),0) + 1
        INTO cache_id_
        FROM sap_cache_head_tab;
        
      FOR r_ IN get_chache_head( upper(TRIM(table_name_)), nvl(new_columns_key_,'_'), nvl(trim(where_),'_') ) LOOP
           valid_to_ := r_.valid_to;
           state_ := r_.state;
           IF columns_ != r_.table_columns THEN
               new_columns_ := Calc_New_Columns_( r_.table_columns, columns_ );
               
               IF new_columns_ != r_.table_columns THEN
                   IF cache_type_ = 'FULL' THEN
                       state_ := 'NEW';
                   ELSE
                       state_ := 'READY';
                   END IF;

                   new_columns_list_ := FND_API.Split_Trim( new_columns_, ',' );
                   new_columns_tab_ := Name_tab();
                   new_columns_tab_.Extend( new_columns_list_.COUNT );
                   count_ := new_columns_list_.COUNT;
                   FOR i IN 1..count_ LOOP
                      new_columns_tab_(i) := new_columns_list_(i);
                   END LOOP;

                   UPDATE sap_cache_head_tab SET
                      table_columns     = new_columns_,
                      table_columns_tab = new_columns_tab_,
                      table_columns_count = count_,
                      valid_to          = NULL,
                      last_update       = NULL,
                      time_execute_sec  = NULL,
                      count_rows        = 0,
                      state             = state_
                   WHERE ROWID = r_.ROWID;
                   
                   DELETE sap_cache_items_tab
                    WHERE cache_id = r_.cache_id;
                   COMMIT;
                   valid_to_ := NULL;
               END IF; 
           END IF;
           IF (cache_type_ = 'FULL') AND (nvl(valid_to_,SYSDATE-1) < SYSDATE) THEN
               IF wait_ = 'Y' THEN
                   Refresh_Cache( r_.cache_id );
               ELSE
                   FND_Api.Log( 'Refresh_Cache_In_Background', r_.cache_id, table_name_ );
                   session_id_ := FND_Api.Background_Exec( 'DECLARE BEGIN Sap_Api.Refresh_Cache( :P1 ); END;', param1_ => r_.cache_id );
               END IF;
           END IF;
           COMMIT;     
           RETURN r_.cache_id;
      END LOOP;
      
      table_description_ := Quick_Value   ( table_name_     => 'DD02T',
                                            return_column_  => 'DDTEXT',
                                            where_          => 'DDLANGUAGE = ''L'' AND TABNAME = '''||upper(trim(table_name_))||''' ' );
      IF table_description_ IS NULL THEN
          table_description_ := Quick_Value   ( table_name_     => 'DD02T',
                                                return_column_  => 'DDTEXT',
                                                where_          => 'DDLANGUAGE = ''E'' AND TABNAME = '''||upper(trim(table_name_))||''' ' );
      END IF;

      IF cache_type_ = 'FULL' THEN
          state_ := 'NEW';
      ELSE
          state_ := 'READY';
      END IF;
      new_columns_ := Calc_New_Columns_( '', columns_ );
      new_columns_list_ := FND_API.Split_Trim( new_columns_, ',' );
      new_columns_tab_ := Name_tab();
      new_columns_tab_.Extend( new_columns_list_.COUNT );
      count_ := new_columns_list_.COUNT;
      FOR i IN 1..count_ LOOP
         new_columns_tab_(i) := new_columns_list_(i);
      END LOOP;
      
      LOOP
          BEGIN
              INSERT INTO sap_cache_head_tab
                 (cache_id, cache_type, table_name, table_description, table_columns, 
                  table_columns_tab, table_columns_count, table_columns_key,
                  where_str, next_update_sec, count_rows, state)  
              VALUES 
                 (cache_id_, cache_type_, table_name_, table_description_, new_columns_, 
                  new_columns_tab_, count_, new_columns_key_,
                  trim(where_), next_update_sec_, 0, state_);
              EXIT;
          EXCEPTION WHEN DUP_VAL_ON_INDEX THEN 
              SELECT nvl(MAX(cache_id),0) + 1
                INTO cache_id_
                FROM sap_cache_head_tab;
                  
              found_ := FALSE;
              FOR r_ IN get_chache_head( upper(TRIM(table_name_)), nvl(new_columns_key_,'_'), nvl(trim(where_),'_') ) LOOP
                  found_ := TRUE;
                  EXIT;
              END LOOP;
              IF found_ THEN
                  EXIT;
              END IF;
          END;
      END LOOP;
          
      COMMIT;
      IF wait_ = 'Y' THEN
          Refresh_Cache( cache_id_ );
      ELSE
          FND_Api.Log( 'Refresh_Cache_In_Background', cache_id_, table_name_ );
          session_id_ := FND_Api.Background_Exec( 'DECLARE BEGIN Sap_Api.Refresh_Cache( :P1 ); END;', param1_ => cache_id_ );
      END IF;
      COMMIT;
      RETURN cache_id_;
  END;

  PROCEDURE Remove_Cache( cache_id_   IN NUMBER ) IS
  BEGIN
      DELETE sap_cache_items_tab
       WHERE cache_id = cache_id_;
        
      DELETE sap_cache_head_tab
       WHERE cache_id = cache_id_;
  END;
  
  PROCEDURE Remove_Cache( table_name_ IN VARCHAR2 ) IS
  BEGIN
      FOR r_ IN (SELECT cache_id FROM sap_cache_head_tab WHERE table_name = table_name_ ) LOOP
          Remove_Cache( r_.cache_id );
      END LOOP;
  END;

  PROCEDURE Refresh_Cache(table_name_ IN VARCHAR2 ) IS
  BEGIN
      FOR r_ IN (SELECT cache_id 
                   FROM sap_cache_head_tab 
                  WHERE table_name = table_name_ 
                    AND cache_type = 'FULL' ) LOOP        
         Refresh_Cache( r_.cache_id );
      END LOOP;
  END;

  PROCEDURE Refresh_Cache(cache_id_ IN NUMBER ) IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      time_              NUMBER;
      from_time_         TIMESTAMP;
      to_time_           TIMESTAMP;
      first_             BOOLEAN;
      count_             PLS_INTEGER;
      columns_key_list_  FND_API.List;
      columns_key_idx_   Idx_Tab;
      columns_key_count_ PLS_INTEGER;
      key_value_         VARCHAR2(70);
      table_name_        VARCHAR2(30);
      found_             BOOLEAN;
      valid_to_          DATE;
  BEGIN
      FOR r_ IN (SELECT * 
                   FROM sap_cache_head_tab t 
                  WHERE cache_id = cache_id_ ) LOOP      
         IF r_.cache_type != 'FULL' THEN
         
             DELETE sap_cache_items_tab
              WHERE cache_id = cache_id_
                AND valid_to < SYSDATE;
             count_ := SQL%ROWCOUNT;
             
             UPDATE sap_cache_head_tab SET
                 count_rows = count_rows - count_
              WHERE cache_id = cache_id_;
             COMMIT;
             RETURN;
         END IF;
         table_name_ := r_.table_name;
         FND_Api.Time_Start( 'Refresh_Cache id='||cache_id_||' table='||table_name_ );
         valid_to_ := SYSDATE + nvl(r_.next_update_sec,10)/24/60/60;
         
         UPDATE sap_cache_head_tab SET
                valid_to         = NULL,
                last_update      = NULL,
                time_execute_sec = NULL,
                count_rows       = NULL,
                state            = 'EXECUTED'
          WHERE cache_id = cache_id_;
          COMMIT;

          DELETE sap_cache_items_tab
           WHERE cache_id = cache_id_;
 
          from_time_   := localtimestamp;                  
          columns_key_list_ := FND_API.Split_Trim( r_.table_columns_key, ',' );
          columns_key_count_ := columns_key_list_.COUNT;

          count_ := 0;
          first_ := TRUE;
          FOR v_ IN ( SELECT rownum, t.This() obj 
                        FROM TABLE (Sap_Api.Query(table_name_ => r_.table_name,
                                                  columns_    => r_.table_columns,
                                                  where_      => r_.where_str,
                                                  max_rows_   => 50000,
                                                  name_cache_ => 'N' ) ) t
                    ) LOOP
              IF first_ THEN
                  first_ := FALSE;
                  UPDATE sap_cache_head_tab t SET
                      table_columns_tab = v_.obj.names_,
                      table_columns_count = v_.obj.count_
                   WHERE cache_id = cache_id_;
                   
                   columns_key_idx_ := Idx_Tab();
                   columns_key_idx_.Extend( columns_key_list_.count );
                   FOR i IN 1..columns_key_count_ LOOP
                       found_ := FALSE;
                       FOR j IN 1..v_.obj.count_ LOOP
                           IF v_.obj.names_(j) = columns_key_list_(i) THEN
                               columns_key_idx_(i) := j;
                               found_ := TRUE; 
                               EXIT;
                           END IF;
                       END LOOP;
                       IF NOT found_ THEN
                           UPDATE sap_cache_head_tab SET
                                  state            = 'ERROR'
                           WHERE cache_id = cache_id_;
                           COMMIT;
                           Error_Api.Error( 'REFRESH_CACHE', 'Can''t found key column :P1.',columns_key_list_(i) );
                       END IF;
                   END LOOP;
              END IF;
              
              key_value_ := NULL;
              FOR i IN 1..columns_key_count_ LOOP
                  key_value_ := key_value_|| v_.obj.values_( columns_key_idx_(i) ) || chr_31_;
              END LOOP;
              
              INSERT INTO sap_cache_items_tab
                  (cache_id, row_no, key, row_values, valid_to ) 
              VALUES
                  (cache_id_, v_.rownum, key_value_, v_.obj.values_, valid_to_ );
              count_ := count_ + 1;
          END LOOP;
      END LOOP;
      to_time_   := localtimestamp;
      time_      := ((extract(hour from to_time_)-extract(hour from from_time_))*3600+
                    (extract(minute from to_time_)-extract(minute from from_time_))*60+
                     extract(second from to_time_)-extract(second from from_time_)) ;            
       
      UPDATE sap_cache_head_tab SET
          last_update = SYSDATE,
          valid_to    = valid_to_,
          count_rows  = count_,
          time_execute_sec =  time_,
          state       = 'READY'
       WHERE cache_id = cache_id_;
     FND_Api.Time_Stop( 'Refresh_Cache id='||cache_id_||' table='||table_name_ );
     COMMIT;
  END;

  
  PROCEDURE Refresh_All_Caches IS
  BEGIN
      FOR r_ IN (SELECT cache_id 
                   FROM sap_cache_head_tab  ) LOOP
         Refresh_Cache( r_.cache_id );
      END LOOP;
  END;

  PROCEDURE Refresh_Cache_At_Night IS
  BEGIN 
      FOR r_ IN (SELECT cache_id
                   FROM sap_cache_head_tab ) LOOP
         Refresh_Cache( r_.cache_id );
      END LOOP;
  END;

  FUNCTION Query_From_Cache( cache_id_ IN NUMBER ) RETURN AttrS_Tab PIPELINED IS
      attr_         AttrS_Obj;
      head_         sap_cache_head_tab%ROWTYPE;
      
      CURSOR get_head IS
      SELECT *
        FROM sap_cache_head_tab
       WHERE cache_id = cache_id_;
  BEGIN
      OPEN get_head;
      FETCH get_head INTO head_;
      CLOSE get_head;
      IF head_.state != 'FULL' THEN
          RETURN;
      END IF;
      IF NOT (head_.state = 'READY' AND head_.valid_to >= SYSDATE) THEN
          IF head_.state IN  ('NEW','READY','ERROR') THEN
              Refresh_Cache( cache_id_ );
          ELSE -- state_ = 'EXECUTED'
             LOOP
                  OPEN get_head;
                  FETCH get_head INTO head_;
                  CLOSE get_head;
                  IF head_.state IN ('READY','ERROR') THEN
                      EXIT;
                  END IF;
                  --DBMS_lock.sleep( 1 );
             END LOOP;
          END IF;
      END IF;
      IF head_.state = 'ERROR' THEN
          Error_Api.Error( 'QUERY_FROM_CACHE_ERROR', 'Query from cache error.');
      END IF;      
      
      attr_ := AttrS_Obj();
      attr_.count_ := head_.table_columns_count;
      attr_.names_ := head_.table_columns_tab;
      
      FOR r_ IN (SELECT t.row_values
                   FROM sap_cache_items_tab t
                  WHERE cache_id = cache_id_ ) LOOP
          attr_.values_ := r_.row_values;
          PIPE ROW( attr_ );
      END LOOP;
      RETURN;
  END;


  FUNCTION Read_Attachment_File_Data( doc_id_ IN VARCHAR2 ) RETURN BLOB IS
      tab_             attr_tab;
      request_         CLOB;
      response_        CLOB;
      raw_line_        RAW(1000);
      file_data_       BLOB;
  BEGIN
      FND_Api.Time_Start( 'Read_Attachment_File_Data' );
      tab_ := attr_tab();
      Add_Rfc( tab_, 'SO_DOCUMENT_READ_API1', 
                     SAP_API.Param( '', 
                                    'DOCUMENT_ID', doc_id_
                                    ),
                     SAP_API.Param('CONTENTS_HEX' )  );
      request_ := Generate_Request_( tab_ );

      Call_Web_Service_Raw( request_, file_data_, 
              amper_||'lt;item'||amper_||'gt;'||amper_||'lt;LINE'||amper_||'gt;', 
              amper_||'lt;'||amper_||'#x2f;LINE'||amper_||'gt;'||amper_||'lt;'||amper_||'#x2f;item'||amper_||'gt;', 
              amper_||'lt;DOC_SIZE'||amper_||'gt;', 
              amper_||'lt;'||amper_||'#x2f;DOC_SIZE'||amper_||'gt;');

      IF DBMS_lob.getlength(file_data_) = 0 THEN
          DECLARE
              tmp_file_data_  BLOB;
              pos_            NUMBER;
              len_            NUMBER;
              raw_line_       RAW(1000);
          BEGIN
              DBMS_lob.createtemporary( tmp_file_data_, true );
              pos_ := 1;
              FOR l_ IN (SELECT l.Get( 'LINE' )  line 
                           FROM TABLE( SAP_API.Call_Tab('SO_DOCUMENT_READ_API1',
                                                        SAP_API.Param( '', 
                                                            'DOCUMENT_ID', doc_id_
                                                            ),
                                                        SAP_API.Param('OBJECT_CONTENT' ),
                                                        path_ => 'SO_DOCUMENT_READ_API1/OBJECT_CONTENT'
                                      ) ) l  ) LOOP
                  raw_line_ := utl_raw.cast_to_raw( utl_i18n.unescape_reference(l_.line) );
                  len_ := utl_raw.length( raw_line_ );
                  DBMS_lob.write( tmp_file_data_, len_, pos_, raw_line_ );
                  pos_ := pos_ + len_;
              END LOOP;
              file_data_ := tmp_file_data_;
              DBMS_LOB.freetemporary(tmp_file_data_);
          END;
      END IF;
      IF FND_API.Log_Is_On() THEN
          FND_Api.Log( 'Size', DBMS_lob.getlength(file_data_) );
      END IF;
      FND_Api.Time_Stop( 'Read_Attachment_File_Data' );
      RETURN file_data_;
  END;


  FUNCTION Read_Attachment ( document_id_ IN VARCHAR2 )                         RETURN ATTACHMENT_REC IS
  BEGIN
      FOR r_ IN (SELECT * FROM Table(Sap_Api.Read_Attachment_( document_id_ => document_id_, read_file_data_ => 'Y' ) )) LOOP
          RETURN r_;
      END LOOP; 
  END;
  
  FUNCTION Read_Attachment_( object_type_    IN VARCHAR2 DEFAULT '%', 
                             object_no_      IN VARCHAR2 DEFAULT '%',
                             client_         IN VARCHAR2 DEFAULT NULL,
                             document_id_    IN VARCHAR2 DEFAULT NULL,
                             read_file_data_ IN VARCHAR2 DEFAULT 'N' ) RETURN ATTACHMENT_TAB PIPELINED IS
      rec_     ATTACHMENT_REC;
      where_   VARCHAR2(400);
  BEGIN
      IF document_id_ IS NOT NULL THEN
          where_ := 'INSTID_B = '''||document_id_||''' AND ';
      END IF;
      IF client_ IS NULL THEN
          where_ := where_||'CLIENT = ''#MANDT#'' AND TYPEID_B = ''MESSAGE'' ';
      ELSE
          where_ := where_||'CLIENT = '''||client_||''' AND TYPEID_B = ''MESSAGE'' ';
      END IF;
      
      IF object_type_ = '%' THEN
          NULL;
      ELSIF instr(object_type_,'%') > 0 THEN
          where_ := where_ || 'AND TYPEID_A LIKE '''||object_type_||''' ';
      ELSE
          where_ := where_ || 'AND TYPEID_A = '''||object_type_||''' ';
      END IF;
      
      IF object_no_ = '%' THEN
          NULL;
      ELSIF instr(object_no_,'%') > 0 THEN
          where_ := where_ || 'AND INSTID_A LIKE '''||object_no_||''' ';
      ELSE
          where_ := where_ || 'AND INSTID_A = '''||object_no_||''' ';
      END IF;
      
      FOR r_ IN (SELECT t.Get('REL_TYPE')      RELATION_TYPE,
                        t.Get('TYPEA')         OBJECT_TYPE,
                        t.Get('TYPEA_DESC')    OBJECT_TYPE_DESC,
                        t.Get('PO_NO')         OBJECT_NO,
                        t.Get('DESC')          SHORT_DESCRIPTION,
                        t.Get('USR_CREATE')    USER_CREATE,
                        t.Get('USR_OWNER')     USER_OWNER,
                        Sap_Api.Str_To_Date_Time( t.Get('CREATE_DATE'), t.Get('CREATE_TIME') ) CREATE_DATE,
                        t.Get('DOC_TYPE')      DOCUMENT_TYPE,
                        t.Get('FILE_EXT')      FILE_EXTENSION,
                        To_Number(t.Get('OBJLEN')) FILE_SIZE,
                        t.Get('DOC_ID')        DOCUMENT_ID
                  FROM TABLE( BMS.Sap_Api.Query( table_name_    => 'SRGBTBREL',
                                                 columns_       => 'RELTYPE=>REL_TYPE, INSTID_A=>PO_NO,  TYPEID_A=>TYPEA, INSTID_B=>DOC_ID',
                                                 where_         => where_,
                                                 sub_query1_    => BMS.Sap_Api.Sub_Query(
                                                                      table_name_     => 'SOOD',
                                                                      columns_        => 'OBJDES=>DESC, CRONAM=>USR_CREATE,  OWNNAM=>USR_OWNER, CRDAT=>CREATE_DATE, CRTIM=>CREATE_TIME, FILE_EXT, OBJLEN, NOTTP=>DOC_TYPE ',
                                                                      join_columns_   => 'DOC_ID(18;3) = OBJTP AND DOC_ID(21;2) = OBJYR AND DOC_ID(23;12) = OBJNO ',
                                                                      where_          => 'MANDT = ''#MANDT#'' '
                                                                   ),
                                                 sub_query2_    => BMS.Sap_Api.Sub_Query(
                                                                      table_name_     => 'TOJTB',
                                                                      columns_        => 'EDITELEM=>TYPEA_DESC',
                                                                      join_columns_   => 'TYPEA = NAME ',
                                                                      where_          => ''
                                                                   )
                            ))t 
                    ORDER BY Sap_Api.Str_To_Date_Time( t.Get('CREATE_DATE'), t.Get('CREATE_TIME') ) DESC ) LOOP
          rec_.relation_type := r_.relation_type;
          rec_.object_type := r_.object_type;
          rec_.object_no := r_.object_no;
          rec_.short_description := r_.short_description;
          rec_.user_create := r_.user_create;
          rec_.user_owner := r_.user_owner;
          rec_.create_date := r_.create_date;
          rec_.document_type := r_.document_type;
          rec_.document_id := r_.document_id;
          rec_.file_extension := r_.file_extension;
          rec_.file_size := r_.file_size;
          IF read_file_data_ IN ('TRUE','Y') THEN
              BEGIN
              rec_.file_data := Read_Attachment_File_Data( r_.document_id );
              EXCEPTION WHEN OTHERS THEN
                  NULL;
              END;
          END IF;
          PIPE ROW (rec_);
      END LOOP;
      RETURN;
  END;
  
  FUNCTION Add_Attachment  ( object_type_    IN VARCHAR2, 
                             object_no_      IN VARCHAR2,
                             description_    IN VARCHAR2,
                             file_extension_ IN VARCHAR2,
                             file_data_      IN OUT NOCOPY BLOB,
                             folder_id_      IN VARCHAR2 DEFAULT NULL,
                             language_       IN VARCHAR2 DEFAULT 'L', -- 'PL'
                             rel_client_     IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2 IS -- document_id_
      doc_folder_id_      VARCHAR2(50);
      tab_                attr_tab;
      request_            CLOB;
      ret_                XML_Obj;
      document_id_        VARCHAR2(50);
      old_client_         VARCHAR2(50);
      head_request_       VARCHAR2(32000); 
      tail_request_       VARCHAR2(32000);
      num_                NUMBER;
      pos_                PLS_INTEGER;
      len_                PLS_INTEGER;
      line_               RAW(255);
  BEGIN
      IF client_ IS NOT NULL THEN
          old_client_ := client_; --SAP_API.client_
          Set_Client( rel_client_ );
      END IF;
      --SELECT * FROM TABLE( Sap_API.Quick_Query('TOJTB', where_ => 'NAME IN ( ''BUS2012'', ''BUS3006'') ') );
      IF folder_id_ IS NOT NULL THEN
          doc_folder_id_ := folder_id_;
      ELSE   
          SELECT max(t.Get( 'FOLTP' )||t.Get( 'FOLYR' )||t.Get( 'FOLNO' ))
            INTO doc_folder_id_
            FROM TABLE( SAP_Api.Query( table_name_ => 'SOFD', columns_ => 'FOLTP, FOLYR, FOLNO',  where_ => 'FOLRG = ''B'''  )) t;
          IF doc_folder_id_ IS NULL THEN
              SELECT t.Get( 'OBJTP' )||t.Get( 'OBJYR' )||t.Get( 'OBJNO' )
                INTO doc_folder_id_
                FROM TABLE( SAP_API.Call_Tab('SO_FOLDER_ROOT_ID_GET',
                                              path_ => 'SO_FOLDER_ROOT_ID_GET/FOLDER_ID'  )) t;
          END IF;
          --doc_folder_id_ := 'FOL18          4'       ;
      END IF;
      
      tab_ := attr_tab();
      Add_Rfc( tab_, 'SO_DOCUMENT_INSERT_API1', 
                     SAP_API.Param( '', 
                                    'FOLDER_ID', doc_folder_id_,
                                    'DOCUMENT_TYPE', upper(file_extension_)
                                    ),
                     SAP_API.Param( 'DOCUMENT_DATA', 
                                    'OBJ_DESCR', description_,
                                    'OBJ_LANGU', language_,
                                    'OBJ_NAME', 'MESSAGE',
                                    'DOC_SIZE', DBMS_lob.getlength(file_data_)
                                    ),
                     SAP_API.Param('CONTENTS_HEX' )  );
      Add_Rfc( tab_, 'BAPI_TRANSACTION_COMMIT' );
      request_ := Generate_Request_( tab_ );
      num_ := instr( request_, '<CONTENTS_HEX/>' );
      head_request_ := substr( request_, 1, num_-1 ); 
      tail_request_ := substr( request_, num_+15 ); 
      
      len_ := DBMS_lob.getlength( file_data_ );
      request_ := NULL;
      DBMS_LOB.createtemporary( request_, true );
      DBMS_lob.append( request_, head_request_ ); 
      DBMS_lob.append( request_, '<CONTENTS_HEX>' );
      pos_ := 1;
      WHILE pos_ <= len_ LOOP
          line_ := DBMS_LOB.Substr(file_data_, 255, pos_ );
          pos_ := pos_ + 255;
          DBMS_lob.append( request_, '<item><LINE>'||
                                     utl_raw.cast_to_varchar2(utl_encode.base64_encode( line_ ))||
                                     '</LINE></item>' );
      END LOOP; 
      DBMS_lob.append( request_, '</CONTENTS_HEX>' ); 
      DBMS_lob.append( request_, tail_request_ ); 
      
      ret_ := Exec_Obj( tab_, request_xml_ => request_ );
      DBMS_LOB.freetemporary(request_);
      
      document_id_ := ret_.Attr_Record( 'SO_DOCUMENT_INSERT_API1/DOCUMENT_INFO').Get('DOC_ID');

      tab_ := attr_tab();
      Add_Rfc( tab_, 'BINARY_RELATION_CREATE', 
                     SAP_API.Param( '', 
                                    'RELATIONTYPE', 'ATTA'
                                    ),
                     SAP_API.Param( 'OBJ_ROLEA', 
                                    'OBJTYPE', object_type_,
                                    'OBJKEY', object_no_
                                    ),
                     SAP_API.Param( 'OBJ_ROLEB', 
                                    'OBJTYPE', 'MESSAGE',
                                    'OBJKEY', document_id_
                                    ));
      Add_Rfc( tab_, 'BAPI_TRANSACTION_COMMIT' );
      ret_ := Exec_Obj( tab_ );
      IF old_client_ IS NOT NULL THEN
          Set_Client( old_client_ );
      END IF;
      RETURN document_id_;
  END;
  
  PROCEDURE Remove_Attachment( document_id_ IN VARCHAR2 ) IS
      tab_                attr_tab;
      ret_                XML_Obj;
  BEGIN
      tab_ := attr_tab();
      FOR r_ IN (SELECT    t.Get('RELTYPE' )  RELTYPE,
                           t.Get('TYPEID_A' ) TYPEID_A,
                           t.Get('INSTID_A' ) INSTID_A,
                           t.Get('TYPEID_B' ) TYPEID_B,
                           t.Get('INSTID_B' ) INSTID_B
                    FROM TABLE( Sap_Api.Query( table_name_ => 'SRGBTBREL',
                                               columns_    => 'RELTYPE, TYPEID_A, INSTID_A, TYPEID_B, INSTID_B',
                                               where_      => 'INSTID_B = '''||document_id_||''' ' )) t
                 ) LOOP
          Add_Rfc( tab_, 'BINARY_RELATION_DELETE', 
                         SAP_API.Param( '', 
                                        'RELATIONTYPE', r_.RELTYPE
                                        ),
                         SAP_API.Param( 'OBJ_ROLEA', 
                                        'OBJTYPE', r_.TYPEID_A,
                                        'OBJKEY',  r_.INSTID_A
                                        ),
                         SAP_API.Param( 'OBJ_ROLEB', 
                                        'OBJTYPE', r_.TYPEID_B,
                                        'OBJKEY',  r_.INSTID_B
                                        ));
      END LOOP;
      Add_Rfc( tab_, 'SO_DOCUMENT_DELETE_API1', 
                     SAP_API.Param( '', 
                                    'DOCUMENT_ID', document_id_
                                    ));
      Add_Rfc( tab_, 'BAPI_TRANSACTION_COMMIT' );
      ret_ := Exec_Obj( tab_ );
  END;
  
  
  FUNCTION Ping RETURN NUMBER IS
      tab_                attr_tab;
      ret_                XML_Obj;
      from_time_          TIMESTAMP;
      to_time_            TIMESTAMP;
  BEGIN
      from_time_   := localtimestamp;
      tab_ := attr_tab();
      Add_Rfc( tab_, 'RFC_PING' );
      ret_ := Exec_Obj( tab_ );      
      to_time_   := localtimestamp;
      RETURN ((extract(hour from to_time_)-extract(hour from from_time_))*3600+
                    (extract(minute from to_time_)-extract(minute from from_time_))*60+
                     extract(second from to_time_)-extract(second from from_time_)) ;            
  END;
  
end SAP_API;
/
